import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"什么是Node","description":"","frontmatter":{},"headers":[{"level":2,"title":"大量的库","slug":"大量的库","link":"#大量的库","children":[]},{"level":2,"title":"Node的自带模块","slug":"node的自带模块","link":"#node的自带模块","children":[{"level":3,"title":"queryString","slug":"querystring","link":"#querystring","children":[]}]}],"relativePath":"start-docs/E-md/node.md","filePath":"start-docs/E-md/node.md"}');
const _sfc_main = { name: "start-docs/E-md/node.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="什么是node" tabindex="-1">什么是Node <a class="header-anchor" href="#什么是node" aria-label="Permalink to &quot;什么是Node&quot;">​</a></h1><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！</p><p>Node.js 在浏览器外运行 V8 JavaScript 引擎（Google Chrome 的内核）,执行Javascript的速度非常快，性能非常好。 这使 Node.js 表现得非常出色。</p><p>Node.js 应用程序运行于单个进程中，无需为每个请求创建新的线程。 Node.js 在其标准库中提供了一组异步的 I/O 原生功能（用以防止 JavaScript 代码被阻塞），并且 Node.js 中的库通常是使用非阻塞的范式编写的（从而使阻塞行为成为例外而不是规范）。</p><h2 id="大量的库" tabindex="-1">大量的库 <a class="header-anchor" href="#大量的库" aria-label="Permalink to &quot;大量的库&quot;">​</a></h2><p>npm 的简单结构有助于 Node.js 生态系统的激增，现在 npm 仓库托管了超过 1,000,000 个可以自由使用的开源库包。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">node中的库(包/模块)  包含三种</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">1. node  自带的模块  (crypto,http,path, queryString,fs)</span></span>\n<span class="line"><span style="color:#F8F8F2;">2. 引入第三方模块     (别人开源的模块  通过npm包管理器  jquery , sass)</span></span>\n<span class="line"><span style="color:#F8F8F2;">3. 用户自定义模块     (node也允许用户自定义模块)</span></span></code></pre></div><h1 id="npm-使用介绍" tabindex="-1">NPM 使用介绍 <a class="header-anchor" href="#npm-使用介绍" aria-label="Permalink to &quot;NPM 使用介绍&quot;">​</a></h1><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li><p>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</p></li><li><p>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</p></li><li><p>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</p><p>在 2017 年 1 月时，npm 仓库中就已有超过 350000 个软件包，这使其成为世界上最大的单一语言代码仓库，并且可以确定几乎有可用于一切的软件包。</p></li></ul><p>这里主讲如何npm引入第三方模块</p><p>安装语法 npm/cnpm install 包名 安装的方式</p><pre><code>1.  全局安装 (只需安装一次  在电脑的任何位置都可以使用)     \n    npm install 包名 --global     (install =&gt; i,  --global =&gt; -g)  \n2.  开发依赖(只在开发过程中使用  项目真正运行时 不需要 eg: sass) \n    npm install 包名 --save-dev    (--save-dev   =&gt;  -D)\n \n3.  生产依赖(运行依赖  在开发环境和生产环境都不可少的  eg: jquery )\n    npm install 包名 --save        (--save   =&gt;  -S)\n\n--save-dev 安装并添加条目到 package.json 文件的 devDependencies。 只用于开发环境，不用于生产环境\n--save 安装并添加条目到 package.json 文件的 dependencies。  是需要发布到生产环境的\n</code></pre><p>node的初始化项目</p><pre><code>1. npm init   初始化 (生成一个 package.json 文件  )\n</code></pre><p>​ 2. 使用node 的 npm(包管理器) 安装 gulp 工具<br> ​ (node 的服务器在国外 通过npm 下载各种包的时候 需要翻墙 慢...) ​ 解决 翻墙问题(不需要) =&gt; 淘宝在国内搭建服务器 同步国外的包(淘宝镜像) ​ a. 安装 nrm 切换下载资源的路径<br> ​ npm install nrm -g<br> ​ nrm ls 列举出所有的资源路径 ​ nrm test 列举出所有的资源路径 ​ nrm use taobao 切换源 ​ b. 使用淘宝 定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm: ​ npm install -g cnpm --registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noreferrer">https://registry.npm.taobao.org</a></p><p>gulp 的使用</p><p>目前开发项目比较主流的做法是，使用gulp或webpack这种前端工程化工具来管理我们的项目。</p><p>具体指将项目分为两个环境，分别是开发环境和生产环境，我们只关注开发环境。</p><blockquote><p>我们在开发环境中编写代码，利用gulp自动对开发环境中的文件代码进行整合，将整合后的代码保存到生产环境下，而这个生产环境，就是最终挂到服务器的线上网站。</p></blockquote><blockquote><p>使用gulp时，需要用npm下载相应的模块，所以需要安装nodejs环境。</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">1. 全局安装 gulp </span></span>\n<span class="line"><span style="color:#F8F8F2;">   npm install gulp --global</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">2. 本地安装 gulp  (开发环境安装)</span></span>\n<span class="line"><span style="color:#F8F8F2;">   npm install gulp --save-dev   (开发依赖)</span></span></code></pre></div><h2 id="node的自带模块" tabindex="-1">Node的自带模块 <a class="header-anchor" href="#node的自带模块" aria-label="Permalink to &quot;Node的自带模块&quot;">​</a></h2><p>HTTP/HTTPS</p><p>我们知道传统的HTPP服务器会由Aphche、Nginx之类的软件来担任，但是nodejs并不需要，nodejs提供了http模块，自身就可以用来构建服务器</p><div class="language-js codearea-link" id="medk2h35dxj"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> http </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;http&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">http.</span><span style="color:#A6E22E;">createServer</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">req</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.setDefaultEncoding </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;utf-8&quot;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">writeHeader</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">, {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#E6DB74;">&quot;content-Type&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&quot;text/html;charset=utf-8&quot;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    });</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;&lt;h2&gt;今天天气不错&lt;/h2&gt;&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">end</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Link Start!&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>http模块提供了两个函数http.request和http.get，功能是作为客户端向http服务器发起请求。</p><div class="language-js codearea-link" id="t4j2t1ab0ea"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> https </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;https&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> gunzip </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;zlib&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">createGunzip</span><span style="color:#F8F8F2;">();  </span><span style="color:#88846F;">// 如果线上代码有压缩时需要用到这个第三方模块</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> cheerio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;cheerio&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> fs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;fs&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> req </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> https.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;https://search.jd.com/Search?keyword=%E8%8B%B9%E6%9E%9C&amp;enc=utf-8&amp;suggest=1.def.0.V15--38s0&amp;wq=ping&amp;pvid=6fe0c15b60514f4a8f2b1f5f87b9908d&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> html </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;data&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">chunk</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        html </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chunk;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    });</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;end&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// console.log(html);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> $ </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cheerio.</span><span style="color:#A6E22E;">load</span><span style="color:#F8F8F2;">(html);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">$</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;.gl-item&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> goods </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                goodsId: </span><span style="color:#A6E22E;">$</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">attr</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;data-sku&quot;</span><span style="color:#F8F8F2;">),</span></span>\n<span class="line"><span style="color:#F8F8F2;">                goodsName: </span><span style="color:#A6E22E;">$</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;.p-name&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;em&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">text</span><span style="color:#F8F8F2;">(),</span></span>\n<span class="line"><span style="color:#F8F8F2;">                goodsImg: </span><span style="color:#A6E22E;">$</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;img&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">attr</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;src&quot;</span><span style="color:#F8F8F2;">),</span></span>\n<span class="line"><span style="color:#F8F8F2;">                goodsPrice: </span><span style="color:#A6E22E;">$</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;.p-price&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;i&quot;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">text</span><span style="color:#F8F8F2;">(),</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> goods;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }).</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(list);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        fs.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./data.json&quot;</span><span style="color:#F8F8F2;">, JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(list), { encoding: </span><span style="color:#E6DB74;">&quot;utf-8&quot;</span><span style="color:#F8F8F2;">, flag: </span><span style="color:#E6DB74;">&quot;w&quot;</span><span style="color:#F8F8F2;"> }, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">err) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;写入成功&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// var body = &quot;&quot;;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// res.pipe(gunzip);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// gunzip.on(&#39;data&#39;, function (data) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//     body += data;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// gunzip.on(&#39;end&#39;, function () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//     // console.log(body);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//     var $ = cheerio.load(body);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//     var goods = {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//         goodsId: goodsId,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//         goodsPrice: goodsPrice,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//         goodsName: $(&quot;.sku-name&quot;).text().trim(),</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//         goodsPrice: $(&quot;.p-price .price&quot;).text(),</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//         goodsPicList: $(&quot;.lh li img&quot;).map((index, item) =&gt; $(item).prop(&quot;src&quot;)).get().join()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//     }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//     console.log(goods);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="querystring" tabindex="-1">queryString <a class="header-anchor" href="#querystring" aria-label="Permalink to &quot;queryString&quot;">​</a></h3><p>querystring.stringify(obj, separator, eq, options)</p><p>stringify这个方法是将一个对象序列化成一个字符串， 与querystring.parse相对。</p><p>参数：</p><p>​ obj指需要序列化的对象</p><p>​ separator（ 可省） 用于连接键值对的字符或字符串， 默认值为 &quot;&amp;&quot;;</p><p>​ eq（ 可省） 用于连接键和值的字符或字符串， 默认值为 &quot;=&quot;;</p><div class="language-js codearea-link" id="l0y47fl9p1o"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> qs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;querystring&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(qs);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&quot;怀霜凌志&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    age: </span><span style="color:#AE81FF;">18</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> qs.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&quot;&amp;&amp;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(str);  </span><span style="color:#88846F;">// username=怀霜凌志&amp;&amp;age=18</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>2 querystring.parse(str,separator,eq,options)</p><p>parse这个方法是将一个字符串反序列化为一个对象。</p><p>参数：</p><p>​ str指需要反序列化的字符串;</p><p>​ separator（可省）指用于分割str这个字符串的字符或字符串，默认值为&quot;&amp;&quot;;</p><p>​ eq（可省）指用于划分键和值的字符或字符串，默认值为&quot;=&quot;;</p><div class="language-js codearea-link" id="weagy4q83"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> qs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;querystring&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;username=怀霜凌志&amp;&amp;age=18&quot;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> qs.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(str, </span><span style="color:#E6DB74;">&quot;&amp;&amp;&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(result);</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>3 querystring.escape(str) escape可使传入的字符串进行编码</p><p>4 querystring.unescape(str) unescape方法可将含有 % 的字符串进行解码</p><div class="language-js codearea-link" id="27trdqy82j9"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> qs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;querystring&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Today is 星期三&quot;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> qs.</span><span style="color:#A6E22E;">escape</span><span style="color:#F8F8F2;">(str);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(result);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> newStr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> qs.</span><span style="color:#A6E22E;">unescape</span><span style="color:#F8F8F2;">(result);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(newStr);</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="hd2olqpey3w"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">fs</span></span>\n<span class="line"><span style="color:#F8F8F2;"> .</span><span style="color:#A6E22E;">readFile</span><span style="color:#F8F8F2;">(url , encode , callback) 读取文件内容</span></span>\n<span class="line"><span style="color:#F8F8F2;">  url 为需要读取的文件路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ecnode 需要采用哪种字符编码集来进行内容读取</span></span>\n<span class="line"><span style="color:#F8F8F2;">  callback 当文件读取完毕之后的回调函数   </span></span>\n<span class="line"><span style="color:#F8F8F2;">          该回调函数会接收两个形参   error,data</span></span>\n<span class="line"><span style="color:#F8F8F2;">          第一个形参为读取失败时的错误信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">          第二个形参为读取成功时的文本内容</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span></span>\n<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#A6E22E;">readFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Test/1.txt&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&quot;utf-8&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> err;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  })</span></span>\n<span class="line"><span style="color:#F8F8F2;">       </span></span>\n<span class="line"><span style="color:#F8F8F2;"> .fs.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(filename,data,[options],callback)</span></span>\n<span class="line"><span style="color:#F8F8F2;"> filename  String 文件名</span></span>\n<span class="line"><span style="color:#F8F8F2;"> data      String</span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;">buffer  </span><span style="color:#88846F;">//需要写入的数据</span></span>\n<span class="line"><span style="color:#F8F8F2;"> option    Object</span></span>\n<span class="line"><span style="color:#F8F8F2;"> 		encoding  String </span><span style="color:#F92672;">|</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">   </span><span style="color:#F92672;">default=</span><span style="color:#E6DB74;">&#39;utf-8&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;"> 		flag      String         </span><span style="color:#F92672;">default=</span><span style="color:#E6DB74;">&#39;w&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">//1、默认&quot;w&quot;(直接写入数据，会清空原有数据)  2、{ &#39;flag&#39;: &#39;a&#39; } 可重复写入数据</span></span>\n<span class="line"><span style="color:#F8F8F2;">        flag属性</span></span>\n<span class="line"><span style="color:#F8F8F2;">            w ：写入文件，文件不存在则创建，存在则清空；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            wx ：和w一样，但是文件存在时会报错；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            w</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> ：读取并写入文件，文件不存在则创建，存在则清空；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            wx</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> ：和w</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">一样，但是文件存在时会报错；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            a ：以追加方式写入文件，文件不存在则创建；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            ax ：和a一样，但是文件存在时会报错；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            a</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> ：读取并追加写入文件，文件不存在则创建；</span></span>\n<span class="line"><span style="color:#F8F8F2;">            ax</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> ：和a</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">一样，但是文件存在时会报错。</span></span>\n<span class="line"><span style="color:#F8F8F2;">  callback 动作执行完后的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#A6E22E;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./Test/1.json&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;{&quot;data&quot;:&quot;i`m test&quot;}&#39;</span><span style="color:#F8F8F2;">, {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        encoding: </span><span style="color:#E6DB74;">&quot;utf-8&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        flag: </span><span style="color:#E6DB74;">&quot;w&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> err;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;ok&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span></span>\n<span class="line"><span style="color:#F8F8F2;"> .</span><span style="color:#A6E22E;">appendFile</span><span style="color:#F8F8F2;">(url,content,option,callback) 向已存在的文件的最后添加新的内容</span></span>\n<span class="line"><span style="color:#F8F8F2;">  url为需要追加内容的文件所在路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">  content 为需要追加到文件的内容</span></span>\n<span class="line"><span style="color:#F8F8F2;"> </span></span>\n<span class="line"><span style="color:#F8F8F2;"> .</span><span style="color:#A6E22E;">mkdir</span><span style="color:#F8F8F2;">(url , callback)  创建目录    url为需要创建的目录所在路径   callback 创建动作执行完成之后的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">readdir</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> err;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;"> </span></span>\n<span class="line"><span style="color:#F8F8F2;"> .</span><span style="color:#A6E22E;">readdir</span><span style="color:#F8F8F2;">(url,callback)  读取目录</span></span>\n<span class="line"><span style="color:#F8F8F2;">    url 为需要被读取的目录路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">    callback 为读取完毕后执行的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">            第一个形参 error为读取失败时的记录信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">            第二个形参 list 为读取成功时文件名</span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;">目录名集合列表</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;"> .</span><span style="color:#A6E22E;">exists</span><span style="color:#F8F8F2;">(url,callback)  判断文件或文件夹是否存在</span></span>\n<span class="line"><span style="color:#F8F8F2;">    url 为需要被读取的目录路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">    callback 为读取完毕后执行的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">        第一个形参 result为文件是否存在的Bool值 true存在，</span><span style="color:#AE81FF;">false</span><span style="color:#F8F8F2;"> 不存在</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span></span>\n<span class="line"><span style="color:#F8F8F2;"> fs.</span><span style="color:#A6E22E;">exists</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;./Test&quot;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">result</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(result);</span></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">.rename(oldUrl , newUrl , callback) 修改文件名/目录名      (注:当新的路径和旧的路径不相同时,则会移动文件;)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    oldUrl 为需要被修改的文件路径(包含文件名)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    newUrl 为被修改好后的文件(包含文件名)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    callback 当文件重命名操作执行完毕后的回调函数</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">.unlink(url , callback) 删除文件</span></span>\n<span class="line"><span style="color:#F8F8F2;">    url为需要被删除的文件路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">    callback 为操作执行完毕后的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">.rmdir(url , callback)  删除目录  (目录必须为空才能被删除)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    url为需要被删除的目录路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">    callback 为操作执行完后的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">.stat(url , callback) 获取文件/目录的相关信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">    url  为需要获取信息的文件/目录 的路径</span></span>\n<span class="line"><span style="color:#F8F8F2;">    callback  为读取完毕后的回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">        第一个形参error为读取失败时的错误信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">        第二个形参info  为读取成功时的相关信息对象</span></span>\n<span class="line"><span style="color:#F8F8F2;">            该info对象下有两个方法    </span></span>\n<span class="line"><span style="color:#F8F8F2;">                isFile() 方法用来判断是否为文件</span></span>\n<span class="line"><span style="color:#F8F8F2;">                isDirectory() 方法用来判断是否为目录</span></span>\n<span class="line"><span style="color:#F8F8F2;">                isBlockDevice()	如果是块设备返回 true，否则返回 false。</span></span>\n<span class="line"><span style="color:#F8F8F2;">                isCharacterDevice()	如果是字符设备返回 true，否则返回 false。</span></span>\n<span class="line"><span style="color:#F8F8F2;">                isSymbolicLink()	如果是软链接返回 true，否则返回 false。</span></span>\n<span class="line"><span style="color:#F8F8F2;">                isFIFO()	如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。</span></span>\n<span class="line"><span style="color:#F8F8F2;">                isSocket()	如果是 Socket 返回 true，否则返回 false。</span></span>\n<span class="line"><span style="color:#F8F8F2;">                </span></span>\n<span class="line"><span style="color:#F8F8F2;">  fs.stat(&quot;./&quot;, (err, info) =&gt; {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    if (err) throw err;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.log(info.isDirectory());</span></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre></div>', 50)
  ]));
}
const node = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  node as default
};
