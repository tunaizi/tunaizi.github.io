import{_ as n,r as a,i as l,a as o}from"./chunks/framework.1cf9c55e.js";const E=JSON.parse('{"title":"请求场景题目","description":"","frontmatter":{},"headers":[{"level":2,"title":"请求场景题目","slug":"请求场景题目-1","link":"#请求场景题目-1","children":[]}],"relativePath":"start-docs/B-JS/请求并行串行问题及复用.md","filePath":"start-docs/B-JS/请求并行串行问题及复用.md"}'),p={name:"start-docs/B-JS/请求并行串行问题及复用.md"};function e(t,s,F,c,r,y){return a(),l("div",null,s[0]||(s[0]=[o(`<h1 id="请求场景题目" tabindex="-1">请求场景题目 <a class="header-anchor" href="#请求场景题目" aria-label="Permalink to &quot;请求场景题目&quot;">​</a></h1><h2 id="请求场景题目-1" tabindex="-1">请求场景题目 <a class="header-anchor" href="#请求场景题目-1" aria-label="Permalink to &quot;请求场景题目&quot;">​</a></h2><ul><li><p>接口如何防刷</p><ul><li>后端限制单位时间内的调用次数，限制总调用次数或者同一客户端的调用次数</li><li>http 请求头信息校验（如 host,user-agent, referer）</li><li>人机验证</li></ul></li><li><p>两个请求并行发送，如果其中一个请求出错，就用默认值代替，怎么实现</p></li><li><p>页面有两个相同的请求怎么复用 封装 API</p></li><li><p>实现函数异步请求成功后就返回，失败后重试 max 次</p><div class="language-js codearea-link" id="2fc7wobtbm2"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">autoRefetch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">max</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> times </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      times</span><span style="color:#F92672;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promise </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve2</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject2</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">reject2</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`post </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">url</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> error\`</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;autoRefetch times: &#39;</span><span style="color:#F8F8F2;">, times)</span></span>
<span class="line"><span style="color:#F8F8F2;">      promise</span></span>
<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(value))</span></span>
<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">error</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (times </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> max) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(error)</span></span>
<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">autoRefetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;api/login&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err))</span></span></code></pre><button class="link">将此代码在线运行</button></div></li><li><p>实现一个多个请求，并行和串行的函数</p><div class="language-js codearea-link" id="djh6nyjf4uw"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`begin promise</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">...\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`promise done</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`promise done</span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }, delay)</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promiseTest1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;test1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promiseTest2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;test2&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promises </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [promiseTest2, promiseTest1]</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="e8ro570ddwi"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 并行</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">all</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">promises</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> _promises </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> promises.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;_promsies&#39;</span><span style="color:#F8F8F2;">, _promises)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">all</span><span style="color:#F8F8F2;">(_promises)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promiseTest3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;test3&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promiseTest4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;test4&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promises2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [promiseTest3, promiseTest4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">all</span><span style="color:#F8F8F2;">(promises2).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="9ighmw2ftuw"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 串行</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">oneByone</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">promises</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  promises.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">prev</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">curr</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prev.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(curr)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">())</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promiseTest1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;test1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promiseTest2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;test2&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> promises </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [promiseTest2, promiseTest1]</span></span>
<span class="line"><span style="color:#A6E22E;">oneByone</span><span style="color:#F8F8F2;">(promises)</span></span></code></pre><button class="link">将此代码在线运行</button></div></li><li><p>后端传给前端一个很大的数，前端会怎么样，该怎么处理？ JavaScript 中的数字限制</p></li></ul><p>JavaScript 中的数字类型是基于 IEEE 754 标准的双精度 64 位二进制格式，这意味着它可以安全地表示的整数范围是-(2^53 - 1)到 2^53 - 1（即-9007199254740991 到 9007199254740991）。 如果后端传给前端的数超出了这个范围，JavaScript 会将其转换为近似值，导致精度丢失。 JSON 中的数字</p><p>JSON 本身没有专门的数字类型，所有数字都是基于 IEEE 754 标准的双精度浮点数。 因此，如果后端传给前端的数超出了 JavaScript 的安全整数范围，前端接收到的数也会是近似值。 处理大数的方法 使用字符串传递大数</p><p>后端可以将大数以字符串的形式传递给前端。 前端接收到字符串后，可以使用字符串操作或特定的库来处理大数。 使用 BigInt</p><div class="language-js codearea-link" id="ylvo3mvz9p"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> largeNumberString </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;1234567890123456789012345678901234567890&#39;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> largeNumber </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">BigInt</span><span style="color:#F8F8F2;">(largeNumberString)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(largeNumber) </span><span style="color:#88846F;">// 1234567890123456789012345678901234567890n</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>JavaScript 引入了 BigInt 类型，可以安全地表示任意精度的整数。 如果后端传给前端的数是以字符串形式传递的，前端可以使用 BigInt 来处理。 示例： 使用第三方库</p><p>如果需要进行复杂的数学运算，可以使用第三方库，如 big.js 或 decimal.js。</p><div class="language-js codearea-link" id="b76rqvwxz6l"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> Big </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;big.js&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> largeNumber </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Big</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;1234567890123456789012345678901234567890&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(largeNumber.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">()) </span><span style="color:#88846F;">// &quot;1234567890123456789012345678901234567890&quot;</span></span></code></pre><button class="link">将此代码在线运行</button></div>`,10)]))}const m=n(p,[["render",e]]);export{E as __pageData,m as default};
