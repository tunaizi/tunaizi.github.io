import{_ as s,r as n,i as l,a as o}from"./chunks/framework.1cf9c55e.js";const y=JSON.parse('{"title":"__name__的作用","description":"","frontmatter":{},"headers":[{"level":2,"title":"在 Python 代码中","slug":"在-python-代码中","link":"#在-python-代码中","children":[]},{"level":2,"title":"if __name__ == \\"__main__\\": 的作用","slug":"if-name-main-的作用","link":"#if-name-main-的作用","children":[{"level":3,"title":"示例代码","slug":"示例代码","link":"#示例代码","children":[]}]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"__file__","slug":"file","link":"#file","children":[]},{"level":2,"title":"__doc__","slug":"doc","link":"#doc","children":[]},{"level":2,"title":"__package__","slug":"package","link":"#package","children":[]},{"level":2,"title":"__builtins__","slug":"builtins","link":"#builtins","children":[]},{"level":2,"title":"__loader__","slug":"loader","link":"#loader","children":[]},{"level":2,"title":"__spec__","slug":"spec","link":"#spec","children":[]},{"level":2,"title":"__path__","slug":"path","link":"#path","children":[]}],"relativePath":"start-docs/H-python/文件内变量.md","filePath":"start-docs/H-python/文件内变量.md"}'),e={name:"start-docs/H-python/文件内变量.md"};function p(t,a,c,r,i,_){return n(),l("div",null,a[0]||(a[0]=[o(`<h1 id="name-的作用" tabindex="-1">__name__的作用 <a class="header-anchor" href="#name-的作用" aria-label="Permalink to &quot;\\_\\_name\\_\\_的作用&quot;">​</a></h1><p>在 Python 编程中，__name__ 是一个特殊的内置变量，用于标识当前模块的名称。通过 <strong>if __name__ == &quot;__main__&quot;:</strong> 结构，可以判断当前模块是被直接运行还是被其他模块导入。这个结构有助于组织代码，使得模块既可以作为脚本运行，也可以作为库被其他模块导入。</p><h2 id="在-python-代码中" tabindex="-1">在 Python 代码中 <a class="header-anchor" href="#在-python-代码中" aria-label="Permalink to &quot;在 Python 代码中&quot;">​</a></h2><ul><li>在创建之初，Python 文件会自动加载一些内置变量，__name__ 就其中之一。</li><li>Python 模块中通常会定义很多变量和函数，这些变量和函数相当于模块中的一个功能。</li><li>模块被导入到别的文件中时，可以调用这些变量和函数。</li><li>这时，__name__ 的作用就彰显了，它可以标识模块的名字，可以显示一个模块的某功能是被自己执行还是被别的文件调用执行。</li><li>假设模块 A 和模块 B，模块 A 自己定义了功能 C，模块 B 调用模块 A，现在功能 C 被执行了。</li></ul><h2 id="if-name-main-的作用" tabindex="-1"><code>if __name__ == &quot;__main__&quot;:</code> 的作用 <a class="header-anchor" href="#if-name-main-的作用" aria-label="Permalink to &quot;\`if __name__ == &quot;__main__&quot;:\` 的作用&quot;">​</a></h2><p>通过 <strong>if __name__ == &quot;__main__&quot;:</strong> 结构，可以确保某些代码块只在模块被直接运行时执行，而在被导入时不执行。这通常用于测试代码、示例代码或模块的主函数调用。</p><h3 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h3><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># my_module.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是主函数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">helper_function</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是辅助函数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    main()</span></span></code></pre></div><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><ul><li>模块重用性：通过将主程序逻辑放在 if __name__ == &quot;__main__&quot;: 块中，可以确保模块中的其他函数和类可以在其他地方被导入和使用，而不会意外执行主程序逻辑。</li><li>测试和调试：可以在模块中包含测试代码或调试代码，这些代码只在模块被直接运行时执行，不会影响其他模块的导入和使用。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>if __name__ == &quot;__main__&quot;: 是一个非常有用的结构，它帮助开发者更好地组织代码，确保模块既可以作为独立脚本运行，也可以作为库被其他模块导入。通过这种方式，可以提高代码的可维护性和可重用性。</li></ul><h1 id="其他类似变量" tabindex="-1">其他类似变量 <a class="header-anchor" href="#其他类似变量" aria-label="Permalink to &quot;其他类似变量&quot;">​</a></h1><h2 id="file" tabindex="-1">__file__ <a class="header-anchor" href="#file" aria-label="Permalink to &quot;\\_\\_file\\_\\_&quot;">​</a></h2><p>描述：标识当前模块的名称。 用途：用于判断模块是被直接运行还是被导入。</p><h2 id="doc" tabindex="-1">__doc__ <a class="header-anchor" href="#doc" aria-label="Permalink to &quot;\\_\\_doc\\_\\_&quot;">​</a></h2><p>描述：包含当前模块的文件路径。 用途：获取模块文件的路径信息。</p><h2 id="package" tabindex="-1">__package__ <a class="header-anchor" href="#package" aria-label="Permalink to &quot;\\_\\_package\\_\\_&quot;">​</a></h2><p>描述：包含模块的文档字符串（docstring）。 用途：提供模块的文档信息。</p><h2 id="builtins" tabindex="-1">__builtins__ <a class="header-anchor" href="#builtins" aria-label="Permalink to &quot;\\_\\_builtins\\_\\_&quot;">​</a></h2><p>描述：包含当前模块的包名称。 用途：用于确定模块所在的包。</p><h2 id="loader" tabindex="-1">__loader__ <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;\\_\\_loader\\_\\_&quot;">​</a></h2><p>描述：包含所有内置对象的字典。 用途：访问内置函数和异常。</p><h2 id="spec" tabindex="-1">__spec__ <a class="header-anchor" href="#spec" aria-label="Permalink to &quot;\\_\\_spec\\_\\_&quot;">​</a></h2><p>描述：包含加载当前模块的加载器对象。 用途：了解模块的加载方式。</p><h2 id="path" tabindex="-1">__path__ <a class="header-anchor" href="#path" aria-label="Permalink to &quot;\\_\\_path\\_\\_&quot;">​</a></h2><p>描述：包含模块的规范（specification）对象。 用途：提供模块的详细加载信息。</p><p>描述：包含包的路径列表。 用途：用于包的动态导入。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># example_module.py</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">main</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是主函数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">helper_function</span><span style="color:#F8F8F2;">():</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;这是辅助函数&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> __name__ </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;__main__&quot;</span><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__name__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__name__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__file__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__file__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__doc__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__doc__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__package__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__package__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__builtins__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__builtins__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__loader__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__loader__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">f</span><span style="color:#E6DB74;">&quot;__spec__: </span><span style="color:#AE81FF;">{</span><span style="color:#F8F8F2;">__spec__</span><span style="color:#AE81FF;">}</span><span style="color:#E6DB74;">&quot;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    main()</span></span></code></pre></div>`,29)]))}const h=s(e,[["render",p]]);export{y as __pageData,h as default};
