import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"Vuex / Redux","description":"","frontmatter":{},"headers":[{"level":2,"title":"vuex 的 mutation 和 redux 的 reducer 为什么不能做异步操作","slug":"vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作","link":"#vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作","children":[]},{"level":2,"title":"手写 redux 的及 compose 函数","slug":"手写-redux-的及-compose-函数","link":"#手写-redux-的及-compose-函数","children":[]},{"level":2,"title":"vuex 与 redux 的区别","slug":"vuex-与-redux-的区别","link":"#vuex-与-redux-的区别","children":[{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"relativePath":"start-docs/B-JS/vuex或redux.md","filePath":"start-docs/B-JS/vuex或redux.md"}');
const _sfc_main = { name: "start-docs/B-JS/vuex或redux.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="vuex-redux" tabindex="-1">Vuex / Redux <a class="header-anchor" href="#vuex-redux" aria-label="Permalink to &quot;Vuex / Redux&quot;">​</a></h1><ul><li>状态管理的思路： 把组件之间需要共享的状态抽离出来，遵循一定的约定，统一管理，让状态的变化可以预测。 <ul><li>思路 1： 全局对象。容易造成数据更改导致相关依赖变化错乱，不可预测</li><li>思路 2： action。通过 dispatch 派发行为 action</li></ul></li><li>redux 实现思路： 发布订阅模式 在 dispatch 中调用 reduce 方法 <ul><li>redux 的异步更新实现：发送两个 action,在请求前和请求后都发送 action 来更新。</li></ul></li><li>Vuex,更改对象，利用 vue 的数据响应式原理来更新 <ul><li>mutation 用来做同步事务</li><li>action 用来做异步事务</li></ul></li><li>redux: view -&gt; dispatch -&gt; actions -&gt; reducer -&gt; state 变化 -&gt; view 变化</li><li>vuex: view -&gt; commit -&gt; mutations -&gt; state 变化 -&gt; view 变化 view -&gt; dispatch -&gt; actions -&gt; mutations -&gt; state 变化 -&gt; view 变化</li></ul><h2 id="vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作" tabindex="-1">vuex 的 mutation 和 redux 的 reducer 为什么不能做异步操作 <a class="header-anchor" href="#vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作" aria-label="Permalink to &quot;vuex 的 mutation 和 redux 的 reducer 为什么不能做异步操作&quot;">​</a></h2><ul><li>因为更改 state 的函数必须是纯函数，纯函数既是统一输入就会统一输出，没有任何副作用；如果是异步则会引入额外的副作用，导致更改后的 state 不可预测；</li></ul><h2 id="手写-redux-的及-compose-函数" tabindex="-1">手写 redux 的及 compose 函数 <a class="header-anchor" href="#手写-redux-的及-compose-函数" aria-label="Permalink to &quot;手写 redux 的及 compose 函数&quot;">​</a></h2><div class="language-js codearea-link" id="xtgadr39aio"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">compose</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">funcs</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (funcs.length </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">arg</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> arg;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (funcs.length </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> funcs[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">];</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> funcs.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">(</span></span>\n<span class="line"><span style="color:#F8F8F2;">		(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">			(</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">				</span><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">args)),</span></span>\n<span class="line"><span style="color:#F8F8F2;">	);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="vuex-与-redux-的区别" tabindex="-1">vuex 与 redux 的区别 <a class="header-anchor" href="#vuex-与-redux-的区别" aria-label="Permalink to &quot;vuex 与 redux 的区别&quot;">​</a></h2><ul><li>更新页面的机制不同 <ul><li>vue 里，vuex 中 store 的数据也是响应式的，通过 vue 的响应式机制来更新页面</li><li>redux 里，通过发布订阅模式，在数据更新后，循环执行回调函数</li></ul></li></ul><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><ul><li>[<a href="https://zhuanlan.zhihu.com/p/53599723" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/53599723</a>] Vuex、Flux、Redux、Redux-saga、Dva、MobX</li></ul>', 10)
  ]));
}
const vuex_redux = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  vuex_redux as default
};
