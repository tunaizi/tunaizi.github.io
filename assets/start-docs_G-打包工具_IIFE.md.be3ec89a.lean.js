import{_ as n,r as a,i as l,a as p}from"./chunks/framework.1cf9c55e.js";const u=JSON.parse('{"title":"IIFE (立即调用函数表达式)","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是 IIFE？","slug":"什么是-iife","link":"#什么是-iife","children":[]},{"level":2,"title":"IIFE 的基本语法","slug":"iife-的基本语法","link":"#iife-的基本语法","children":[]},{"level":2,"title":"IIFE 的主要用途","slug":"iife-的主要用途","link":"#iife-的主要用途","children":[]},{"level":2,"title":"实际应用示例","slug":"实际应用示例","link":"#实际应用示例","children":[]},{"level":2,"title":"在打包工具中的应用","slug":"在打包工具中的应用","link":"#在打包工具中的应用","children":[]},{"level":2,"title":"Rollup 中的 IIFE 配置示例","slug":"rollup-中的-iife-配置示例","link":"#rollup-中的-iife-配置示例","children":[]},{"level":2,"title":"使用 IIFE 的注意事项","slug":"使用-iife-的注意事项","link":"#使用-iife-的注意事项","children":[]}],"relativePath":"start-docs/G-打包工具/IIFE.md","filePath":"start-docs/G-打包工具/IIFE.md"}'),o={name:"start-docs/G-打包工具/IIFE.md"};function e(t,s,F,i,c,r){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="iife-立即调用函数表达式" tabindex="-1">IIFE (立即调用函数表达式) <a class="header-anchor" href="#iife-立即调用函数表达式" aria-label="Permalink to &quot;IIFE (立即调用函数表达式)&quot;">​</a></h1><h2 id="什么是-iife" tabindex="-1">什么是 IIFE？ <a class="header-anchor" href="#什么是-iife" aria-label="Permalink to &quot;什么是 IIFE？&quot;">​</a></h2><p>IIFE (Immediately Invoked Function Expression) 是一个在定义时就立即执行的 JavaScript 函数。它是一种设计模式，也被称为&quot;自执行匿名函数&quot;。</p><h2 id="iife-的基本语法" tabindex="-1">IIFE 的基本语法 <a class="header-anchor" href="#iife-的基本语法" aria-label="Permalink to &quot;IIFE 的基本语法&quot;">​</a></h2><div class="language-javascript codearea-link" id="tgemrrlc5cf"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">;(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 函数体</span></span>
<span class="line"><span style="color:#F8F8F2;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 或者</span></span>
<span class="line"><span style="color:#F8F8F2;">;(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 函数体</span></span>
<span class="line"><span style="color:#F8F8F2;">})()</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="iife-的主要用途" tabindex="-1">IIFE 的主要用途 <a class="header-anchor" href="#iife-的主要用途" aria-label="Permalink to &quot;IIFE 的主要用途&quot;">​</a></h2><ol><li><p><strong>创建私有作用域</strong></p><ul><li>避免变量污染全局命名空间</li><li>防止变量命名冲突</li></ul></li><li><p><strong>模块化封装</strong></p><ul><li>将相关功能封装在一个作用域内</li><li>只暴露需要的接口</li></ul></li><li><p><strong>数据私有化</strong></p><ul><li>创建私有变量和方法</li><li>形成闭包</li></ul></li></ol><h2 id="实际应用示例" tabindex="-1">实际应用示例 <a class="header-anchor" href="#实际应用示例" aria-label="Permalink to &quot;实际应用示例&quot;">​</a></h2><div class="language-javascript codearea-link" id="kfwdeodhgx"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 基础 IIFE</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> counter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 私有变量</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">increment</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count</span><span style="color:#F92672;">++</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> count</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">getCount</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> count</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 带参数的 IIFE</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> calculator </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">initialValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> initialValue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      value </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> n</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">})(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="在打包工具中的应用" tabindex="-1">在打包工具中的应用 <a class="header-anchor" href="#在打包工具中的应用" aria-label="Permalink to &quot;在打包工具中的应用&quot;">​</a></h2><p>当使用 Rollup 等打包工具时，IIFE 格式通常用于：</p><ol><li><p><strong>浏览器直接使用</strong></p><ul><li>生成可以直接在浏览器中使用的代码</li><li>自动处理作用域隔离</li></ul></li><li><p><strong>UMD 模块的一部分</strong></p><ul><li>作为通用模块定义的一种实现方式</li><li>确保代码在不同环境中都能正常运行</li></ul></li></ol><h2 id="rollup-中的-iife-配置示例" tabindex="-1">Rollup 中的 IIFE 配置示例 <a class="header-anchor" href="#rollup-中的-iife-配置示例" aria-label="Permalink to &quot;Rollup 中的 IIFE 配置示例&quot;">​</a></h2><div class="language-javascript codearea-link" id="4zxm3baqyql"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  input: </span><span style="color:#E6DB74;">&#39;src/index.js&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  output: {</span></span>
<span class="line"><span style="color:#F8F8F2;">    file: </span><span style="color:#E6DB74;">&#39;dist/bundle.js&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    format: </span><span style="color:#E6DB74;">&#39;iife&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&#39;MyLibrary&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#88846F;">// 指定暴露到全局的变量名</span></span>
<span class="line"><span style="color:#F8F8F2;">    globals: {</span></span>
<span class="line"><span style="color:#F8F8F2;">      jquery: </span><span style="color:#E6DB74;">&#39;$&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 外部依赖映射</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>输出结果类似：</p><div class="language-javascript codearea-link" id="qojzhdp6sj"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> MyLibrary </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">$</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 你的库代码</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">exports</span></span>
<span class="line"><span style="color:#F8F8F2;">})(jQuery)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="使用-iife-的注意事项" tabindex="-1">使用 IIFE 的注意事项 <a class="header-anchor" href="#使用-iife-的注意事项" aria-label="Permalink to &quot;使用 IIFE 的注意事项&quot;">​</a></h2><ol><li><p>命名冲突</p><ul><li>注意全局变量名的选择</li><li>避免与其他库冲突</li></ul></li><li><p>依赖管理</p><ul><li>确保外部依赖正确引入</li><li>正确设置依赖的全局变量名</li></ul></li><li><p>调试</p><ul><li>IIFE 可能使调试变得复杂</li><li>建议在开发环境使用 sourcemap</li></ul></li></ol>`,18)]))}const d=n(o,[["render",e]]);export{u as __pageData,d as default};
