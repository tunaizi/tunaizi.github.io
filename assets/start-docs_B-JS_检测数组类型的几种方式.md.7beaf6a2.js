import{_ as a,r as n,i as l,a as o}from"./chunks/framework.bb8f9838.js";const g=JSON.parse('{"title":"检测是不是数组的方式","description":"","frontmatter":{},"headers":[{"level":2,"title":"检测数组的 3 种方式","slug":"检测数组的-3-种方式","link":"#检测数组的-3-种方式","children":[]},{"level":2,"title":"差异","slug":"差异","link":"#差异","children":[]}],"relativePath":"start-docs/B-JS/检测数组类型的几种方式.md","filePath":"start-docs/B-JS/检测数组类型的几种方式.md"}'),t={name:"start-docs/B-JS/检测数组类型的几种方式.md"};function r(e,s,p,i,c,E){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="检测是不是数组的方式" tabindex="-1">检测是不是数组的方式 <a class="header-anchor" href="#检测是不是数组的方式" aria-label="Permalink to &quot;检测是不是数组的方式&quot;">​</a></h1><h2 id="检测数组的-3-种方式" tabindex="-1">检测数组的 3 种方式 <a class="header-anchor" href="#检测数组的-3-种方式" aria-label="Permalink to &quot;检测数组的 3 种方式&quot;">​</a></h2><ol><li><p><strong>Object.prototype.toString.call(arr) === &#39;[object Array]&#39;</strong></p></li><li><p><strong>[] instanceof Array -&gt; true</strong></p></li><li><p><strong>Array.isArray()</strong></p></li></ol><h2 id="差异" tabindex="-1">差异 <a class="header-anchor" href="#差异" aria-label="Permalink to &quot;差异&quot;">​</a></h2><ul><li><strong>instanceof</strong> 是检测原型链上是否有 <strong>Array</strong> 的 <strong>prototype</strong>。 <ul><li>只能用来判断对象类型，原始类型不可以。</li><li>所有对象类型 <strong>instanceof Object</strong> 都是 true</li></ul></li><li><strong>Object.prototype.toString.call()</strong> 常用于判断浏览器内置对象。</li><li><strong>Array.isArray()</strong> 优于 <strong>instanceof</strong><ul><li>是 es5 新增对象，当不存在时，可以用 Object 实现<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">Array.isArray) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.toString.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(obj) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;[Object Array]&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul>`,5)]))}const d=a(t,[["render",r]]);export{g as __pageData,d as default};
