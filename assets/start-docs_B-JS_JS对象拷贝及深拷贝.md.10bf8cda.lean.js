import { _ as _export_sfc, r as r3, i as it, v as ig } from "./chunks/framework.ccd34752.js";
const __pageData = JSON.parse('{"title":"Object","description":"","frontmatter":{},"headers":[{"level":2,"title":"浅拷贝","slug":"浅拷贝","link":"#浅拷贝","children":[]},{"level":2,"title":"深拷贝","slug":"深拷贝","link":"#深拷贝","children":[]}],"relativePath":"start-docs/B-JS/JS对象拷贝及深拷贝.md","filePath":"start-docs/B-JS/JS对象拷贝及深拷贝.md"}');
const _sfc_main = { name: "start-docs/B-JS/JS对象拷贝及深拷贝.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h1><ul><li>getOwnPropertyDescriptor 方法返回指定对象上一个自有属性对应的属性描述符</li><li>getOwnPropertyDescriptors 方法用来获取一个对象的所有自身属性的描述符</li><li>Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括 Symbol 值作为名称的属性）组成的数组。</li><li>Object.getOwnPropertySymbols() 方法返回一个给定对象自身的所有 Symbol 属性的数组。</li><li>Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。</li><li>Object.seal()方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要原来是可写的就可以改变。</li><li>Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。</li></ul><h2 id="浅拷贝" tabindex="-1">浅拷贝 <a class="header-anchor" href="#浅拷贝" aria-label="Permalink to &quot;浅拷贝&quot;">​</a></h2><ul><li>...obj,只能浅拷贝，当属性值为对象时，拷贝的是引用。<div class="language-js codearea-link" id="n98lpb8bdw8"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> };</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a };</span></span></code></pre><button class="link">将此代码在线运行</button></div></li><li>Object.assign() 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。如果是值是对象，拷贝的是引用。<div class="language-js codearea-link" id="g3btjtihe9"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> };</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">assign</span><span style="color:#F8F8F2;">({}, a);</span></span></code></pre><button class="link">将此代码在线运行</button></div></li><li>Object.create(Object.getPrototypeOf(obj),Object.getOwnPropertyDescriptors(obj),Object.getOwnPropertySmbols())</li></ul><h2 id="深拷贝" tabindex="-1">深拷贝 <a class="header-anchor" href="#深拷贝" aria-label="Permalink to &quot;深拷贝&quot;">​</a></h2><ul><li><p>JSON.parse(JSON.stringify(obj)) 不可以拷贝 undefined，function，RegExp,Date 等类型</p></li><li><p>递归拷贝</p><div class="language-js codearea-link" id="ht0mixesdon"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">//针对Date,function,Array等也是失效的。</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> _obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(obj[key] </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> type obj[key] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        _obj[key] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(obj[key])</span></span>\n<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        _obj[key] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj[key]</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> _obj</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="dzdnagr1ojm"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">//完整clone</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;object&quot;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> _obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">//当前为Date类型，typeof值其实是object</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Date</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		_obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">		_obj.</span><span style="color:#A6E22E;">setTime</span><span style="color:#F8F8F2;">(obj.</span><span style="color:#A6E22E;">getTime</span><span style="color:#F8F8F2;">());</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> _obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">//当前是数组类型，typeof值是object</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Array</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		_obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> obj.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">			_obj[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(obj[i]);</span></span>\n<span class="line"><span style="color:#F8F8F2;">		}</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> _obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">//当前是函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Function</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#A6E22E;">_obj</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">			</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> obj.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">		};</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> _obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">//为对象</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		_obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {};</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> attr </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">			</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj.</span><span style="color:#A6E22E;">hasOwnProperty</span><span style="color:#F8F8F2;">(attr)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">				_obj[attr] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(obj[attr]);</span></span>\n<span class="line"><span style="color:#F8F8F2;">			}</span></span>\n<span class="line"><span style="color:#F8F8F2;">		}</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> _obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;unable to copy obj as type isnot supported:&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> obj.constructor.name);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> copy;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">// Handle the 3 simple types, and null or undefined</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;object&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> obj) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> obj;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">// Handle Date</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Date</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		copy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">		copy.</span><span style="color:#A6E22E;">setTime</span><span style="color:#F8F8F2;">(obj.</span><span style="color:#A6E22E;">getTime</span><span style="color:#F8F8F2;">());</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> copy;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">// Handle Array</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Array</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		copy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, len </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj.length; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">			copy[i] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(obj[i]);</span></span>\n<span class="line"><span style="color:#F8F8F2;">		}</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> copy;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">// Handle Function</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Function</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#A6E22E;">copy</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">			</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> obj.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">		};</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> copy;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#88846F;">// Handle Object</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		copy </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {};</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> attr </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">			</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj.</span><span style="color:#A6E22E;">hasOwnProperty</span><span style="color:#F8F8F2;">(attr)) copy[attr] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">deepClone</span><span style="color:#F8F8F2;">(obj[attr]);</span></span>\n<span class="line"><span style="color:#F8F8F2;">		}</span></span>\n<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> copy;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;Unable to copy obj as type isn&#39;t supported &quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> obj.constructor.name);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul>', 6)
  ]));
}
const JS________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  JS________ as default
};
