import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"Vite 使用","description":"","frontmatter":{},"headers":[{"level":2,"title":"Vite 是什么","slug":"vite-是什么","link":"#vite-是什么","children":[]},{"level":2,"title":"为什么选择 Vite","slug":"为什么选择-vite","link":"#为什么选择-vite","children":[]},{"level":2,"title":"常用功能","slug":"常用功能","link":"#常用功能","children":[{"level":3,"title":"1. 静态资源处理","slug":"_1-静态资源处理","link":"#_1-静态资源处理","children":[]}]},{"level":2,"title":"性能优化建议","slug":"性能优化建议","link":"#性能优化建议","children":[]},{"level":2,"title":"什么是 WebAssembly (WASM) 简介","slug":"什么是-webassembly-wasm-简介","link":"#什么是-webassembly-wasm-简介","children":[]},{"level":2,"title":"核心特性","slug":"核心特性","link":"#核心特性","children":[]},{"level":2,"title":"在 Vite 中使用 WASM","slug":"在-vite-中使用-wasm","link":"#在-vite-中使用-wasm","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"优势","slug":"优势","link":"#优势","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"relativePath":"start-docs/G-打包工具/vite.md","filePath":"start-docs/G-打包工具/vite.md"}');
const _sfc_main = { name: "start-docs/G-打包工具/vite.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="vite-使用" tabindex="-1">Vite 使用 <a class="header-anchor" href="#vite-使用" aria-label="Permalink to &quot;Vite 使用&quot;">​</a></h1><h2 id="vite-是什么" tabindex="-1">Vite 是什么 <a class="header-anchor" href="#vite-是什么" aria-label="Permalink to &quot;Vite 是什么&quot;">​</a></h2><ul><li>基于原生 ES 模块提供开发服务器</li><li>使用 Rollup 打包生产环境代码</li><li>采用 esbuild 进行依赖预构建</li><li>开发环境下的极速热更新</li><li>对 TypeScript、JSX、CSS 等提供开箱即用的支持</li></ul><h2 id="为什么选择-vite" tabindex="-1">为什么选择 Vite <a class="header-anchor" href="#为什么选择-vite" aria-label="Permalink to &quot;为什么选择 Vite&quot;">​</a></h2><ol><li><strong>更快的冷启动</strong>：利用浏览器原生 ES 模块，无需打包</li><li><strong>即时的热模块更新（HMR）</strong>：无论应用大小，都能保持快速更新</li><li><strong>真正的按需加载</strong>：开发环境下实现按需编译</li><li><strong>丰富的功能</strong>：对 TypeScript、JSX、CSS 等提供开箱即用的支持</li><li><strong>通用的插件接口</strong>：支持 Rollup 插件体系</li></ol><h2 id="常用功能" tabindex="-1">常用功能 <a class="header-anchor" href="#常用功能" aria-label="Permalink to &quot;常用功能&quot;">​</a></h2><h3 id="_1-静态资源处理" tabindex="-1">1. 静态资源处理 <a class="header-anchor" href="#_1-静态资源处理" aria-label="Permalink to &quot;1. 静态资源处理&quot;">​</a></h3><div class="language-js codearea-link" id="o868vylu8ig"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> logo </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./logo.png?raw&#39;</span></span>\n<span class="line"><span style="color:#88846F;">//直接导入图片的内容此处是文件的base64</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> logo </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./logo.png?url&#39;</span></span>\n<span class="line"><span style="color:#88846F;">// 导入图片的相对项目的目录地址</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> logo </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./logo.png&#39;</span></span>\n<span class="line"><span style="color:#88846F;">// 导入图片的相对静态资源地址</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">//vite集成了js多线程的资源处理 所以可以导入项目目录下的worker 文件</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> Worker </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./worker.js?worker&#39;</span></span>\n<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Worker</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">onmessage</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(event.data)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">//导入json</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./data.json&#39;</span></span>\n<span class="line"><span style="color:#88846F;">//导入json中命名空间</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { version } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./data.json&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(version)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 导入wasm</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> wasm </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./test.wasm&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(wasm)</span></span>\n<span class="line"><span style="color:#A6E22E;">wasm</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(({ </span><span style="color:#FD971F;font-style:italic;">instance</span><span style="color:#F8F8F2;"> }) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(instance.exports.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">))</span></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="性能优化建议" tabindex="-1">性能优化建议 <a class="header-anchor" href="#性能优化建议" aria-label="Permalink to &quot;性能优化建议&quot;">​</a></h2><ol><li><strong>代码分割</strong></li></ol><div class="language-javascript codearea-link" id="8tzt3sbtzss"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">defineConfig</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">  build: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    rollupOptions: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      output: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        manualChunks: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          vendor: [</span><span style="color:#E6DB74;">&#39;vue&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;vue-router&#39;</span><span style="color:#F8F8F2;">],</span></span>\n<span class="line"><span style="color:#F8F8F2;">          utils: [</span><span style="color:#E6DB74;">&#39;./src/utils&#39;</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="2"><li><strong>资源压缩</strong></li></ol><div class="language-javascript codearea-link" id="90l70wi8r99"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">defineConfig</span><span style="color:#F8F8F2;">({</span></span>\n<span class="line"><span style="color:#F8F8F2;">  build: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    minify: </span><span style="color:#E6DB74;">&#39;terser&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    terserOptions: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      compress: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        drop_console: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">        drop_debugger: </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="什么是-webassembly-wasm-简介" tabindex="-1">什么是 WebAssembly (WASM) 简介 <a class="header-anchor" href="#什么是-webassembly-wasm-简介" aria-label="Permalink to &quot;什么是 WebAssembly (WASM) 简介&quot;">​</a></h2><p>WebAssembly 是一种可以在现代网页浏览器中运行的低级编程语言，具有以下主要特点：</p><h2 id="核心特性" tabindex="-1">核心特性 <a class="header-anchor" href="#核心特性" aria-label="Permalink to &quot;核心特性&quot;">​</a></h2><ol><li><p><strong>高性能执行</strong></p><ul><li>接近原生代码的执行速度</li><li>二进制格式，加载更快</li><li>适合计算密集型任务</li></ul></li><li><p><strong>多语言支持</strong></p><ul><li>C/C++</li><li>Rust</li><li>Go</li><li>AssemblyScript (类 TypeScript 语法)</li></ul></li></ol><h2 id="在-vite-中使用-wasm" tabindex="-1">在 Vite 中使用 WASM <a class="header-anchor" href="#在-vite-中使用-wasm" aria-label="Permalink to &quot;在 Vite 中使用 WASM&quot;">​</a></h2><p>让我们扩展您文件中的 WASM 示例：</p><div class="language-javascript codearea-link" id="wyz7yf71r"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 基础导入方式</span></span>\n<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> wasm </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./example.wasm&#39;</span></span>\n<span class="line"><span style="color:#88846F;">// 更完整的使用示例</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> wasmModule </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">instantiateStreaming</span><span style="color:#F8F8F2;">(</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;example.wasm&#39;</span><span style="color:#F8F8F2;">),</span></span>\n<span class="line"><span style="color:#F8F8F2;">  {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    env: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      memory: </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">Memory</span><span style="color:#F8F8F2;">({ initial: </span><span style="color:#AE81FF;">256</span><span style="color:#F8F8F2;"> }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 可以在这里定义导入函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">consoleLog</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">arg</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(arg)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#88846F;">// 调用 WASM 函数</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> wasmModule.instance.exports.</span><span style="color:#A6E22E;">someFunction</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ol><li><p><strong>计算密集型任务</strong></p><ul><li>图像/视频处理</li><li>3D 渲染</li><li>物理引擎</li><li>加密算法</li></ul></li><li><p><strong>性能关键应用</strong></p><ul><li>游戏引擎</li><li>CAD 软件</li><li>实时数据处理</li></ul></li></ol><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><ol><li><strong>性能</strong>：比 JavaScript 快 10-800%</li><li><strong>安全</strong>：运行在沙箱环境中</li><li><strong>兼容性</strong>：主流浏览器都支持</li><li><strong>渐进式采用</strong>：可以与现有 JavaScript 代码共存</li></ol><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>需要正确配置服务器 MIME 类型：<code>application/wasm</code></li><li>考虑添加降级方案以支持旧浏览器</li><li>开发时注意内存管理</li><li>权衡使用成本和收益</li></ol><p>我来介绍在普通 JavaScript 环境中如何使用 WebAssembly：</p><div class="language-javascript codearea-link" id="ji29nfqmv6"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 方式一：使用 instantiateStreaming (推荐)</span></span>\n<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadWasm</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/path/to/example.wasm&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">instantiateStreaming</span><span style="color:#F8F8F2;">(response, {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      env: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 导入的 JavaScript 函数，可以在 WASM 中调用</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">consoleLog</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(value),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 提供内存</span></span>\n<span class="line"><span style="color:#F8F8F2;">        memory: </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">Memory</span><span style="color:#F8F8F2;">({ initial: </span><span style="color:#AE81FF;">256</span><span style="color:#F8F8F2;"> }),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 其他导入函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">abort</span><span style="color:#F8F8F2;">: () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Abort called from WASM&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 使用 WASM 导出的函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { add, subtract } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result.instance.exports</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 8</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">subtract</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 6</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;WASM 加载失败:&#39;</span><span style="color:#F8F8F2;">, err)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 方式二：传统方式（兼容性更好）</span></span>\n<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loadWasmLegacy</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/path/to/example.wasm&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> bytes </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> response.</span><span style="color:#A6E22E;">arrayBuffer</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">instantiate</span><span style="color:#F8F8F2;">(bytes, {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      env: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">consoleLog</span><span style="color:#F8F8F2;">: (</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(value),</span></span>\n<span class="line"><span style="color:#F8F8F2;">        memory: </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">Memory</span><span style="color:#F8F8F2;">({ initial: </span><span style="color:#AE81FF;">256</span><span style="color:#F8F8F2;"> })</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 使用导出的函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { multiply } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result.instance.exports</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">multiply</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 42</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;WASM 加载失败:&#39;</span><span style="color:#F8F8F2;">, err)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 调用加载函数</span></span>\n<span class="line"><span style="color:#A6E22E;">loadWasm</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#88846F;">// 或</span></span>\n<span class="line"><span style="color:#A6E22E;">loadWasmLegacy</span><span style="color:#F8F8F2;">()</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>一个完整的实际例子（包含 C++ 源码）：</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// math.cpp</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">extern</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;C&quot;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fibonacci</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">int</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> n;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fibonacci</span><span style="color:#F8F8F2;">(n</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fibonacci</span><span style="color:#F8F8F2;">(n</span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div><p>编译成 WASM 后，在 JavaScript 中使用：</p><div class="language-javascript codearea-link" id="rpvpcylsd4l"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// math.js</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> wasmModule </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 存储加载后的 WASM 实例</span></span>\n<span class="line"><span style="color:#F8F8F2;">  instance: </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 初始化函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">init</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> response </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fetch</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;/path/to/math.wasm&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> WebAssembly.</span><span style="color:#A6E22E;">instantiateStreaming</span><span style="color:#F8F8F2;">(response)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result.instance</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;WASM 加载失败:&#39;</span><span style="color:#F8F8F2;">, err)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 包装 WASM 函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance) </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;WASM 未初始化&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance.exports.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(a, b)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">fibonacci</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance) </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;WASM 未初始化&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.instance.exports.</span><span style="color:#A6E22E;">fibonacci</span><span style="color:#F8F8F2;">(n)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 使用示例</span></span>\n<span class="line"><span style="color:#F92672;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">await</span><span style="color:#F8F8F2;"> wasmModule.</span><span style="color:#A6E22E;">init</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;加法结果:&#39;</span><span style="color:#F8F8F2;">, wasmModule.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 8</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;斐波那契数:&#39;</span><span style="color:#F8F8F2;">, wasmModule.</span><span style="color:#A6E22E;">fibonacci</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 55</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">()</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="warning custom-block"><p class="custom-block-title">注意事项：</p><ol><li>WASM 文件需要通过 HTTP(S) 服务器提供，不能通过本地文件系统直接加载</li><li>服务器需要正确设置 MIME 类型：<code>application/wasm</code></li><li>对于较大的 WASM 模块，建议添加加载状态提示</li><li>考虑添加错误处理和降级方案</li><li>在生产环境中应该处理内存管理相关的问题</li></ol></div>', 33)
  ]));
}
const vite = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  vite as default
};
