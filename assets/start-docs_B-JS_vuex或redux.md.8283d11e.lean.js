import{_ as a,r as e,i as l,a as n}from"./chunks/framework.bb8f9838.js";const d=JSON.parse('{"title":"Vuex / Redux","description":"","frontmatter":{},"headers":[{"level":2,"title":"vuex 的 mutation 和 redux 的 reducer 为什么不能做异步操作","slug":"vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作","link":"#vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作","children":[]},{"level":2,"title":"手写 redux 的及 compose 函数","slug":"手写-redux-的及-compose-函数","link":"#手写-redux-的及-compose-函数","children":[]},{"level":2,"title":"vuex 与 redux 的区别","slug":"vuex-与-redux-的区别","link":"#vuex-与-redux-的区别","children":[{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"relativePath":"start-docs/B-JS/vuex或redux.md","filePath":"start-docs/B-JS/vuex或redux.md"}'),t={name:"start-docs/B-JS/vuex或redux.md"};function o(p,s,r,c,u,i){return e(),l("div",null,s[0]||(s[0]=[n(`<h1 id="vuex-redux" tabindex="-1">Vuex / Redux <a class="header-anchor" href="#vuex-redux" aria-label="Permalink to &quot;Vuex / Redux&quot;">​</a></h1><ul><li>状态管理的思路： 把组件之间需要共享的状态抽离出来，遵循一定的约定，统一管理，让状态的变化可以预测。 <ul><li>思路 1： 全局对象。容易造成数据更改导致相关依赖变化错乱，不可预测</li><li>思路 2： action。通过 dispatch 派发行为 action</li></ul></li><li>redux 实现思路： 发布订阅模式 在 dispatch 中调用 reduce 方法 <ul><li>redux 的异步更新实现：发送两个 action,在请求前和请求后都发送 action 来更新。</li></ul></li><li>Vuex,更改对象，利用 vue 的数据响应式原理来更新 <ul><li>mutation 用来做同步事务</li><li>action 用来做异步事务</li></ul></li><li>redux: view -&gt; dispatch -&gt; actions -&gt; reducer -&gt; state 变化 -&gt; view 变化</li><li>vuex: view -&gt; commit -&gt; mutations -&gt; state 变化 -&gt; view 变化 view -&gt; dispatch -&gt; actions -&gt; mutations -&gt; state 变化 -&gt; view 变化</li></ul><h2 id="vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作" tabindex="-1">vuex 的 mutation 和 redux 的 reducer 为什么不能做异步操作 <a class="header-anchor" href="#vuex-的-mutation-和-redux-的-reducer-为什么不能做异步操作" aria-label="Permalink to &quot;vuex 的 mutation 和 redux 的 reducer 为什么不能做异步操作&quot;">​</a></h2><ul><li>因为更改 state 的函数必须是纯函数，纯函数既是统一输入就会统一输出，没有任何副作用；如果是异步则会引入额外的副作用，导致更改后的 state 不可预测；</li></ul><h2 id="手写-redux-的及-compose-函数" tabindex="-1">手写 redux 的及 compose 函数 <a class="header-anchor" href="#手写-redux-的及-compose-函数" aria-label="Permalink to &quot;手写 redux 的及 compose 函数&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compose</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">funcs</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (funcs.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> arg;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (funcs.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> funcs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> funcs.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args)),</span></span>
<span class="line"><span style="color:#E1E4E8;">	);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="vuex-与-redux-的区别" tabindex="-1">vuex 与 redux 的区别 <a class="header-anchor" href="#vuex-与-redux-的区别" aria-label="Permalink to &quot;vuex 与 redux 的区别&quot;">​</a></h2><ul><li>更新页面的机制不同 <ul><li>vue 里，vuex 中 store 的数据也是响应式的，通过 vue 的响应式机制来更新页面</li><li>redux 里，通过发布订阅模式，在数据更新后，循环执行回调函数</li></ul></li></ul><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><ul><li>[<a href="https://zhuanlan.zhihu.com/p/53599723" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/53599723</a>] Vuex、Flux、Redux、Redux-saga、Dva、MobX</li></ul>`,10)]))}const x=a(t,[["render",o]]);export{d as __pageData,x as default};
