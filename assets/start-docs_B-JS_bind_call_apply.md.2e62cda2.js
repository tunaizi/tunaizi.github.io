import{_ as n,r as a,i as l,a as p}from"./chunks/framework.1cf9c55e.js";const E=JSON.parse('{"title":"bind & call & apply","description":"","frontmatter":{},"headers":[{"level":2,"title":"bind & call & apply","slug":"bind-call-apply-1","link":"#bind-call-apply-1","children":[]},{"level":2,"title":"call 实现","slug":"call-实现","link":"#call-实现","children":[]},{"level":2,"title":"apply 实现","slug":"apply-实现","link":"#apply-实现","children":[]},{"level":2,"title":"bind 实现","slug":"bind-实现","link":"#bind-实现","children":[{"level":3,"title":"箭头函数中任然可以使用 call()、apply()、bind()方法，但是 this 值不会被影响。","slug":"箭头函数中任然可以使用-call-、apply-、bind-方法-但是-this-值不会被影响。","link":"#箭头函数中任然可以使用-call-、apply-、bind-方法-但是-this-值不会被影响。","children":[]}]}],"relativePath":"start-docs/B-JS/bind&call&apply.md","filePath":"start-docs/B-JS/bind&call&apply.md"}'),o={name:"start-docs/B-JS/bind&call&apply.md"};function F(e,s,t,c,r,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="bind-call-apply" tabindex="-1">bind &amp; call &amp; apply <a class="header-anchor" href="#bind-call-apply" aria-label="Permalink to &quot;bind &amp; call &amp; apply&quot;">​</a></h1><h2 id="bind-call-apply-1" tabindex="-1">bind &amp; call &amp; apply <a class="header-anchor" href="#bind-call-apply-1" aria-label="Permalink to &quot;bind &amp; call &amp; apply&quot;">​</a></h2><ul><li>call 和 apply,是为了动态改变 this 而出现。当一个 object 没有某个方法，但是其他对象有，就可以借助 call 和 apply 来使用其他对象的方法。</li></ul><div class="language-js codearea-link" id="zu6t5sfjzb"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> domNodes </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.slice.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  document.</span><span style="color:#A6E22E;">getElementByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;*&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="p2dze99o9t"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Cat</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">showName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name, args)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> cat </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Cat</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;aa&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">cat.</span><span style="color:#A6E22E;">showName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// aa 1</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> dog </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;bb&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">cat.showName.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(dog, </span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#88846F;">// bb 1</span></span>
<span class="line"><span style="color:#F8F8F2;">cat.showName.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(dog, [</span><span style="color:#E6DB74;">&#39;2&#39;</span><span style="color:#F8F8F2;">]) </span><span style="color:#88846F;">// bb 2</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>call 与 apply,接受参数不同。<strong>call 将多个参数分开接收</strong>，apply 将参数合并为数组接收。</li><li>bind 方法也可以改变 this 指针。 与 call 和 apply 的区别在于不会立即执行。bind 方法会预先将参数传递给方法。bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</li></ul><h2 id="call-实现" tabindex="-1">call 实现 <a class="header-anchor" href="#call-实现" aria-label="Permalink to &quot;call 实现&quot;">​</a></h2><div class="language-js codearea-link" id="gv3x2odzwov"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Function</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">myCall</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">context</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">TypeError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;not function&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//获取当前上下文</span></span>
<span class="line"><span style="color:#F8F8F2;">  context </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> context </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> window</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//将指针赋值给当前上下文中的函数</span></span>
<span class="line"><span style="color:#F8F8F2;">  context.fn </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//获取参数，过滤掉第一个参数</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arg </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//执行函数</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> context.</span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">arg)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//删除绑定</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">delete</span><span style="color:#F8F8F2;"> context.fn</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//返回结果</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">showName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">).showName.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;fooooo&#39;</span><span style="color:#F8F8F2;"> }, </span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">).showName.</span><span style="color:#A6E22E;">myCall</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;fooooo&#39;</span><span style="color:#F8F8F2;"> }, </span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="apply-实现" tabindex="-1">apply 实现 <a class="header-anchor" href="#apply-实现" aria-label="Permalink to &quot;apply 实现&quot;">​</a></h2><div class="language-js codearea-link" id="ottf7jws3pb"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Function</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">myApply</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">context</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">TypeError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;is not function&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  context </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> context </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> window</span></span>
<span class="line"><span style="color:#F8F8F2;">  context.fn </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    context.</span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    context.</span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">delete</span><span style="color:#F8F8F2;"> context.fn</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> result</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">showName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">).showName.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;fooooo&#39;</span><span style="color:#F8F8F2;"> }, [</span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">])</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">).showName.</span><span style="color:#A6E22E;">myApply</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;fooooo&#39;</span><span style="color:#F8F8F2;"> }, [</span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">])</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="bind-实现" tabindex="-1">bind 实现 <a class="header-anchor" href="#bind-实现" aria-label="Permalink to &quot;bind 实现&quot;">​</a></h2><div class="language-js codearea-link" id="hvvdb4jq6q7"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">//使用 apply 实现 bind</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">Function</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">myBind</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">context</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">TypeError</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;error&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> self </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> self.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(context, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Foo</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;foo&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">showName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> fn </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">).showName.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;foooooo&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> fn1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Foo</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;foo&#39;</span><span style="color:#F8F8F2;">).showName.</span><span style="color:#A6E22E;">myBind</span><span style="color:#F8F8F2;">({ name: </span><span style="color:#E6DB74;">&#39;foooooo&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#A6E22E;">fn1</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;aaa&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;bbb&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="箭头函数中任然可以使用-call-、apply-、bind-方法-但是-this-值不会被影响。" tabindex="-1">箭头函数中任然可以使用 call()、apply()、bind()方法，但是 this 值不会被影响。 <a class="header-anchor" href="#箭头函数中任然可以使用-call-、apply-、bind-方法-但是-this-值不会被影响。" aria-label="Permalink to &quot;箭头函数中任然可以使用 call()、apply()、bind()方法，但是 this 值不会被影响。&quot;">​</a></h3>`,13)]))}const d=n(o,[["render",F]]);export{E as __pageData,d as default};
