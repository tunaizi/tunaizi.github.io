import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"http(了解)","description":"","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"主要特点","slug":"主要特点","link":"#主要特点","children":[]},{"level":2,"title":"HTTP之URL","slug":"http之url","link":"#http之url","children":[]},{"level":2,"title":"HTTP之请求消息Request","slug":"http之请求消息request","link":"#http之请求消息request","children":[]},{"level":2,"title":"HTTP之响应消息Response","slug":"http之响应消息response","link":"#http之响应消息response","children":[]},{"level":2,"title":"HTTP之状态码","slug":"http之状态码","link":"#http之状态码","children":[]},{"level":2,"title":"HTTP请求方法","slug":"http请求方法","link":"#http请求方法","children":[]},{"level":2,"title":"HTTP工作原理","slug":"http工作原理","link":"#http工作原理","children":[]},{"level":2,"title":"关于TCP连接的发起和断开","slug":"关于tcp连接的发起和断开","link":"#关于tcp连接的发起和断开","children":[{"level":3,"title":"发起请求","slug":"发起请求","link":"#发起请求","children":[]},{"level":3,"title":"请求断开","slug":"请求断开","link":"#请求断开","children":[]}]}],"relativePath":"start-docs/E-md/http.md","filePath":"start-docs/E-md/http.md"}');
const _sfc_main = { name: "start-docs/E-md/http.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="http-了解" tabindex="-1">http(了解) <a class="header-anchor" href="#http-了解" aria-label="Permalink to &quot;http(了解)&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><ul><li><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,适用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p></li><li><p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p></li><li><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p></li></ul><h2 id="主要特点" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h2><ul><li><p>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p></li><li><p>灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p></li><li><p>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p></li><li><p>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p></li><li><p>支持B/S及C/S模式。</p></li></ul><h2 id="http之url" tabindex="-1">HTTP之URL <a class="header-anchor" href="#http之url" aria-label="Permalink to &quot;HTTP之URL&quot;">​</a></h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><p><a href="http://www.abc.com:8080/news/index.php?id=1&amp;page=1#name" target="_blank" rel="noreferrer">http://www.abc.com:8080/news/index.php?id=1&amp;page=1#name</a></p><p><strong>从上面的URL可以看出，一个完整的URL包括以下几部分：</strong></p><ul><li><p>协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在&quot;HTTP&quot;后面的“//”为分隔符</p></li><li><p>域名部分：该URL的域名部分为“www.abc.com”。一个URL中，也可以使用IP地址作为域名使用</p></li><li><p>端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p></li><li><p>虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</p></li><li><p>文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.php”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p></li><li><p>锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p></li><li><p>参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“id=1&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p></li></ul><h2 id="http之请求消息request" tabindex="-1">HTTP之请求消息Request <a class="header-anchor" href="#http之请求消息request" aria-label="Permalink to &quot;HTTP之请求消息Request&quot;">​</a></h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：</p><ul><li>请求行（request line）用来说明请求类型等</li><li>请求头部（header）用来说明服务器要使用的附加信息</li><li>空行</li><li>请求数据(请求主体 body) get=&gt; (queryString) post=&gt;(Form Data)</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">Get请求例子，使用Charles抓取的request：</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    GET /562f25980001b1b106000338.jpg HTTP/1.1</span></span>\n<span class="line"><span style="color:#F8F8F2;">    Host    img.mukewang.com</span></span>\n<span class="line"><span style="color:#F8F8F2;">    User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</span></span>\n<span class="line"><span style="color:#F8F8F2;">    Accept    image/webp,image/*,*/*;q=0.8</span></span>\n<span class="line"><span style="color:#F8F8F2;">    Referer    http://www.imooc.com/</span></span>\n<span class="line"><span style="color:#F8F8F2;">    Accept-Encoding    gzip, deflate, sdch</span></span>\n<span class="line"><span style="color:#F8F8F2;">    Accept-Language    zh-CN,zh;q=0.8</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    keyword=%E8%8B%B9%E6%9E%9C&amp;enc=utf-8&amp;suggest=1.his.0.0&amp;wq=&amp;pvid=ba161ff29f444a6894bc39ed93aa93c5</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</span></span>\n<span class="line"><span style="color:#F8F8F2;">    GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">    从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    第三部分：空行，请求头部后面的空行是必须的</span></span>\n<span class="line"><span style="color:#F8F8F2;">    即使第四部分的请求数据为空，也必须有空行。</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    第四部分：请求数据也叫主体，可以添加任意的其他数据。</span></span></code></pre></div><h2 id="http之响应消息response" tabindex="-1">HTTP之响应消息Response <a class="header-anchor" href="#http之响应消息response" aria-label="Permalink to &quot;HTTP之响应消息Response&quot;">​</a></h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</p><p>HTTP响应也由四个部分组成，分别是：</p><ul><li><p>状态行</p></li><li><p>消息报头</p></li><li><p>空行</p></li><li><p>响应正文 (服务端返回的响应数据 responseText)</p></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">HTTP/1.1 200 OK</span></span>\n<span class="line"><span style="color:#F8F8F2;">Date: Fri, 22 May 2009 06:07:21 GMT</span></span>\n<span class="line"><span style="color:#F8F8F2;">Content-Type: text/html; charset=UTF-8</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">&lt;html&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    &lt;head&gt;&lt;/head&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    &lt;body&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">            &lt;!--body goes here--&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    &lt;/body&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">&lt;/html&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</span></span>\n<span class="line"><span style="color:#F8F8F2;">第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">第二部分：消息报头，用来说明客户端要使用的一些附加信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">第二行和第三行为消息报头，</span></span>\n<span class="line"><span style="color:#F8F8F2;">Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">第三部分：空行，消息报头后面的空行是必须的</span></span>\n<span class="line"><span style="color:#F8F8F2;">第四部分：响应正文，服务器返回给客户端的文本信息。</span></span>\n<span class="line"><span style="color:#F8F8F2;">空行后面的html部分为响应正文。</span></span></code></pre></div><h2 id="http之状态码" tabindex="-1">HTTP之状态码 <a class="header-anchor" href="#http之状态码" aria-label="Permalink to &quot;HTTP之状态码&quot;">​</a></h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">1xx：指示信息--表示请求已接收，继续处理</span></span>\n<span class="line"><span style="color:#F8F8F2;">2xx：成功--表示请求已被成功接收、理解、接受</span></span>\n<span class="line"><span style="color:#F8F8F2;">3xx：重定向--要完成请求必须进行更进一步的操作</span></span>\n<span class="line"><span style="color:#F8F8F2;">4xx：客户端错误--请求有语法错误或请求无法实现</span></span>\n<span class="line"><span style="color:#F8F8F2;">5xx：服务器端错误--服务器未能实现合法的请求</span></span></code></pre></div><p><strong>常见状态码：</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">200 OK                        //客户端请求成功</span></span>\n<span class="line"><span style="color:#F8F8F2;">400 Bad Request               //客户端请求有语法错误，不能被服务器所理解</span></span>\n<span class="line"><span style="color:#F8F8F2;">401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 </span></span>\n<span class="line"><span style="color:#F8F8F2;">403 Forbidden                 //服务器收到请求，但是拒绝提供服务</span></span>\n<span class="line"><span style="color:#F8F8F2;">404 Not Found                 //请求资源不存在，输入了错误的URL</span></span>\n<span class="line"><span style="color:#F8F8F2;">500 Internal Server Error     //服务器发生不可预期的错误</span></span>\n<span class="line"><span style="color:#F8F8F2;">503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</span></span></code></pre></div><h2 id="http请求方法" tabindex="-1">HTTP请求方法 <a class="header-anchor" href="#http请求方法" aria-label="Permalink to &quot;HTTP请求方法&quot;">​</a></h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p><p>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。</p><p>HTTP1.1新增了五种请求方法：OPTIONS, PUT(修改 类似post), DELETE(删除 类似 get), TRACE 和 CONNECT 方法。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">GET         请求指定的页面信息，并返回实体主体。</span></span>\n<span class="line"><span style="color:#F8F8F2;">HEAD        类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</span></span>\n<span class="line"><span style="color:#F8F8F2;">POST        向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</span></span>\n<span class="line"><span style="color:#F8F8F2;">PUT         从客户端向服务器传送的数据取代指定的文档的内容。</span></span>\n<span class="line"><span style="color:#F8F8F2;">DELETE      请求服务器删除指定的页面。</span></span>\n<span class="line"><span style="color:#F8F8F2;">CONNECT     HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</span></span>\n<span class="line"><span style="color:#F8F8F2;">OPTIONS     允许客户端查看服务器的性能。</span></span>\n<span class="line"><span style="color:#F8F8F2;">TRACE       回显服务器收到的请求，主要用于测试或诊断。</span></span></code></pre></div><h2 id="http工作原理" tabindex="-1">HTTP工作原理 <a class="header-anchor" href="#http工作原理" aria-label="Permalink to &quot;HTTP工作原理&quot;">​</a></h2><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p><strong>以下是 HTTP 请求/响应的步骤：</strong></p><p>1 客户端连接到Web服务器</p><blockquote><p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如访问 <a href="http://www.abc.com" target="_blank" rel="noreferrer">http://www.abc.com</a>。</p></blockquote><p>2 发送HTTP请求</p><blockquote><p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p></blockquote><p>3 服务器接受请求并返回HTTP响应</p><blockquote><p>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p></blockquote><p>4 释放连接TCP连接</p><blockquote><p>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p></blockquote><p>5 客户端浏览器解析HTML内容</p><blockquote><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p></blockquote><h2 id="关于tcp连接的发起和断开" tabindex="-1">关于TCP连接的发起和断开 <a class="header-anchor" href="#关于tcp连接的发起和断开" aria-label="Permalink to &quot;关于TCP连接的发起和断开&quot;">​</a></h2><p>通过http协议,发送请求和响应请求的过程 包括发起和断开求两个部分(三次握手 四次挥手)</p><h3 id="发起请求" tabindex="-1">发起请求 <a class="header-anchor" href="#发起请求" aria-label="Permalink to &quot;发起请求&quot;">​</a></h3><p>请求的发起都是客户端向服务器发送请求,发送请求之前,必须先确认一些事情</p><pre><code>客户端必须确定: \n    1. 自己能正常发送消息\n    2. 自己能正常接收消息\n    3. 服务器能正常发送消息  \n    4. 服务器能正常接收消息  \n\n服务器必须确定: \n    1. 自己能正常发送消息\n    2. 自己能正常接收消息\n    3. 客户端能正常发送消息  \n    4. 客户端能正常接收消息 \n\n客户端和服务器都要确定自己和对方是否能正常的接收和发送消息\n</code></pre><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">客户端和服务器建立连接,通过 TCP/IP 协议 , 来执行三次握手机制 </span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    第一次:客户端向服务器发送一个请求</span></span>\n<span class="line"><span style="color:#F8F8F2;">        客户端: 知道自己可以发送消息</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">        服务器: 知道客户端可以发送消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">                知道自己可以接收消息</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    第二次:服务器向客户端发送一个消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">        服务器: 知道自己可以发送消息            </span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">        客户端: 知道自己能接收消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">                知道服务器可以接收消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">                知道服务器可以发送消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    第三次:客户端向服务器发送请求</span></span>\n<span class="line"><span style="color:#F8F8F2;">        服务器: 知道客户端可以接收消息</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    确认双方都可以正常的发送接收消息之后,可以建立连接</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">    每次请求之前,3次握手都需要执行</span></span></code></pre></div><h3 id="请求断开" tabindex="-1">请求断开 <a class="header-anchor" href="#请求断开" aria-label="Permalink to &quot;请求断开&quot;">​</a></h3><pre><code>需要确认客户端和服务器,都关闭,都不再接收和发送消息\n</code></pre><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">断开连接的4次挥手,也是通过 TCP/IP 协议 , 来执行四次挥手机制 </span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   第一次挥手:</span></span>\n<span class="line"><span style="color:#F8F8F2;">        客户端向服务器发送一个请求</span></span>\n<span class="line"><span style="color:#F8F8F2;">            告诉服务器,客户端要断开和你的连接了</span></span>\n<span class="line"><span style="color:#F8F8F2;">    第二次挥手:</span></span>\n<span class="line"><span style="color:#F8F8F2;">        服务器向客户端发送一个消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">            服务器知道客户端要断开连接了,我也要关闭我自己了</span></span>\n<span class="line"><span style="color:#F8F8F2;">    第三次挥手</span></span>\n<span class="line"><span style="color:#F8F8F2;">        服务器向客户端发送一个消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">            服务器已经关闭了,不会再发送消息了,但是可以接收消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">    第四次挥手</span></span>\n<span class="line"><span style="color:#F8F8F2;">        客户端向服务器发送一个消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">            客户端知道服务器关闭了,知道服务器不发送消息了</span></span>\n<span class="line"><span style="color:#F8F8F2;">            客户端告诉服务器,客户端也要关闭了,不再接收消息了,但是可能随时发送消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    服务器可以随时接收消息</span></span>\n<span class="line"><span style="color:#F8F8F2;">    客户端可能随时发送消息</span></span></code></pre></div>', 52)
  ]));
}
const http = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  http as default
};
