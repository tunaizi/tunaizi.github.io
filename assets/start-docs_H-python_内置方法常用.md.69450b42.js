import { _ as _export_sfc, r as r3, i as it, w as ig } from "./chunks/framework.4a4ad33e.js";
const __pageData = JSON.parse('{"title":"Python 常用内置方法","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本内置方法","slug":"基本内置方法","link":"#基本内置方法","children":[]},{"level":2,"title":"转换内置方法","slug":"转换内置方法","link":"#转换内置方法","children":[]},{"level":2,"title":"数学内置方法","slug":"数学内置方法","link":"#数学内置方法","children":[]},{"level":2,"title":"序列操作内置方法","slug":"序列操作内置方法","link":"#序列操作内置方法","children":[]},{"level":2,"title":"其他内置方法","slug":"其他内置方法","link":"#其他内置方法","children":[]}],"relativePath":"start-docs/H-python/内置方法常用.md","filePath":"start-docs/H-python/内置方法常用.md"}');
const _sfc_main = { name: "start-docs/H-python/内置方法常用.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="python-常用内置方法" tabindex="-1">Python 常用内置方法 <a class="header-anchor" href="#python-常用内置方法" aria-label="Permalink to &quot;Python 常用内置方法&quot;">​</a></h1><p>Python 提供了许多内置方法，这些方法可以直接在任何对象上使用，无需导入额外的模块。以下是一些常用的内置方法：</p><h2 id="基本内置方法" tabindex="-1">基本内置方法 <a class="header-anchor" href="#基本内置方法" aria-label="Permalink to &quot;基本内置方法&quot;">​</a></h2><ul><li><p><code>print(object, /, *objects, sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)</code></p><ul><li>打印对象到控制台或其他文件对象。</li></ul></li><li><p><code>len(s)</code></p><ul><li>返回对象（如字符串、列表、元组等）的长度。</li></ul></li><li><p><code>type(object)</code></p><ul><li>返回对象的类型。</li></ul></li><li><p><code>help(object)</code></p><ul><li>提供对象的帮助文档。</li></ul></li><li><p><code>dir([object])</code></p><ul><li>返回对象的属性和方法列表。如果未提供参数，则返回当前作用域中的名称列表。</li></ul></li></ul><h2 id="转换内置方法" tabindex="-1">转换内置方法 <a class="header-anchor" href="#转换内置方法" aria-label="Permalink to &quot;转换内置方法&quot;">​</a></h2><ul><li><p><code>int(x, base=10)</code></p><ul><li>将一个数字或字符串转换为整数。</li></ul></li><li><p><code>float(x)</code></p><ul><li>将一个数字或字符串转换为浮点数。</li></ul></li><li><p><code>str(object=&#39;&#39;)</code></p><ul><li>将对象转换为字符串。</li></ul></li><li><p><code>bool(x)</code></p><ul><li>将对象转换为布尔值。</li></ul></li></ul><h2 id="数学内置方法" tabindex="-1">数学内置方法 <a class="header-anchor" href="#数学内置方法" aria-label="Permalink to &quot;数学内置方法&quot;">​</a></h2><ul><li><p><code>abs(x)</code></p><ul><li>返回数字的绝对值。</li></ul></li><li><p><code>sum(iterable, /, start=0)</code></p><ul><li>对可迭代对象中的元素求和。</li></ul></li><li><p><code>max(iterable, *[, key, default])</code></p><ul><li>返回可迭代对象中的最大值。</li></ul></li><li><p><code>min(iterable, *[, key, default])</code></p><ul><li>返回可迭代对象中的最小值。</li></ul></li></ul><h2 id="序列操作内置方法" tabindex="-1">序列操作内置方法 <a class="header-anchor" href="#序列操作内置方法" aria-label="Permalink to &quot;序列操作内置方法&quot;">​</a></h2><ul><li><p><code>list([iterable])</code></p><ul><li>创建一个新的列表。</li></ul></li><li><p><code>tuple([iterable])</code></p><ul><li>创建一个新的元组。</li></ul></li><li><p><code>dict(**kwarg)</code></p><ul><li>创建一个新的字典。</li></ul></li><li><p><code>set([iterable])</code></p><ul><li>创建一个新的集合。</li></ul></li></ul><h2 id="其他内置方法" tabindex="-1">其他内置方法 <a class="header-anchor" href="#其他内置方法" aria-label="Permalink to &quot;其他内置方法&quot;">​</a></h2><ul><li><p><code>enumerate(iterable, start=0)</code></p><ul><li>返回一个枚举对象，生成包含索引和值的元组。</li></ul></li><li><p><code>range(start, stop[, step])</code></p><ul><li>返回一个生成指定范围内的整数的序列。</li></ul></li><li><p><code>zip(*iterables)</code></p><ul><li>将多个可迭代对象“压缩”在一起，返回一个元组的迭代器。</li></ul></li><li><p><code>sorted(iterable, /, *, key=None, reverse=False)</code></p><ul><li>返回一个新的排序后的列表。</li></ul></li><li><p><code>reversed(seq)</code></p><ul><li>返回一个反转的迭代器。</li></ul></li><li><p><code>next(iterator[, default])</code></p><ul><li>返回迭代器的下一个项目。</li></ul></li><li><p><code>iter(object[, sentinel])</code></p><ul><li>返回一个迭代器对象。</li></ul></li></ul><p>这些内置方法是Python编程的基础，掌握它们将大大提高编程效率。</p>', 13)
  ]));
}
const ______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  ______ as default
};
