import{_ as r,r as t,i as e,a as l}from"./chunks/framework.15d2e201.js";const d=JSON.parse(`{"title":"检测是不是数组的方式","description":"","frontmatter":{},"headers":[{"level":2,"title":"Object.prototype.toString.call(arr) === '[object Array]'","slug":"object-prototype-tostring-call-arr-object-array","link":"#object-prototype-tostring-call-arr-object-array","children":[]},{"level":2,"title":"[] instanceof Array  -> true","slug":"instanceof-array-true","link":"#instanceof-array-true","children":[]},{"level":2,"title":"Array.isArray()","slug":"array-isarray","link":"#array-isarray","children":[]},{"level":2,"title":"差异","slug":"差异","link":"#差异","children":[]}],"relativePath":"start-docs/B-专题/检测数组类型的几种方式.md","filePath":"start-docs/B-专题/检测数组类型的几种方式.md"}`),s={name:"start-docs/B-专题/检测数组类型的几种方式.md"};function o(n,a,i,c,p,y){return t(),e("div",null,a[0]||(a[0]=[l(`<h1 id="检测是不是数组的方式" tabindex="-1">检测是不是数组的方式 <a class="header-anchor" href="#检测是不是数组的方式" aria-label="Permalink to &quot;检测是不是数组的方式&quot;">​</a></h1><h2 id="object-prototype-tostring-call-arr-object-array" tabindex="-1">Object.prototype.toString.call(arr) === &#39;[object Array]&#39; <a class="header-anchor" href="#object-prototype-tostring-call-arr-object-array" aria-label="Permalink to &quot;Object.prototype.toString.call(arr) === &#39;[object Array]&#39;&quot;">​</a></h2><h2 id="instanceof-array-true" tabindex="-1">[] instanceof Array -&gt; true <a class="header-anchor" href="#instanceof-array-true" aria-label="Permalink to &quot;[] instanceof Array  -&gt; true&quot;">​</a></h2><h2 id="array-isarray" tabindex="-1">Array.isArray() <a class="header-anchor" href="#array-isarray" aria-label="Permalink to &quot;Array.isArray()&quot;">​</a></h2><h2 id="差异" tabindex="-1">差异 <a class="header-anchor" href="#差异" aria-label="Permalink to &quot;差异&quot;">​</a></h2><ul><li>instanceof 是检测原型链上是否有Array的prototype。 <ul><li>只能用来判断对象类型，原始类型不可以。</li><li>所有对象类型instanceof Object都是true</li></ul></li><li>Object.prototype.toString.call() 常用于判断浏览器内置对象。</li><li>Array.isArray() 优于instanceof <ul><li>是es5新增对象，当不存在时，可以用Object实现<div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">if(!Array.isArray) {</span></span>
<span class="line"><span style="color:#e1e4e8;">    Array.isArray = function(obj) {</span></span>
<span class="line"><span style="color:#e1e4e8;">      return Object.prototype.toString.call(obj) === &#39;[Object Array]&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">    }</span></span>
<span class="line"><span style="color:#e1e4e8;">  }</span></span></code></pre></div></li></ul></li></ul>`,6)]))}const b=r(s,[["render",o]]);export{d as __pageData,b as default};
