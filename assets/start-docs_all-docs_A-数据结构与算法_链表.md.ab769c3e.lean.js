import{_ as n,r as a,i as l,a as p}from"./chunks/framework.15d2e201.js";const F=JSON.parse('{"title":"链表","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 链表反转","slug":"_1-链表反转","link":"#_1-链表反转","children":[]},{"level":2,"title":"2. 链表交换相邻元素","slug":"_2-链表交换相邻元素","link":"#_2-链表交换相邻元素","children":[]},{"level":2,"title":"3. 判断链表是否有环","slug":"_3-判断链表是否有环","link":"#_3-判断链表是否有环","children":[]}],"relativePath":"start-docs/all-docs/A-数据结构与算法/链表.md","filePath":"start-docs/all-docs/A-数据结构与算法/链表.md"}'),o={name:"start-docs/all-docs/A-数据结构与算法/链表.md"};function e(t,s,E,c,r,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h1><ul><li>查询慢，需要一个个往指定的第几位找，时间复杂度是 O(1)</li><li>插入删除快，不会影响其他元素的位置，是个散列摆放，固然直接将上一个元素的 next 指向新元素，将新元素的 next 指向之前的下一个元素即可，时间复杂度是 O(1)</li><li>双向链表也是如此，方便正反方向来操作</li></ul><h2 id="_1-链表反转" tabindex="-1">1. 链表反转 <a class="header-anchor" href="#_1-链表反转" aria-label="Permalink to &quot;1. 链表反转&quot;">​</a></h2><ul><li>input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</li><li>output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ListNode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reverseList</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> curr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (curr) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curr.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    curr.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> prev</span></span>
<span class="line"><span style="color:#E1E4E8;">    prev </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> curr</span></span>
<span class="line"><span style="color:#E1E4E8;">    curr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> prev</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="_2-链表交换相邻元素" tabindex="-1">2. 链表交换相邻元素 <a class="header-anchor" href="#_2-链表交换相邻元素" aria-label="Permalink to &quot;2. 链表交换相邻元素&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swapPairs</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (head </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> head.next </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nextHead</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head.next</span></span>
<span class="line"><span style="color:#E1E4E8;">  head.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">swapPairs</span><span style="color:#E1E4E8;">(nextHead.next)</span></span>
<span class="line"><span style="color:#E1E4E8;">  nextHead.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> newHead</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="_3-判断链表是否有环" tabindex="-1">3. 判断链表是否有环 <a class="header-anchor" href="#_3-判断链表是否有环" aria-label="Permalink to &quot;3. 判断链表是否有环&quot;">​</a></h2><ul><li><p>一直循环 加个最长时间 .5s</p></li><li><p>使用 set 数据结构，每次循环将地址加进去，判断地址是否在 set 中出现 o(n)</p></li><li><p>龟兔赛跑 快指针间隔 2 步 满指针间隔 1 步 不需要额外的数据结构 如果没有环，永远不会相撞，如果有环，则会相遇 时间复杂度 o(n)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">def </span><span style="color:#B392F0;">hasCycle</span><span style="color:#E1E4E8;">(self, head):</span></span>
<span class="line"><span style="color:#E1E4E8;">  fast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> slow and fast and fast.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    slow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slow.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    fast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fast.next.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> slow is </span><span style="color:#B392F0;">fast</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasCycle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> slow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> fast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(slow </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> fast </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> fast.next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    slow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> slow.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    fast </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fast.next.next</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(slow </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> fast) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,9)]))}const d=n(o,[["render",e]]);export{F as __pageData,d as default};
