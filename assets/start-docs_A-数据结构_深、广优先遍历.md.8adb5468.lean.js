import { _ as _export_sfc, r as r3, i as it, f as ig } from "./chunks/framework.29e23d3c.js";
const __pageData = JSON.parse('{"title":"DFS-BFS","description":"","frontmatter":{},"headers":[{"level":2,"title":"DFS 深度优先遍历和 BFS 广度优先遍历","slug":"dfs-深度优先遍历和-bfs-广度优先遍历","link":"#dfs-深度优先遍历和-bfs-广度优先遍历","children":[]}],"relativePath":"start-docs/A-数据结构/深、广优先遍历.md","filePath":"start-docs/A-数据结构/深、广优先遍历.md"}');
const _sfc_main = { name: "start-docs/A-数据结构/深、广优先遍历.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="dfs-bfs" tabindex="-1">DFS-BFS <a class="header-anchor" href="#dfs-bfs" aria-label="Permalink to &quot;DFS-BFS&quot;">​</a></h1><h2 id="dfs-深度优先遍历和-bfs-广度优先遍历" tabindex="-1">DFS 深度优先遍历和 BFS 广度优先遍历 <a class="header-anchor" href="#dfs-深度优先遍历和-bfs-广度优先遍历" aria-label="Permalink to &quot;DFS 深度优先遍历和 BFS 广度优先遍历&quot;">​</a></h2><ul><li>BFS 查找集合层级相关 广度优先 Breadth First Search 使用<strong>队列</strong> 先进先出。地毯式搜索，层层递进。</li><li>DFS 优先查节点最深 深度有限 Deepth First Search 使用<strong>堆栈</strong> 先进后出</li></ul><div class="language-js codearea-link" id="m8jj9noq08"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  children: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      name: </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      children: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        { name: </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, children: [{ name: </span><span style="color:#E6DB74;">&#39;e&#39;</span><span style="color:#F8F8F2;"> }] },</span></span>\n<span class="line"><span style="color:#F8F8F2;">        { name: </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">, children: [{ name: </span><span style="color:#E6DB74;">&#39;f&#39;</span><span style="color:#F8F8F2;"> }] },</span></span>\n<span class="line"><span style="color:#F8F8F2;">        { name: </span><span style="color:#E6DB74;">&#39;d&#39;</span><span style="color:#F8F8F2;">, children: [{ name: </span><span style="color:#E6DB74;">&#39;g&#39;</span><span style="color:#F8F8F2;"> }] }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      name: </span><span style="color:#E6DB74;">&#39;a2&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">      children: [</span></span>\n<span class="line"><span style="color:#F8F8F2;">        { name: </span><span style="color:#E6DB74;">&#39;b2&#39;</span><span style="color:#F8F8F2;">, children: [{ name: </span><span style="color:#E6DB74;">&#39;e2&#39;</span><span style="color:#F8F8F2;"> }] },</span></span>\n<span class="line"><span style="color:#F8F8F2;">        { name: </span><span style="color:#E6DB74;">&#39;c2&#39;</span><span style="color:#F8F8F2;">, children: [{ name: </span><span style="color:#E6DB74;">&#39;f2&#39;</span><span style="color:#F8F8F2;"> }] },</span></span>\n<span class="line"><span style="color:#F8F8F2;">        { name: </span><span style="color:#E6DB74;">&#39;d2&#39;</span><span style="color:#F8F8F2;">, children: [{ name: </span><span style="color:#E6DB74;">&#39;g2&#39;</span><span style="color:#F8F8F2;"> }] }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li><p>DFS</p><ul><li>定义 visited Set</li><li>常用递归实现</li></ul><div class="language-js codearea-link" id="axv24re2xwi"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">//例如 递归查找 查找所有dom节点</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dfs1</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">nodeList</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">node) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nodeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">  nodeList.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(node)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> node.children</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (children) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> children.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">dfs1</span><span style="color:#F8F8F2;">(children[i], nodeList)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nodeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> nodes1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dfs</span><span style="color:#F8F8F2;">(document.body)</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(nodes1)</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="v5q19kpat9"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">//例如 非递归 查找所有dom节点</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dfs2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">nodeList</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">node) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nodeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> stack </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F8F8F2;">  stack.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(node)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (stack.length) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> stack.</span><span style="color:#A6E22E;">pop</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// 取出最后一个</span></span>\n<span class="line"><span style="color:#F8F8F2;">    nodeList.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(n)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n.children</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (children) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> children.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        stack.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(children[i])</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nodeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> nodes2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">dfs2</span><span style="color:#F8F8F2;">(data)</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(nodes2)</span></span></code></pre><button class="link">将此代码在线运行</button></div></li><li><p>BFS</p><ul><li>只能非递归</li></ul><div class="language-js codearea-link" id="hozca2ndwp"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">bfs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">nodeList</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">node) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nodeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> quene </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F8F8F2;">  quene.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(node)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (quene.length) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> quene.</span><span style="color:#A6E22E;">shift</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">//取出第一个</span></span>\n<span class="line"><span style="color:#F8F8F2;">    nodeList.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(n)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n.children</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (children) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> children.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        quene.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(children[i])</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nodeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> nodes4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">bfs</span><span style="color:#F8F8F2;">(data)</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data)</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul>', 5)
  ]));
}
const _______ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _______ as default
};
