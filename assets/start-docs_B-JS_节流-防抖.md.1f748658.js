import { _ as _export_sfc, r as r3, i as it, v as ig } from "./chunks/framework.ccd34752.js";
const __pageData = JSON.parse('{"title":"防抖 And 节流","description":"","frontmatter":{},"headers":[{"level":2,"title":"防抖","slug":"防抖","link":"#防抖","children":[]},{"level":2,"title":"节流","slug":"节流","link":"#节流","children":[]}],"relativePath":"start-docs/B-JS/节流-防抖.md","filePath":"start-docs/B-JS/节流-防抖.md"}');
const _sfc_main = { name: "start-docs/B-JS/节流-防抖.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="防抖-and-节流" tabindex="-1">防抖 And 节流 <a class="header-anchor" href="#防抖-and-节流" aria-label="Permalink to &quot;防抖 And 节流&quot;">​</a></h1><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h2><ul><li>当监听页面滚动事件并频繁触发事件时，需要做防抖。例如 resize <ul><li>如果短时间内触发同一事件，只执行一次函数。如果 N 秒内重复出发，则重新计算时间。</li></ul><div class="language-js codearea-link" id="878q9whzwf8"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">debounce</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> timer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> args </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">arguments</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (timer) </span><span style="color:#A6E22E;">clearTimeout</span><span style="color:#F8F8F2;">(timer)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    timer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, args), delay)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul><h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h2><ul><li>短时间内触发同一事件，要求在执行一次后，在规定时间内不再执行。每隔一段时间必执行一次。 <ul><li>应用： <ul><li>懒监听页面滚动，例如无限加载，每隔一段时间加载一次数据。</li><li>页面数据框输入实时搜索，可以根据需求是当用户停下才搜索或者每隔一点时间就搜索来使用防抖或者节流</li></ul></li></ul><div class="language-js codearea-link" id="s3r1bw7szss"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">throttle</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> flag </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> args </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">arguments</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">flag) </span><span style="color:#F92672;">return</span></span>\n<span class="line"><span style="color:#F8F8F2;">    flag </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, args)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      flag </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }, delay)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="1i4bp9wyoct"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">(map)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">item.pId) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    res.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(item)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> map[item.pId]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    parent.child </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> parent.child </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F8F8F2;">    parent.child.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(item)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul>', 5)
  ]));
}
const _____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _____ as default
};
