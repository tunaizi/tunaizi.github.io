import{_ as n,r as a,i as l,a as p}from"./chunks/framework.1cf9c55e.js";const d=JSON.parse('{"title":"数组与链表","description":"","frontmatter":{},"headers":[{"level":2,"title":"数组优劣","slug":"数组优劣","link":"#数组优劣","children":[{"level":3,"title":"二分查找","slug":"二分查找","link":"#二分查找","children":[]}]},{"level":2,"title":"1. 链表反转","slug":"_1-链表反转","link":"#_1-链表反转","children":[]},{"level":2,"title":"2. 链表交换相邻元素","slug":"_2-链表交换相邻元素","link":"#_2-链表交换相邻元素","children":[]},{"level":2,"title":"3. 判断链表是否有环","slug":"_3-判断链表是否有环","link":"#_3-判断链表是否有环","children":[]}],"relativePath":"start-docs/A-数据结构/链表.md","filePath":"start-docs/A-数据结构/链表.md"}'),o={name:"start-docs/A-数据结构/链表.md"};function F(e,s,t,c,r,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h1 id="数组与链表" tabindex="-1">数组与链表 <a class="header-anchor" href="#数组与链表" aria-label="Permalink to &quot;数组与链表&quot;">​</a></h1><h2 id="数组优劣" tabindex="-1">数组优劣 <a class="header-anchor" href="#数组优劣" aria-label="Permalink to &quot;数组优劣&quot;">​</a></h2><ul><li>数组 <ul><li>查询快,每个元素在内存中有地址，可以通过计算机的寻址方式快速找到元素，所以查询的时间复杂度是 O(1)</li><li>插入删除慢，由于数组是有序的，插入或者删除后会影响其他元素的位置，固然需要挪动其他元素，时间复杂度是 O(n)</li></ul></li></ul><h3 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-label="Permalink to &quot;二分查找&quot;">​</a></h3><div class="language-js codearea-link" id="d6i2a5q5edb"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">binarySearch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> array.length</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">end</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (start </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> end) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> mid </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">floor</span><span style="color:#F8F8F2;">((start </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> end) </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (target </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> array[mid]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> mid</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (target </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> array[mid]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">(mid </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, end)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">(start, mid </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>查询慢，需要一个个往指定的第几位找，时间复杂度是 O(1)</li><li>插入删除快，不会影响其他元素的位置，是个散列摆放，固然直接将上一个元素的 next 指向新元素，将新元素的 next 指向之前的下一个元素即可，时间复杂度是 O(1)</li><li>双向链表也是如此，方便正反方向来操作</li></ul><h2 id="_1-链表反转" tabindex="-1">1. 链表反转 <a class="header-anchor" href="#_1-链表反转" aria-label="Permalink to &quot;1. 链表反转&quot;">​</a></h2><ul><li>input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</li><li>output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</li></ul><div class="language-js codearea-link" id="9a46d6phrza"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">ListNode</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.val </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">reverseList</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">head</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> prev </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> curr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (curr) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> curr.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    curr.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prev</span></span>
<span class="line"><span style="color:#F8F8F2;">    prev </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> curr</span></span>
<span class="line"><span style="color:#F8F8F2;">    curr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> next</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prev</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="_2-链表交换相邻元素" tabindex="-1">2. 链表交换相邻元素 <a class="header-anchor" href="#_2-链表交换相邻元素" aria-label="Permalink to &quot;2. 链表交换相邻元素&quot;">​</a></h2><div class="language-js codearea-link" id="g24uynl8lfp"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">swapPairs</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">head</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (head </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> head.next </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> nextHead </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head.next</span></span>
<span class="line"><span style="color:#F8F8F2;">  head.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">swapPairs</span><span style="color:#F8F8F2;">(nextHead.next)</span></span>
<span class="line"><span style="color:#F8F8F2;">  nextHead.next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> newHead</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="_3-判断链表是否有环" tabindex="-1">3. 判断链表是否有环 <a class="header-anchor" href="#_3-判断链表是否有环" aria-label="Permalink to &quot;3. 判断链表是否有环&quot;">​</a></h2><ul><li><p>一直循环 加个最长时间 .5s</p></li><li><p>使用 set 数据结构，每次循环将地址加进去，判断地址是否在 set 中出现 o(n)</p></li><li><p>龟兔赛跑 快指针间隔 2 步 满指针间隔 1 步 不需要额外的数据结构 如果没有环，永远不会相撞，如果有环，则会相遇 时间复杂度 o(n)</p><div class="language-js codearea-link" id="fah9ixxlkq"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">def </span><span style="color:#A6E22E;">hasCycle</span><span style="color:#F8F8F2;">(self, head):</span></span>
<span class="line"><span style="color:#F8F8F2;">  fast </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> slow </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> slow and fast and fast.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    slow </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> slow.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    fast </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fast.next.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> slow is fast:</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">hasCycle</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">head</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> slow </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> fast </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> head</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;">(slow </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> fast </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> fast.next) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    slow </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> slow.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    fast </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fast.next.next</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(slow </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> fast) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul>`,13)]))}const u=n(o,[["render",F]]);export{d as __pageData,u as default};
