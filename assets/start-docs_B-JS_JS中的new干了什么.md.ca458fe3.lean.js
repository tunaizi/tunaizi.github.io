import{_ as n,r as a,i as l,a as o}from"./chunks/framework.bb8f9838.js";const E=JSON.parse('{"title":"new 关键字","description":"","frontmatter":{},"headers":[{"level":2,"title":"new 关键字在 JavaScript 中的作用","slug":"new-关键字在-javascript-中的作用","link":"#new-关键字在-javascript-中的作用","children":[]},{"level":2,"title":"JS 中 new 关键字干了什么事","slug":"js-中-new-关键字干了什么事","link":"#js-中-new-关键字干了什么事","children":[]},{"level":2,"title":"使用 new 构造器，分为三步","slug":"使用-new-构造器-分为三步","link":"#使用-new-构造器-分为三步","children":[]}],"relativePath":"start-docs/B-JS/JS中的new干了什么.md","filePath":"start-docs/B-JS/JS中的new干了什么.md"}'),p={name:"start-docs/B-JS/JS中的new干了什么.md"};function e(t,s,F,c,r,y){return a(),l("div",null,s[0]||(s[0]=[o(`<h1 id="new-关键字" tabindex="-1">new 关键字 <a class="header-anchor" href="#new-关键字" aria-label="Permalink to &quot;new 关键字&quot;">​</a></h1><h2 id="new-关键字在-javascript-中的作用" tabindex="-1">new 关键字在 JavaScript 中的作用 <a class="header-anchor" href="#new-关键字在-javascript-中的作用" aria-label="Permalink to &quot;new 关键字在 JavaScript 中的作用&quot;">​</a></h2><ul><li>new 关键字在 JavaScript 中用于创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。使用 new 关键字创建对象的过程可以分为以下几个步骤：</li><li>创建一个空对象：创建一个全新的空对象。</li><li>设置原型链：将这个新对象的原型（<strong>proto</strong>）设置为构造函数的 prototype 属性。</li><li>绑定 this：将构造函数内部的 this 绑定到这个新创建的对象。</li><li>执行构造函数：执行构造函数中的代码，为新对象添加属性和方法。</li><li>返回新对象：如果构造函数没有显式返回一个对象，则返回新创建的对象；如果构造函数显式返回一个对象，则返回该对象。</li></ul><h2 id="js-中-new-关键字干了什么事" tabindex="-1">JS 中 new 关键字干了什么事 <a class="header-anchor" href="#js-中-new-关键字干了什么事" aria-label="Permalink to &quot;JS 中 new 关键字干了什么事&quot;">​</a></h2><ul><li>new 运算符创建一个指定对象类型的实例</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> car </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Car</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> car </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">()</span></span></code></pre><button class="link"></button></div><h2 id="使用-new-构造器-分为三步" tabindex="-1">使用 new 构造器，分为三步 <a class="header-anchor" href="#使用-new-构造器-分为三步" aria-label="Permalink to &quot;使用 new 构造器，分为三步&quot;">​</a></h2><ul><li>创建一个空对象，将它的引用赋值给 this,继承函数的原型</li><li>通过 this 将属性和方法添加至这个对象</li><li>返回 this 指向的新对象，也就是实例。如果没有，则返回第一个创建的对象。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { age: name }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myNew</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">    obj.__proto__ </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">fn</span><span style="color:#F8F8F2;">.prototype</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fn.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> obj</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// or</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">fn</span><span style="color:#F8F8F2;">.prototype)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> obj</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myNew2</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> Constructor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.shift.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  obj.__proto__ </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Constructor</span><span style="color:#F8F8F2;">.prototype</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Constructor.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> obj</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">myNew</span><span style="color:#F8F8F2;">(Car)(</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#A6E22E;">myNew2</span><span style="color:#F8F8F2;">(Car, </span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link"></button></div>`,9)]))}const u=n(p,[["render",e]]);export{E as __pageData,u as default};
