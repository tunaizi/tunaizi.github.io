import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"cookie","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是Cookie","slug":"什么是cookie","link":"#什么是cookie","children":[]},{"level":2,"title":"如何操作Cookie（重点）","slug":"如何操作cookie-重点","link":"#如何操作cookie-重点","children":[]},{"level":2,"title":"Cookie的常用属性（重点）","slug":"cookie的常用属性-重点","link":"#cookie的常用属性-重点","children":[{"level":3,"title":"过期时间：expires","slug":"过期时间-expires","link":"#过期时间-expires","children":[]},{"level":3,"title":"路径：path","slug":"路径-path","link":"#路径-path","children":[]}]},{"level":2,"title":"使用Cookie时需要注意","slug":"使用cookie时需要注意","link":"#使用cookie时需要注意","children":[]},{"level":2,"title":"浏览器Cookie数量及大小限制","slug":"浏览器cookie数量及大小限制","link":"#浏览器cookie数量及大小限制","children":[{"level":3,"title":"浏览器允许每个域名所包含的cookie数","slug":"浏览器允许每个域名所包含的cookie数","link":"#浏览器允许每个域名所包含的cookie数","children":[]},{"level":3,"title":"cookie的缺点","slug":"cookie的缺点","link":"#cookie的缺点","children":[]}]},{"level":2,"title":"什么是WebStorage?","slug":"什么是webstorage","link":"#什么是webstorage","children":[]},{"level":2,"title":"WebStorage两个主要目标：","slug":"webstorage两个主要目标","link":"#webstorage两个主要目标","children":[{"level":3,"title":"localStorage和sessionStorage的区别","slug":"localstorage和sessionstorage的区别","link":"#localstorage和sessionstorage的区别","children":[]},{"level":3,"title":"WebStorage的优点(对比cookie)","slug":"webstorage的优点-对比cookie","link":"#webstorage的优点-对比cookie","children":[]},{"level":3,"title":"cookie和localStorage sessionStorage","slug":"cookie和localstorage-sessionstorage","link":"#cookie和localstorage-sessionstorage","children":[]}]}],"relativePath":"start-docs/E-md/cookie.md","filePath":"start-docs/E-md/cookie.md"}');
const _sfc_main = { name: "start-docs/E-md/cookie.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h1><h2 id="什么是cookie" tabindex="-1">什么是Cookie <a class="header-anchor" href="#什么是cookie" aria-label="Permalink to &quot;什么是Cookie&quot;">​</a></h2><p>Cookie又叫会话跟踪技术，实际上就是客户端硬盘上的一个文本文件，该文件用来存储一些数据。</p><p>cookie 是浏览器 为了 标识用户身份 或者 长时间存储一些信息 而保存在用户本地的数据(其本质是 为了提升用户体验 而存储来用户本地的数据)</p><p><strong>Cookie和变量一样，是用来做数据存储的</strong></p><p>与变量不同之处在于，cookie能够有前提性的，实现跨页面读写数据，和长时间保存数据。</p><p>前提性：</p><ul><li>必须是同一个浏览器创建的cookie</li><li>必须是同一个网站创建的cookie</li><li>通过设置path属性所具备的读写权限</li><li>通过设置expires属性所具备的有效时间权限</li></ul><p>特征:</p><ul><li>cookie 的存取都依赖于 document.cookie (类型 字符串类型)</li><li>cookie 存储的时候是一条一条的的存的</li><li>cookie 可以设置存储路径 和 过期时间(默认浏览器关闭 过期)</li></ul><h2 id="如何操作cookie-重点" tabindex="-1">如何操作Cookie（重点） <a class="header-anchor" href="#如何操作cookie-重点" aria-label="Permalink to &quot;如何操作Cookie（重点）&quot;">​</a></h2><p><strong>Cookie需要依赖服务器环境，所以应先搭建服务器环境。</strong></p><ol><li>创建cookie的语法：</li></ol><p>a. cookie 的存取都依赖于 document.cookie</p><p>b. cookie是以键值对(key=value)形式存在的字符串</p><p>c. cookie 存储的时候是一条一条的的存的 (每条数据之前用&quot;; &quot; 分隔)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">document.cookie = &quot;名称=值&quot;;</span></span></code></pre></div><p>2.获取cookie的语法：</p><p>a. cookie 的获取也依赖于 document.cookie</p><p>b. 获取cookie数据时需要进行数据分割(字符串拆分)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">document.cookie;</span></span></code></pre></div><ol start="3"><li>cookie的修改</li></ol><p>a. cookie修改 是根据键名(key) 修改对应的值(重新根据键名赋值即可)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">document.cookie = &quot;user=hello cookie&quot;;</span></span></code></pre></div><p>4 . cookie的删除和过期时间有关</p><p>a. 默认情况下 如果不设置过期时间 浏览器关闭后 cookie过期</p><p>b. 如果设置了过期时间 等到时间到期之后 cookie就消失了</p><p>c. 删除cookie其实本质就是 将过期时间修改为 过去的时间</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">var date = new Date();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    date.setDate(date.getDate() - 1);// 一天前过期</span></span>\n<span class="line"><span style="color:#F8F8F2;">    document.cookie = &quot;user=helloCookie;expires=&quot; + date.toUTCString();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    document.cookie = &quot;pwd=123123;expires=&quot; + date.toUTCString()</span></span></code></pre></div><h2 id="cookie的常用属性-重点" tabindex="-1">Cookie的常用属性（重点） <a class="header-anchor" href="#cookie的常用属性-重点" aria-label="Permalink to &quot;Cookie的常用属性（重点）&quot;">​</a></h2><h3 id="过期时间-expires" tabindex="-1">过期时间：expires <a class="header-anchor" href="#过期时间-expires" aria-label="Permalink to &quot;过期时间：expires&quot;">​</a></h3><p>没有设置expires属性，那么表示该cookie的有效期为会话，会话指浏览器打开到关闭。</p><p>设置了expires属性，那么表示该cookie的有效期为一个具体的时间，过期cookie文件删除。</p><p>示例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">var d = new Date();</span></span>\n<span class="line"><span style="color:#F8F8F2;">d.setDate( d.getDate()+1 );</span></span>\n<span class="line"><span style="color:#F8F8F2;">document.cookie = &quot;username=zhangsan; expires=&quot;+d.toUTCString();</span></span></code></pre></div><p>解读：</p><p>创建了一个名称叫做username的cookie，它所存储的内容为zhangsan，它的过期时间是创建这个cookie时的1天后。</p><p>备注：</p><p>通过修改相同命名的cookie的值或过期时间，可以实现该cookie的修改和删除。</p><h3 id="路径-path" tabindex="-1">路径：path <a class="header-anchor" href="#路径-path" aria-label="Permalink to &quot;路径：path&quot;">​</a></h3><p>cookie在读取时，是存在访问权限的，即只能够访问path路径下的cookie</p><p>例如，在网站根目录创建的cookie，网站任何位置都能够访问到这个cookie</p><p>在 /a/ 目录下创建的cookie，只能在 /a/ 目录下访问这个cookie。</p><p>示例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">document.cookie = &quot;username=zhangsan; path=/&quot;;</span></span></code></pre></div><p>解读：</p><p>创建了一个名称叫做username的cookie，它所存储的内容为zhangsan，该cookie在当前网站下任何位置都能读写。</p><p>备注：</p><p>path和domain属性都是设置该cookie的归属，即cookie作用域，因同源策略的限制，只能够获取同源同作用域下的cookie。</p><h2 id="使用cookie时需要注意" tabindex="-1">使用Cookie时需要注意 <a class="header-anchor" href="#使用cookie时需要注意" aria-label="Permalink to &quot;使用Cookie时需要注意&quot;">​</a></h2><ul><li>有些浏览器在使用中文时，会出现乱码。</li></ul><blockquote><p>在设置cookie时，通过encodeURIComponent 编码，在获取cookie时，通过decodeURIComponent 解码</p></blockquote><ul><li>cookie 文件存放在客户端</li></ul><blockquote><p>cookie 即可以用客户端 javascript 读写，也可以用服务器端 php、jsp等读写。</p></blockquote><ul><li>每个网站只能访问自己网站的cookie</li></ul><blockquote><p>即百度创建的cookie，新浪是不能够访问的。</p></blockquote><ul><li>每个浏览器只能访问自己浏览器的cookie</li></ul><blockquote><p>即火狐创建的cookie，谷歌是不能够访问的。</p></blockquote><ul><li><p>cookie 的内容是纯文本，即只能保存字符串数据。</p></li><li><p>cookie 依赖于服务器环境 ，即设置和获取cookie时，要用 http 访问网页。火狐除外。</p></li></ul><h2 id="浏览器cookie数量及大小限制" tabindex="-1">浏览器Cookie数量及大小限制 <a class="header-anchor" href="#浏览器cookie数量及大小限制" aria-label="Permalink to &quot;浏览器Cookie数量及大小限制&quot;">​</a></h2><h3 id="浏览器允许每个域名所包含的cookie数" tabindex="-1">浏览器允许每个域名所包含的cookie数 <a class="header-anchor" href="#浏览器允许每个域名所包含的cookie数" aria-label="Permalink to &quot;浏览器允许每个域名所包含的cookie数&quot;">​</a></h3><ul><li><p>Microsoft指出InternetExplorer8增加cookie限制为每个域名50个，但实际上IE6就已经最多允许每个域名50个cookie。</p></li><li><p>Firefox每个域名cookie限制为50个。firefox 3.6可以存150个cookie。</p></li><li><p>Opera每个域名cookie限制为30个。</p></li><li><p>Safari / WebKit没有cookie限制。但是如果cookie很多，则会使header大小超过服务器的处理的限制，会导致错误发生。</p></li></ul><h3 id="cookie的缺点" tabindex="-1">cookie的缺点 <a class="header-anchor" href="#cookie的缺点" aria-label="Permalink to &quot;cookie的缺点&quot;">​</a></h3><p>cookie的缺点主要集中于安全性和隐私保护</p><ol><li>cookie可能被禁用</li><li>cookie不能跨浏览器 / 不能跨网站</li><li>cookie可能被删除</li><li>cookie安全性不够高</li><li>在浏览器向服务器发送请求时 cookie会随着请求(请求可以携带一定的数据)一同发送给服务器, 会影响请求和响应的速率</li><li>cookie 存储大小之后 4k , cookie的存储条数 一般为50条</li></ol><h1 id="webstorage-拓展" tabindex="-1">webStorage(拓展) <a class="header-anchor" href="#webstorage-拓展" aria-label="Permalink to &quot;webStorage(拓展)&quot;">​</a></h1><h2 id="什么是webstorage" tabindex="-1">什么是WebStorage? <a class="header-anchor" href="#什么是webstorage" aria-label="Permalink to &quot;什么是WebStorage?&quot;">​</a></h2><p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p><h2 id="webstorage两个主要目标" tabindex="-1">WebStorage两个主要目标： <a class="header-anchor" href="#webstorage两个主要目标" aria-label="Permalink to &quot;WebStorage两个主要目标：&quot;">​</a></h2><p>1.提供一种在cookie之外存储会话数据的路径 (一种新的在用户本地 存储数据的方式) 2.提供一种存储大量可以跨会话存在的数据的机制 (webStorage也可以跨页面访问 ) HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）</p><h3 id="localstorage和sessionstorage的区别" tabindex="-1">localStorage和sessionStorage的区别 <a class="header-anchor" href="#localstorage和sessionstorage的区别" aria-label="Permalink to &quot;localStorage和sessionStorage的区别&quot;">​</a></h3><p>1.生命周期</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。</span></span>\n<span class="line"><span style="color:#F8F8F2;">localStorage除非主动删除数据，否则数据永远不会消失。</span></span>\n<span class="line"><span style="color:#F8F8F2;">sessionStorage的生命周期是仅在当前会话下有效。</span></span>\n<span class="line"><span style="color:#F8F8F2;">sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。</span></span>\n<span class="line"><span style="color:#F8F8F2;">只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源(同一个服务器目录)另一个页面，数据依然存在。</span></span>\n<span class="line"><span style="color:#F8F8F2;">但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</span></span></code></pre></div><p>2.存储大小</p><p>localStorage和sessionStorage的存储数据大小一般都是：5MB</p><p>3.存储位置</p><p>localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信</p><p>4.存储内容类型</p><p>localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p><p>5.获取方式</p><p>localStorage：window.localStorage sessionStorage：window.sessionStorage</p><p>6.应用场景</p><p>localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据 sessionStorage：敏感账号一次性登录</p><h3 id="webstorage的优点-对比cookie" tabindex="-1">WebStorage的优点(对比cookie) <a class="header-anchor" href="#webstorage的优点-对比cookie" aria-label="Permalink to &quot;WebStorage的优点(对比cookie)&quot;">​</a></h3><p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB</p><p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务端的交互，节省了网络流量</p><p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便</p><p>（4）快速显示：有的数据存储在WebStorage上再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快</p><p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说会比较高一些，不会担心截获，但是仍然存在伪造问题</p><p>（6）WebStorage提供了一些方法，数据操作比cookie方便</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">length   保存数据的数量</span></span>\n<span class="line"><span style="color:#F8F8F2;">	setItem(key, value) —— 保存数据，以键值对的方式存储信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">	getItem(key) —— 获取数据，将键值传入，即可获取到对应的value值</span></span>\n<span class="line"><span style="color:#F8F8F2;">	removeItem(key) —— 删除单个数据，根据键值移除对应的信息</span></span>\n<span class="line"><span style="color:#F8F8F2;">	clear() —— 删除所有的数据</span></span>\n<span class="line"><span style="color:#F8F8F2;">	key(index) —— 获取某个索引的key</span></span></code></pre></div><h3 id="cookie和localstorage-sessionstorage" tabindex="-1">cookie和localStorage sessionStorage <a class="header-anchor" href="#cookie和localstorage-sessionstorage" aria-label="Permalink to &quot;cookie和localStorage sessionStorage&quot;">​</a></h3><p>cookie localStorage sessionStorage的区别</p><table><thead><tr><th>对比</th><th style="text-align:center;">cookie</th><th style="text-align:center;">localstorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>获取方式</td><td style="text-align:center;">document.cookie</td><td style="text-align:center;">window.localStorage</td><td>window.sessionStorage</td></tr><tr><td>数据类型</td><td style="text-align:center;">cookie的本质是字符串</td><td style="text-align:center;">对象</td><td>对象</td></tr><tr><td>存储大小</td><td style="text-align:center;">4K</td><td style="text-align:center;">5M</td><td>5M</td></tr><tr><td>存储位置</td><td style="text-align:center;">cookie默认存在当前文件所在的目录,也可以指定目录</td><td style="text-align:center;">服务器的根目录(项目的根目录)</td><td>服务器的根目录(项目的根目录)</td></tr><tr><td>生命周期</td><td style="text-align:center;">cookie默认浏览器关闭时就过期,设置过期时间之后,等到指定日期之后过期</td><td style="text-align:center;">localStorage除非主动删除数据，否则数据永远不会消失</td><td>session 引入了一个“浏览器窗口”的概念,只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源(同一个服务器目录下)另一个页面，数据依然存在</td></tr><tr><td>服务器请求</td><td style="text-align:center;">cookie会随着请求传递到服务器,优点:携带数据 缺点:无用数据太多的话影响请求和响应的速度</td><td style="text-align:center;">只存在客户端,不与服务器(后端)进行交互通信</td><td>只存在客户端,不与服务器(后端)进行交互通信</td></tr><tr><td>应用场景</td><td style="text-align:center;">1.标识用户身份 2.长时间存储一些数据</td><td style="text-align:center;">常用于长期登录（+判断用户是否已登录token），适合长期保存在本地的数据</td><td>敏感账号一次性登录</td></tr></tbody></table>', 94)
  ]));
}
const cookie = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  cookie as default
};
