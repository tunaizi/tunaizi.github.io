import{_ as i,r as t,i as a,a as s}from"./chunks/framework.1cf9c55e.js";const b=JSON.parse('{"title":"this指向","description":"","frontmatter":{},"headers":[{"level":2,"title":"this的四种绑定规则","slug":"this的四种绑定规则","link":"#this的四种绑定规则","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"relativePath":"start-docs/B-JS/JS的this关键字.md","filePath":"start-docs/B-JS/JS的this关键字.md"}'),o={name:"start-docs/B-JS/JS的this关键字.md"};function e(r,l,h,n,u,c){return t(),a("div",null,l[0]||(l[0]=[s('<h1 id="this指向" tabindex="-1">this指向 <a class="header-anchor" href="#this指向" aria-label="Permalink to &quot;this指向&quot;">​</a></h1><ul><li>this指向调用者的环境，与绑定时无关</li><li>this设计目的： 在函数体内部，指代函数当前的运行环境</li><li>this是在函数被调用时，才发生的绑定。也就是说this具体指向取决于怎么调用函数。</li></ul><h2 id="this的四种绑定规则" tabindex="-1">this的四种绑定规则 <a class="header-anchor" href="#this的四种绑定规则" aria-label="Permalink to &quot;this的四种绑定规则&quot;">​</a></h2><ul><li>默认绑定、隐式绑定、显示绑定、new绑定。 优先级从低到高</li><li>默认绑定 <ul><li>也就是没有其他绑定规则存在时的默认规则。</li><li>在非严格模式时， function foo(){console.log(this.a)};var a = 2; foo(); <ul><li>this指向的是window</li></ul></li><li>在严格模式时， function foo(){&#39;use strict&#39;; console.log(this.a)};var a = 2; foo(); <ul><li>执行时报错，全局对象将无法使用默认绑定。 Uncaugth TypeError: Cannot read property &#39;a&#39; of undefined</li></ul></li></ul></li><li>隐式绑定 <ul><li>函数的调用是在某个对象是触发时，即调用位置上存在上下文对象。 <ul><li>function foo(){console.log(this.a)};var a = 2; var obj = {a: 3,foo:foo};obj.foo(); <ul><li>此时this指向obj</li></ul></li></ul></li></ul></li><li>显示绑定 <ul><li>call、apply和bind</li></ul></li><li>new操作符，在js中，它就是一个函数的调用，只是被new修饰了。 <ul><li>使用new创建对象的的四步骤： <ul><li>创建一个全新的对象 obj</li><li>将对象的原型属性__proto__指向构造对象的原型 Foo.prototype</li><li>将这个新对象绑定到函数调用的this并调用。 Foo.call(obj, ...arguments)</li><li>如果函数有返回对象，则返回，如果没有，则返回新创建的对象。</li></ul></li></ul></li><li>() =&gt; {this} 箭头函数中的this指向最近一层非箭头函数中的this。即this是在箭头函数定义时就绑定了。call、apply、bind不能更改this指向</li></ul><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li>[<a href="https://github.com/jasonGeng88/blog/blob/master/201804/js-this.md" target="_blank" rel="noreferrer">https://github.com/jasonGeng88/blog/blob/master/201804/js-this.md</a>]</li><li>[<a href="https://github.com/Nealyang/PersonalBlog/issues/56" target="_blank" rel="noreferrer">https://github.com/Nealyang/PersonalBlog/issues/56</a>]</li><li>[<a href="https://github.com/Nealyang/YOU-SHOULD-KNOW-JS/blob/master/doc/basic_js/%E5%BD%BB%E5%BA%95%E6%98%8E%E7%99%BDthis%E6%8C%87%E5%90%91.md?1536536968756" target="_blank" rel="noreferrer">https://github.com/Nealyang/YOU-SHOULD-KNOW-JS/blob/master/doc/basic_js/彻底明白this指向.md?1536536968756</a>]</li></ul>',6)]))}const f=i(o,[["render",e]]);export{b as __pageData,f as default};
