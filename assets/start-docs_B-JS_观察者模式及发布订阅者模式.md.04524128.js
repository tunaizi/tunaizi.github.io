import { _ as _export_sfc, r as r3, i as it, v as ig } from "./chunks/framework.ccd34752.js";
const _imports_0 = "/assets/gcorobser.b1f1a05c.png";
const __pageData = JSON.parse('{"title":"观察者模式和发布订阅模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"观察者模式 （没有中间商赚差价）","slug":"观察者模式-没有中间商赚差价","link":"#观察者模式-没有中间商赚差价","children":[]},{"level":2,"title":"发布订阅模式（有中间商赚差价）","slug":"发布订阅模式-有中间商赚差价","link":"#发布订阅模式-有中间商赚差价","children":[{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"relativePath":"start-docs/B-JS/观察者模式及发布订阅者模式.md","filePath":"start-docs/B-JS/观察者模式及发布订阅者模式.md"}');
const _sfc_main = { name: "start-docs/B-JS/观察者模式及发布订阅者模式.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="观察者模式和发布订阅模式" tabindex="-1">观察者模式和发布订阅模式 <a class="header-anchor" href="#观察者模式和发布订阅模式" aria-label="Permalink to &quot;观察者模式和发布订阅模式&quot;">​</a></h1><p><img src="' + _imports_0 + '" alt="观察者与发布订阅模式"></p><h2 id="观察者模式-没有中间商赚差价" tabindex="-1">观察者模式 （没有中间商赚差价） <a class="header-anchor" href="#观察者模式-没有中间商赚差价" aria-label="Permalink to &quot;观察者模式 （没有中间商赚差价）&quot;">​</a></h2><ul><li>一个对象（被观察者subject）的状态发生变化时，会通知所有依赖它的对象（观察者observer），观察者们接收到通知后会调用各自的处理函数。</li><li>两者之间之间关联，相互依赖。</li><li>大多数是同步的，比如当事件触发，subject就会去调用观察者的方法。</li><li>实现<div class="language-js codearea-link" id="3rbukznyhf1"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Subject</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">notify</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">observer</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        observer.</span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">      })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">addOb</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">ob</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.observers.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(ob)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Observer</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;observer&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">update</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name,</span><span style="color:#E6DB74;">&#39; reviced a notify&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> subject </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Subject</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> observer1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Observer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;ob1&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> observer2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Observer</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;ob2&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  subject.</span><span style="color:#A6E22E;">addOb</span><span style="color:#F8F8F2;">(observer1);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  subject.</span><span style="color:#A6E22E;">addOb</span><span style="color:#F8F8F2;">(observer2);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  subject.</span><span style="color:#A6E22E;">notify</span><span style="color:#F8F8F2;">();</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul><h2 id="发布订阅模式-有中间商赚差价" tabindex="-1">发布订阅模式（有中间商赚差价） <a class="header-anchor" href="#发布订阅模式-有中间商赚差价" aria-label="Permalink to &quot;发布订阅模式（有中间商赚差价）&quot;">​</a></h2><ul><li>对象状态发生变化也会通知观察者，只是通知方式被抽象为一个独立的changeManager。</li><li>发布者（publisher）和订阅者（subscriber）不是互相依赖，两者之间有一个通信结构（事件通道Event Channel）。通知逻辑由事件通道处理。</li><li>大多数是异步的，比如消息队列</li><li>实现<div class="language-js codearea-link" id="vmswlx2mhe"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">EventEmmitter</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// on addListener</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">!</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(event)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(event, fn)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//once</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">once</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">one</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(event)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(event, one)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//emit publish</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> handler </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(event);</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(handler) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        handler.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, [</span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">))</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//removeListener</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(event)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscribers.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(event)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> emmitter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">EventEmmitter</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">  emmitter.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(args,</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  });</span></span>\n<span class="line"><span style="color:#F8F8F2;">  emmitter.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;小红&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  emmitter.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">  emmitter.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;click&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;小红&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><ul><li><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/25" target="_blank" rel="noreferrer">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/25</a></li><li><a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/110" target="_blank" rel="noreferrer">https://github.com/sisterAn/JavaScript-Algorithms/issues/110</a></li></ul>', 8)
  ]));
}
const _____________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  _____________ as default
};
