import{_ as e,r as t,i as l,a as i}from"./chunks/framework.15d2e201.js";const _=JSON.parse('{"title":"数据结构与算法","description":"","frontmatter":{},"headers":[{"level":2,"title":"广度优先遍历、深度优先遍历","slug":"广度优先遍历、深度优先遍历","link":"#广度优先遍历、深度优先遍历","children":[]}],"relativePath":"start-docs/A-数据结构与算法/堆栈和队列.md","filePath":"start-docs/A-数据结构与算法/堆栈和队列.md"}'),r={name:"start-docs/A-数据结构与算法/堆栈和队列.md"};function s(o,a,n,c,d,h){return t(),l("div",null,a[0]||(a[0]=[i('<h1 id="数据结构与算法" tabindex="-1">数据结构与算法 <a class="header-anchor" href="#数据结构与算法" aria-label="Permalink to &quot;数据结构与算法&quot;">​</a></h1><h1 id="堆栈stack和队列quene" tabindex="-1">堆栈stack和队列quene <a class="header-anchor" href="#堆栈stack和队列quene" aria-label="Permalink to &quot;堆栈stack和队列quene&quot;">​</a></h1><ul><li>stack 先进后出</li><li>quene 先进先出 （特殊：双端队列）</li></ul><ol><li>判断括号字符是否有效 使用stack</li><li>用队列实现栈&amp;用栈实现队列</li></ol><h1 id="优先队列" tabindex="-1">优先队列 <a class="header-anchor" href="#优先队列" aria-label="Permalink to &quot;优先队列&quot;">​</a></h1><ul><li>一般使用堆heap或者二叉搜索树binary search tree</li><li>小顶堆或者大顶堆</li></ul><ol><li>返回数据流中的第K大的元素</li><li>返回滑动窗口中的最大值</li></ol><h2 id="广度优先遍历、深度优先遍历" tabindex="-1">广度优先遍历、深度优先遍历 <a class="header-anchor" href="#广度优先遍历、深度优先遍历" aria-label="Permalink to &quot;广度优先遍历、深度优先遍历&quot;">​</a></h2>',8)]))}const m=e(r,[["render",s]]);export{_ as __pageData,m as default};
