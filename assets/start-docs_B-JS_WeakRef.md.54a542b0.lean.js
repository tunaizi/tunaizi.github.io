import{_ as a,r as n,i as l,a as o}from"./chunks/framework.1cf9c55e.js";const d=JSON.parse('{"title":"WeakRef (弱引用)","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是 WeakRef","slug":"什么是-weakref","link":"#什么是-weakref","children":[]},{"level":2,"title":"强引用 vs 弱引用","slug":"强引用-vs-弱引用","link":"#强引用-vs-弱引用","children":[{"level":3,"title":"强引用","slug":"强引用","link":"#强引用","children":[]},{"level":3,"title":"弱引用","slug":"弱引用","link":"#弱引用","children":[]}]},{"level":2,"title":"WeakRef 的基本用法","slug":"weakref-的基本用法","link":"#weakref-的基本用法","children":[{"level":3,"title":"1. 创建弱引用","slug":"_1-创建弱引用","link":"#_1-创建弱引用","children":[]},{"level":3,"title":"2. 访问弱引用对象","slug":"_2-访问弱引用对象","link":"#_2-访问弱引用对象","children":[]},{"level":3,"title":"3. 定期检查示例","slug":"_3-定期检查示例","link":"#_3-定期检查示例","children":[]}]},{"level":2,"title":"实际应用场景","slug":"实际应用场景","link":"#实际应用场景","children":[{"level":3,"title":"1. 缓存实现","slug":"_1-缓存实现","link":"#_1-缓存实现","children":[]},{"level":3,"title":"2. 监控对象生命周期","slug":"_2-监控对象生命周期","link":"#_2-监控对象生命周期","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[{"level":3,"title":"1. 不确定性","slug":"_1-不确定性","link":"#_1-不确定性","children":[]},{"level":3,"title":"2. 性能考虑","slug":"_2-性能考虑","link":"#_2-性能考虑","children":[]},{"level":3,"title":"3. 与 WeakMap 的区别","slug":"_3-与-weakmap-的区别","link":"#_3-与-weakmap-的区别","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[{"level":3,"title":"1. 合理使用检查","slug":"_1-合理使用检查","link":"#_1-合理使用检查","children":[]},{"level":3,"title":"2. 结合 FinalizationRegistry","slug":"_2-结合-finalizationregistry","link":"#_2-结合-finalizationregistry","children":[]}]},{"level":2,"title":"浏览器支持情况","slug":"浏览器支持情况","link":"#浏览器支持情况","children":[{"level":3,"title":"主流浏览器","slug":"主流浏览器","link":"#主流浏览器","children":[]},{"level":3,"title":"移动端浏览器","slug":"移动端浏览器","link":"#移动端浏览器","children":[]}]},{"level":2,"title":"Node.js 支持情况","slug":"node-js-支持情况","link":"#node-js-支持情况","children":[]},{"level":2,"title":"兼容性解决方案","slug":"兼容性解决方案","link":"#兼容性解决方案","children":[{"level":3,"title":"1. 特性检测","slug":"_1-特性检测","link":"#_1-特性检测","children":[]},{"level":3,"title":"2. 降级方案","slug":"_2-降级方案","link":"#_2-降级方案","children":[]},{"level":3,"title":"3. 缓存实现的替代方案","slug":"_3-缓存实现的替代方案","link":"#_3-缓存实现的替代方案","children":[]},{"level":3,"title":"4. 使用 WeakMap 作为替代","slug":"_4-使用-weakmap-作为替代","link":"#_4-使用-weakmap-作为替代","children":[]}]},{"level":2,"title":"生产环境建议","slug":"生产环境建议","link":"#生产环境建议","children":[{"level":3,"title":"1. 优先使用成熟方案","slug":"_1-优先使用成熟方案","link":"#_1-优先使用成熟方案","children":[]},{"level":3,"title":"2. 使用编译工具","slug":"_2-使用编译工具","link":"#_2-使用编译工具","children":[]},{"level":3,"title":"3. 渐进增强","slug":"_3-渐进增强","link":"#_3-渐进增强","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"1. 创建注册表","slug":"_1-创建注册表","link":"#_1-创建注册表","children":[]},{"level":3,"title":"2. 注册对象","slug":"_2-注册对象","link":"#_2-注册对象","children":[]},{"level":3,"title":"3. 取消注册","slug":"_3-取消注册","link":"#_3-取消注册","children":[]}]},{"level":2,"title":"实际应用场景","slug":"实际应用场景-1","link":"#实际应用场景-1","children":[{"level":3,"title":"1. 资源清理","slug":"_1-资源清理","link":"#_1-资源清理","children":[]},{"level":3,"title":"2. 监控内存泄漏","slug":"_2-监控内存泄漏","link":"#_2-监控内存泄漏","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项-1","link":"#注意事项-1","children":[{"level":3,"title":"1. 回调执行时机不确定","slug":"_1-回调执行时机不确定","link":"#_1-回调执行时机不确定","children":[]},{"level":3,"title":"2. 避免在回调中引用相关对象","slug":"_2-避免在回调中引用相关对象","link":"#_2-避免在回调中引用相关对象","children":[]},{"level":3,"title":"1. 调试模式","slug":"_1-调试模式","link":"#_1-调试模式","children":[]}]},{"level":2,"title":"兼容性","slug":"兼容性","link":"#兼容性","children":[]}],"relativePath":"start-docs/B-JS/WeakRef.md","filePath":"start-docs/B-JS/WeakRef.md"}'),p={name:"start-docs/B-JS/WeakRef.md"};function e(F,s,t,c,r,y){return n(),l("div",null,s[0]||(s[0]=[o(`<h1 id="weakref-弱引用" tabindex="-1">WeakRef (弱引用) <a class="header-anchor" href="#weakref-弱引用" aria-label="Permalink to &quot;WeakRef (弱引用)&quot;">​</a></h1><h2 id="什么是-weakref" tabindex="-1">什么是 WeakRef <a class="header-anchor" href="#什么是-weakref" aria-label="Permalink to &quot;什么是 WeakRef&quot;">​</a></h2><p>WeakRef 是 ES2021 引入的一个新特性，它提供了一种方式来创建对象的弱引用。弱引用不会阻止垃圾回收器回收被引用的对象。</p><h2 id="强引用-vs-弱引用" tabindex="-1">强引用 vs 弱引用 <a class="header-anchor" href="#强引用-vs-弱引用" aria-label="Permalink to &quot;强引用 vs 弱引用&quot;">​</a></h2><h3 id="强引用" tabindex="-1">强引用 <a class="header-anchor" href="#强引用" aria-label="Permalink to &quot;强引用&quot;">​</a></h3><div class="language-js codearea-link" id="y2ocb3dxon"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { data: </span><span style="color:#E6DB74;">&#39;一些数据&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> reference </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj </span><span style="color:#88846F;">// 强引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 即使 obj = null，由于 reference 仍然引用着对象</span></span>
<span class="line"><span style="color:#88846F;">// 该对象不会被垃圾回收</span></span>
<span class="line"><span style="color:#F8F8F2;">obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(reference.data) </span><span style="color:#88846F;">// &#39;一些数据&#39;</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="弱引用" tabindex="-1">弱引用 <a class="header-anchor" href="#弱引用" aria-label="Permalink to &quot;弱引用&quot;">​</a></h3><div class="language-js codearea-link" id="88wj8da0mjo"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { data: </span><span style="color:#E6DB74;">&#39;一些数据&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(obj) </span><span style="color:#88846F;">// 弱引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 当 obj = null 时，如果没有其他强引用</span></span>
<span class="line"><span style="color:#88846F;">// 对象可能会被垃圾回收</span></span>
<span class="line"><span style="color:#F8F8F2;">obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 使用 deref() 来访问引用的对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weakRef.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ref?.data) </span><span style="color:#88846F;">// 如果对象还存在则显示数据，否则为 undefined</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="weakref-的基本用法" tabindex="-1">WeakRef 的基本用法 <a class="header-anchor" href="#weakref-的基本用法" aria-label="Permalink to &quot;WeakRef 的基本用法&quot;">​</a></h2><h3 id="_1-创建弱引用" tabindex="-1">1. 创建弱引用 <a class="header-anchor" href="#_1-创建弱引用" aria-label="Permalink to &quot;1. 创建弱引用&quot;">​</a></h3><div class="language-js codearea-link" id="q2p6eua0n9f"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;张三&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(target)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-访问弱引用对象" tabindex="-1">2. 访问弱引用对象 <a class="header-anchor" href="#_2-访问弱引用对象" aria-label="Permalink to &quot;2. 访问弱引用对象&quot;">​</a></h3><div class="language-js codearea-link" id="6dz8i3twdzv"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 使用 deref() 方法获取原始对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weakRef.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(obj.name) </span><span style="color:#88846F;">// &#39;张三&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象已被回收&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-定期检查示例" tabindex="-1">3. 定期检查示例 <a class="header-anchor" href="#_3-定期检查示例" aria-label="Permalink to &quot;3. 定期检查示例&quot;">​</a></h3><div class="language-js codearea-link" id="0vfz9yjkpgj"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">checkObject</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weakRef.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象仍然存在:&#39;</span><span style="color:#F8F8F2;">, obj)</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象已被回收&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">clearInterval</span><span style="color:#F8F8F2;">(intervalId)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> intervalId </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(checkObject, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><h3 id="_1-缓存实现" tabindex="-1">1. 缓存实现 <a class="header-anchor" href="#_1-缓存实现" aria-label="Permalink to &quot;1. 缓存实现&quot;">​</a></h3><div class="language-js codearea-link" id="zs5upkmfds"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Cache</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(value))</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (ref) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ref.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (value) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 如果对象已被回收，删除对应的键</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-监控对象生命周期" tabindex="-1">2. 监控对象生命周期 <a class="header-anchor" href="#_2-监控对象生命周期" aria-label="Permalink to &quot;2. 监控对象生命周期&quot;">​</a></h3><div class="language-js codearea-link" id="gk30815e0t4"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ObjectTracker</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.refs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">track</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">object</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(object)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.refs.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(ref)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> ref</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">checkObjects</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.refs) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ref.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象仍然存活:&#39;</span><span style="color:#F8F8F2;">, obj)</span></span>
<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象已被回收&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.refs.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(ref)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><h3 id="_1-不确定性" tabindex="-1">1. 不确定性 <a class="header-anchor" href="#_1-不确定性" aria-label="Permalink to &quot;1. 不确定性&quot;">​</a></h3><div class="language-js codearea-link" id="j5gx7yjui6"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { data: </span><span style="color:#E6DB74;">&#39;示例数据&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 无法保证什么时候对象会被回收</span></span>
<span class="line"><span style="color:#F8F8F2;">obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#88846F;">// weakRef.deref() 可能返回对象，也可能返回 undefined</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-性能考虑" tabindex="-1">2. 性能考虑 <a class="header-anchor" href="#_2-性能考虑" aria-label="Permalink to &quot;2. 性能考虑&quot;">​</a></h3><div class="language-js codearea-link" id="qyydbnq8oe"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ❌ 不推荐频繁调用 deref()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">badExample</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weakRef.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 每次访问都需要调用 deref()</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ref?.data)</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ref?.type)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ✅ 推荐的做法</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">goodExample</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> weakRef.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (ref) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 一次 deref() 调用，多次使用</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ref.data)</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(ref.type)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-与-weakmap-的区别" tabindex="-1">3. 与 WeakMap 的区别 <a class="header-anchor" href="#_3-与-weakmap-的区别" aria-label="Permalink to &quot;3. 与 WeakMap 的区别&quot;">​</a></h3><div class="language-js codearea-link" id="zhqovbhtzeg"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// WeakMap 用于键值对存储，键必须是对象</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakMap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">weakMap.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, </span><span style="color:#E6DB74;">&#39;数据&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// WeakRef 用于创建对任意对象的弱引用</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">({ id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> })</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><h3 id="_1-合理使用检查" tabindex="-1">1. 合理使用检查 <a class="header-anchor" href="#_1-合理使用检查" aria-label="Permalink to &quot;1. 合理使用检查&quot;">​</a></h3><div class="language-js codearea-link" id="pcvps026a1j"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">useWeakRef</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">getValue</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ref.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">value) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 处理对象已被回收的情况</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-结合-finalizationregistry" tabindex="-1">2. 结合 FinalizationRegistry <a class="header-anchor" href="#_2-结合-finalizationregistry" aria-label="Permalink to &quot;2. 结合 FinalizationRegistry&quot;">​</a></h3><div class="language-js codearea-link" id="spl2q2t9ln"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">heldValue</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象被回收:&#39;</span><span style="color:#F8F8F2;">, heldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { data: </span><span style="color:#E6DB74;">&#39;示例&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 注册对象被回收时的回调</span></span>
<span class="line"><span style="color:#F8F8F2;">registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&#39;自定义标识符&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>WeakRef 是一个强大的工具，但需要谨慎使用。它主要用于那些需要观察对象生命周期或实现高级缓存机制的场景。在普通应用中，通常不需要直接使用 WeakRef。</p><p>主要特点：</p><ol><li>WeakRef 创建的是对象的弱引用，不会阻止垃圾回收</li><li>需要使用 deref() 方法来访问被引用的对象</li><li>适用于缓存、监控等高级场景</li><li>具有不确定性，被引用对象可能随时被回收</li></ol><p>使用场景：</p><ol><li>实现缓存系统</li><li>监控对象生命周期</li><li>需要避免内存泄漏的场景</li></ol><p>需要注意的是，WeakRef 是一个相对较新的特性，主要用于特定的高级场景，普通开发中较少直接使用。</p><h1 id="weakref-兼容性" tabindex="-1">WeakRef 兼容性 <a class="header-anchor" href="#weakref-兼容性" aria-label="Permalink to &quot;WeakRef 兼容性&quot;">​</a></h1><h2 id="浏览器支持情况" tabindex="-1">浏览器支持情况 <a class="header-anchor" href="#浏览器支持情况" aria-label="Permalink to &quot;浏览器支持情况&quot;">​</a></h2><h3 id="主流浏览器" tabindex="-1">主流浏览器 <a class="header-anchor" href="#主流浏览器" aria-label="Permalink to &quot;主流浏览器&quot;">​</a></h3><ul><li>Chrome: 84+ (2020 年 7 月)</li><li>Firefox: 79+ (2020 年 7 月)</li><li>Safari: 15.2+ (2021 年 12 月)</li><li>Edge: 84+ (2020 年 7 月)</li><li>Opera: 70+ (2020 年 7 月)</li></ul><h3 id="移动端浏览器" tabindex="-1">移动端浏览器 <a class="header-anchor" href="#移动端浏览器" aria-label="Permalink to &quot;移动端浏览器&quot;">​</a></h3><ul><li>Android Chrome: 84+</li><li>iOS Safari: 15.2+</li><li>Samsung Internet: 14.0+</li></ul><h2 id="node-js-支持情况" tabindex="-1">Node.js 支持情况 <a class="header-anchor" href="#node-js-支持情况" aria-label="Permalink to &quot;Node.js 支持情况&quot;">​</a></h2><ul><li>Node.js 14.6.0+ (需要使用 --harmony-weak-refs 标志)</li><li>Node.js 15.0.0+ (完全支持)</li></ul><h2 id="兼容性解决方案" tabindex="-1">兼容性解决方案 <a class="header-anchor" href="#兼容性解决方案" aria-label="Permalink to &quot;兼容性解决方案&quot;">​</a></h2><h3 id="_1-特性检测" tabindex="-1">1. 特性检测 <a class="header-anchor" href="#_1-特性检测" aria-label="Permalink to &quot;1. 特性检测&quot;">​</a></h3><div class="language-js codearea-link" id="g9c89y675j"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 支持 WeakRef</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(object)</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 不支持 WeakRef，使用替代方案</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> normalRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> object</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-降级方案" tabindex="-1">2. 降级方案 <a class="header-anchor" href="#_2-降级方案" aria-label="Permalink to &quot;2. 降级方案&quot;">​</a></h3><div class="language-js codearea-link" id="6cpla2n3gr9"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">WeakRefPolyfill</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">._target </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">._target</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 使用方式</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> WeakRefImpl </span><span style="color:#F92672;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> WeakRefPolyfill</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-缓存实现的替代方案" tabindex="-1">3. 缓存实现的替代方案 <a class="header-anchor" href="#_3-缓存实现的替代方案" aria-label="Permalink to &quot;3. 缓存实现的替代方案&quot;">​</a></h3><div class="language-js codearea-link" id="ti2yl5vbm4a"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Cache</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 如果不支持 WeakRef，使用 WeakMap</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(value))</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> ref.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_4-使用-weakmap-作为替代" tabindex="-1">4. 使用 WeakMap 作为替代 <a class="header-anchor" href="#_4-使用-weakmap-作为替代" aria-label="Permalink to &quot;4. 使用 WeakMap 作为替代&quot;">​</a></h3><div class="language-js codearea-link" id="zjze6ri9ssp"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 不使用 WeakRef</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> cache </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">store</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">metadata</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(obj, metadata)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">retrieve</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(obj)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="生产环境建议" tabindex="-1">生产环境建议 <a class="header-anchor" href="#生产环境建议" aria-label="Permalink to &quot;生产环境建议&quot;">​</a></h2><h3 id="_1-优先使用成熟方案" tabindex="-1">1. 优先使用成熟方案 <a class="header-anchor" href="#_1-优先使用成熟方案" aria-label="Permalink to &quot;1. 优先使用成熟方案&quot;">​</a></h3><div class="language-js codearea-link" id="rzi3of7y1mg"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 优先使用 WeakMap</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakMap </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 而不是</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> weakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(obj)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-使用编译工具" tabindex="-1">2. 使用编译工具 <a class="header-anchor" href="#_2-使用编译工具" aria-label="Permalink to &quot;2. 使用编译工具&quot;">​</a></h3><div class="language-json codearea-link" id="9dgjywk0lzo"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// babel 配置</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">&quot;presets&quot;</span><span style="color:#F8F8F2;">: [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#CFCFC2;">&quot;@babel/preset-env&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">&quot;targets&quot;</span><span style="color:#F8F8F2;">: {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#66D9EF;font-style:italic;">&quot;browsers&quot;</span><span style="color:#F8F8F2;">: [</span><span style="color:#CFCFC2;">&quot;last 2 versions&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#CFCFC2;">&quot;not dead&quot;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-渐进增强" tabindex="-1">3. 渐进增强 <a class="header-anchor" href="#_3-渐进增强" aria-label="Permalink to &quot;3. 渐进增强&quot;">​</a></h3><div class="language-js codearea-link" id="fnclnc66u3"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ModernCache</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.supportsWeakRef </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> WeakRef </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.supportsWeakRef </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakMap</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.supportsWeakRef) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(value))</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.supportsWeakRef) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> ref.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cache.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li><p><strong>支持情况</strong></p><ul><li>现代浏览器基本支持</li><li>移动端支持相对较新</li><li>Node.js 14.6.0+ 支持</li></ul></li><li><p><strong>使用建议</strong></p><ul><li>生产环境谨慎使用</li><li>需要提供降级方案</li><li>考虑使用 WeakMap 等成熟替代方案</li></ul></li><li><p><strong>最佳实践</strong></p><ul><li>进行特性检测</li><li>提供降级方案</li><li>使用编译工具确保兼容性</li><li>优先考虑成熟的替代方案</li></ul></li></ol><h1 id="关于终结器注册表" tabindex="-1">关于终结器注册表 <a class="header-anchor" href="#关于终结器注册表" aria-label="Permalink to &quot;关于终结器注册表&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p>FinalizationRegistry 是 ES2021 引入的特性，用于在对象被垃圾回收时执行一些清理操作。它允许你注册一个回调函数，当被注册的对象被垃圾回收时，这个回调函数会被调用。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><h3 id="_1-创建注册表" tabindex="-1">1. 创建注册表 <a class="header-anchor" href="#_1-创建注册表" aria-label="Permalink to &quot;1. 创建注册表&quot;">​</a></h3><div class="language-js codearea-link" id="2o6uninwxn2"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">heldValue</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 当注册的对象被回收时，这个回调会被调用</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象被回收了:&#39;</span><span style="color:#F8F8F2;">, heldValue)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-注册对象" tabindex="-1">2. 注册对象 <a class="header-anchor" href="#_2-注册对象" aria-label="Permalink to &quot;2. 注册对象&quot;">​</a></h3><div class="language-js codearea-link" id="ts28ef8hon"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;测试对象&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// register(target, heldValue, unregisterToken?)</span></span>
<span class="line"><span style="color:#F8F8F2;">registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&#39;对象1&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// obj = null; // 当对象不再被引用时，最终会被回收</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-取消注册" tabindex="-1">3. 取消注册 <a class="header-anchor" href="#_3-取消注册" aria-label="Permalink to &quot;3. 取消注册&quot;">​</a></h3><div class="language-js codearea-link" id="w10mtqesg1f"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> token </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { unregisterToken: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 使用 token 注册</span></span>
<span class="line"><span style="color:#F8F8F2;">registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&#39;对象1&#39;</span><span style="color:#F8F8F2;">, token)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 使用 token 取消注册</span></span>
<span class="line"><span style="color:#F8F8F2;">registry.</span><span style="color:#A6E22E;">unregister</span><span style="color:#F8F8F2;">(token)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实际应用场景-1" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景-1" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><h3 id="_1-资源清理" tabindex="-1">1. 资源清理 <a class="header-anchor" href="#_1-资源清理" aria-label="Permalink to &quot;1. 资源清理&quot;">​</a></h3><div class="language-js codearea-link" id="ol221c82tl8"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ResourceManager</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.cleanup.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">))</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.resources </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">allocate</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">resource</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.resources.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(key, resource)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(resource, key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">cleanup</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`清理资源: </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">key</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.resources.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(key)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-监控内存泄漏" tabindex="-1">2. 监控内存泄漏 <a class="header-anchor" href="#_2-监控内存泄漏" aria-label="Permalink to &quot;2. 监控内存泄漏&quot;">​</a></h3><div class="language-js codearea-link" id="nt5rwwmj58e"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">MemoryLeakDetector</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`组件 </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> 已被垃圾回收\`</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.components </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">track</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">component</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.components.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(component)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(component, name)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="注意事项-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><h3 id="_1-回调执行时机不确定" tabindex="-1">1. 回调执行时机不确定 <a class="header-anchor" href="#_1-回调执行时机不确定" aria-label="Permalink to &quot;1. 回调执行时机不确定&quot;">​</a></h3><div class="language-js codearea-link" id="izgscbwgnth"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 这个回调的执行时机是不确定的</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 不要在这里执行时间敏感的操作</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;对象被回收:&#39;</span><span style="color:#F8F8F2;">, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E6DB74;">&#39;test&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>
<span class="line"><span style="color:#88846F;">// 垃圾回收和回调执行的时间是不确定的</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-避免在回调中引用相关对象" tabindex="-1">2. 避免在回调中引用相关对象 <a class="header-anchor" href="#_2-避免在回调中引用相关对象" aria-label="Permalink to &quot;2. 避免在回调中引用相关对象&quot;">​</a></h3><div class="language-js codearea-link" id="jo6xiiw24uh"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ❌ 错误示例</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 不要在回调中引用可能被回收的对象</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(obj.someProperty) </span><span style="color:#88846F;">// 可能导致错误</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ✅ 正确示例</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 只使用传入的 value</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;清理:&#39;</span><span style="color:#F8F8F2;">, value)</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_1-调试模式" tabindex="-1">1. 调试模式 <a class="header-anchor" href="#_1-调试模式" aria-label="Permalink to &quot;1. 调试模式&quot;">​</a></h3><div class="language-js codearea-link" id="iwkmbjr8fxd"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">DebugRegistry</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.registry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">FinalizationRegistry</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">info</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`[</span><span style="color:#F92672;">\${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">] 对象被回收:\`</span><span style="color:#F8F8F2;">, info)</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">trace</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;回收堆栈&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">track</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">info</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.registry.</span><span style="color:#A6E22E;">register</span><span style="color:#F8F8F2;">(obj, {</span></span>
<span class="line"><span style="color:#F8F8F2;">      time: </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Date</span><span style="color:#F8F8F2;">(),</span></span>
<span class="line"><span style="color:#F8F8F2;">      info</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2><ul><li>Chrome 84+</li><li>Firefox 79+</li><li>Safari 15.2+</li><li>Node.js 14.6.0+ (使用 --harmony 标志)</li><li>Node.js 15.0.0+ (完全支持)</li></ul><div class="warning custom-block"><p class="custom-block-title">注意</p><p>FinalizationRegistry 主要用于调试和特殊场景的资源清理，不应该用于关键业务逻辑，因为其回调执行时机是不确定的。</p></div>`,89)]))}const u=a(p,[["render",e]]);export{d as __pageData,u as default};
