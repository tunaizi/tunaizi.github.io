import{_ as n,r as a,i as l,a as o}from"./chunks/framework.1cf9c55e.js";const d=JSON.parse('{"title":"with 语法","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本介绍","slug":"基本介绍","link":"#基本介绍","children":[]},{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"为什么不推荐使用","slug":"为什么不推荐使用","link":"#为什么不推荐使用","children":[]},{"level":2,"title":"[Symbol.unscopables] 的作用","slug":"symbol-unscopables-的作用","link":"#symbol-unscopables-的作用","children":[]},{"level":2,"title":"替代方案","slug":"替代方案","link":"#替代方案","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"start-docs/B-JS/with语法.md","filePath":"start-docs/B-JS/with语法.md"}'),p={name:"start-docs/B-JS/with语法.md"};function e(t,s,c,r,F,i){return a(),l("div",null,s[0]||(s[0]=[o(`<h1 id="with-语法" tabindex="-1">with 语法 <a class="header-anchor" href="#with-语法" aria-label="Permalink to &quot;with 语法&quot;">​</a></h1><h2 id="基本介绍" tabindex="-1">基本介绍 <a class="header-anchor" href="#基本介绍" aria-label="Permalink to &quot;基本介绍&quot;">​</a></h2><p><code>with</code> 语句是一个在 JavaScript 中存在但不推荐使用的语法特性。它的作用是将某个对象添加到作用域链的顶部。</p><h2 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h2><div class="language-js codearea-link" id="3f2w2mpazoe"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> (对象) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 这里的代码可以直接访问对象的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 而不需要重复引用对象名</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><div class="language-js codearea-link" id="nnulguny01"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&#39;张三&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    age: </span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    city: </span><span style="color:#E6DB74;">&#39;北京&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 不使用 with</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(person.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(person.age);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(person.city);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 使用 with</span></span>
<span class="line"><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> (person) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(name);    </span><span style="color:#88846F;">// &#39;张三&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(age);     </span><span style="color:#88846F;">// 25</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(city);    </span><span style="color:#88846F;">// &#39;北京&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="为什么不推荐使用" tabindex="-1">为什么不推荐使用 <a class="header-anchor" href="#为什么不推荐使用" aria-label="Permalink to &quot;为什么不推荐使用&quot;">​</a></h2><ol><li><p><strong>性能问题</strong>：JavaScript 引擎无法在编译时优化 <code>with</code> 语句块内的代码</p></li><li><p><strong>可读性问题</strong>：代码的作用域变得不清晰，难以追踪变量的来源</p></li><li><p><strong>歧义问题</strong>：如果变量名与对象属性名冲突，可能导致意外的行为</p></li></ol><div class="language-js codearea-link" id="1g8zbivwxj3"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;李四&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> { name: </span><span style="color:#E6DB74;">&#39;张三&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> (person) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(name); </span><span style="color:#88846F;">// &#39;张三&#39;，而不是 &#39;李四&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="4"><li><strong>严格模式禁用</strong>：在 ES5 的严格模式（&#39;use strict&#39;）下，<code>with</code> 语句是被禁用的</li></ol><h2 id="symbol-unscopables-的作用" tabindex="-1">[Symbol.unscopables] 的作用 <a class="header-anchor" href="#symbol-unscopables-的作用" aria-label="Permalink to &quot;[Symbol.unscopables] 的作用&quot;">​</a></h2><p>这个 Symbol 属性用于指定哪些属性不能在 <code>with</code> 语句中被访问：</p><div class="language-js codearea-link" id="d21vorc5oln"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    a: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    b: </span><span style="color:#AE81FF;">2</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">obj[Symbol.unscopables] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    b: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 将 b 属性标记为不可作用域</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">with</span><span style="color:#F8F8F2;"> (obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#88846F;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#88846F;">// ReferenceError: b is not defined</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="替代方案" tabindex="-1">替代方案 <a class="header-anchor" href="#替代方案" aria-label="Permalink to &quot;替代方案&quot;">​</a></h2><ol><li><strong>直接使用对象</strong></li></ol><div class="language-js codearea-link" id="mwtc8vegbd"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> person </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E6DB74;">&#39;张三&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    age: </span><span style="color:#AE81FF;">25</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(person.name, person.age);</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="2"><li><strong>使用解构赋值</strong></li></ol><div class="language-js codearea-link" id="myglj8uvcu"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> { name, age } </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> person;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(name, age);</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="3"><li><strong>使用临时变量</strong></li></ol><div class="language-js codearea-link" id="vp74wb3lru"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> p </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> person;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(p.name, p.age);</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>虽然 <code>with</code> 语句在某些场景下可以减少代码量，但由于其带来的问题和限制，在现代 JavaScript 开发中应该避免使用。推荐使用解构赋值等更清晰、安全的替代方案。</p>`,23)]))}const u=n(p,[["render",e]]);export{d as __pageData,u as default};
