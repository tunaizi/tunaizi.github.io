import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.6235ba6c.js";
const __pageData = JSON.parse('{"title":"JS 常用方法原理实现","description":"","frontmatter":{},"headers":[{"level":2,"title":"instanceof 原理","slug":"instanceof-原理","link":"#instanceof-原理","children":[]},{"level":2,"title":"Object.create 原理","slug":"object-create-原理","link":"#object-create-原理","children":[]},{"level":2,"title":"new 原理","slug":"new-原理","link":"#new-原理","children":[]},{"level":2,"title":"setTimout 模拟实现 setInterval 原理","slug":"settimout-模拟实现-setinterval-原理","link":"#settimout-模拟实现-setinterval-原理","children":[]},{"level":2,"title":"使用 requestAnimationFrame 实现 setInterval","slug":"使用-requestanimationframe-实现-setinterval","link":"#使用-requestanimationframe-实现-setinterval","children":[]},{"level":2,"title":"ajax 原理","slug":"ajax-原理","link":"#ajax-原理","children":[]},{"level":2,"title":"实现一个 reduce","slug":"实现一个-reduce","link":"#实现一个-reduce","children":[]},{"level":2,"title":"实现一个 String.prototype._trim 函数","slug":"实现一个-string-prototype-trim-函数","link":"#实现一个-string-prototype-trim-函数","children":[]},{"level":2,"title":"实现 parsetInt","slug":"实现-parsetint","link":"#实现-parsetint","children":[]},{"level":2,"title":"自定义 myParseInt 函数","slug":"自定义-myparseint-函数","link":"#自定义-myparseint-函数","children":[{"level":3,"title":"实现步骤","slug":"实现步骤","link":"#实现步骤","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]},{"level":2,"title":"排除元素的 Number 和 parseInt，用 JS 代码实现 String 转 Number？","slug":"排除元素的-number-和-parseint-用-js-代码实现-string-转-number","link":"#排除元素的-number-和-parseint-用-js-代码实现-string-转-number","children":[]},{"level":2,"title":"实现数组扁平化及排序","slug":"实现数组扁平化及排序","link":"#实现数组扁平化及排序","children":[{"level":3,"title":"参考[https://juejin.cn/post/6844903891591495693]","slug":"参考-https-juejin-cn-post-6844903891591495693","link":"#参考-https-juejin-cn-post-6844903891591495693","children":[]}]}],"relativePath":"start-docs/B-JS/常用方法原理实现.md","filePath":"start-docs/B-JS/常用方法原理实现.md"}');
const _sfc_main = { name: "start-docs/B-JS/常用方法原理实现.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="js-常用方法原理实现" tabindex="-1">JS 常用方法原理实现 <a class="header-anchor" href="#js-常用方法原理实现" aria-label="Permalink to &quot;JS 常用方法原理实现&quot;">​</a></h1><h2 id="instanceof-原理" tabindex="-1">instanceof 原理 <a class="header-anchor" href="#instanceof-原理" aria-label="Permalink to &quot;instanceof 原理&quot;">​</a></h2><div class="language-js codearea-link" id="nm5e47316hi"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">//原理  left.__proto === right.prototype</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myInstanceof</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">left</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">right</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> leftValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> left.__proto__</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> rightValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">right</span><span style="color:#F8F8F2;">.prototype</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (leftValue </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (leftValue </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> rightValue) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    leftValue </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> leftValue.__proto__</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">Function </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Object</span></span>\n<span class="line"><span style="color:#A6E22E;">myInstanceof</span><span style="color:#F8F8F2;">(Function, Object)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="object-create-原理" tabindex="-1">Object.create 原理 <a class="header-anchor" href="#object-create-原理" aria-label="Permalink to &quot;Object.create 原理&quot;">​</a></h2><div class="language-js codearea-link" id="eb24fbnuj5"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">F</span><span style="color:#F8F8F2;">() {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">F</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">F</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="new-原理" tabindex="-1">new 原理 <a class="header-anchor" href="#new-原理" aria-label="Permalink to &quot;new 原理&quot;">​</a></h2><div class="language-js codearea-link" id="c3ul0caqod6"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myNew</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> Constructor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [].shift.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  obj.__proto__ </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Constructor</span><span style="color:#F8F8F2;">.prototype</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Constructor.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> obj</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> car </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myNew</span><span style="color:#F8F8F2;">(Car)(</span><span style="color:#E6DB74;">&#39;redCar&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="settimout-模拟实现-setinterval-原理" tabindex="-1">setTimout 模拟实现 setInterval 原理 <a class="header-anchor" href="#settimout-模拟实现-setinterval-原理" aria-label="Permalink to &quot;setTimout 模拟实现 setInterval 原理&quot;">​</a></h2><div class="language-js codearea-link" id="qt9p2l0juzb"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myInterval</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> timer </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loop</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(loop, delay)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(loop, delay)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello interval&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">myInterval</span><span style="color:#F8F8F2;">(fn, </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(fn, </span><span style="color:#AE81FF;">2000</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="使用-requestanimationframe-实现-setinterval" tabindex="-1">使用 requestAnimationFrame 实现 setInterval <a class="header-anchor" href="#使用-requestanimationframe-实现-setinterval" aria-label="Permalink to &quot;使用 requestAnimationFrame 实现 setInterval&quot;">​</a></h2><div class="language-js codearea-link" id="6mplhinx6y9"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myInterval</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> startTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#A6E22E;">now</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">loop</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (Date.</span><span style="color:#A6E22E;">now</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> startTime </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> delay) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">      startTime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#A6E22E;">now</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> window </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">//node环境中使用setImmediate</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">setImmediate</span><span style="color:#F8F8F2;">(loop)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">requestAnimationFrame</span><span style="color:#F8F8F2;">(loop)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">loop</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello interval&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">myInterval</span><span style="color:#F8F8F2;">(fn, </span><span style="color:#AE81FF;">3000</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="ajax-原理" tabindex="-1">ajax 原理 <a class="header-anchor" href="#ajax-原理" aria-label="Permalink to &quot;ajax 原理&quot;">​</a></h2><div class="language-js codearea-link" id="u11oultmkwt"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myAjax</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">url</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> xhr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">XMLHttpRequest</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  xhr.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;GET&#39;</span><span style="color:#F8F8F2;">, url, </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  xhr.</span><span style="color:#A6E22E;">onreadstatechange</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span></span>\n<span class="line"><span style="color:#F8F8F2;">      (xhr.readyState </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> xhr.status </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">200</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">||</span></span>\n<span class="line"><span style="color:#F8F8F2;">      xhr.status </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">304</span></span>\n<span class="line"><span style="color:#F8F8F2;">    ) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, xhr.responseText)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  xhr.</span><span style="color:#A6E22E;">send</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实现一个-reduce" tabindex="-1">实现一个 reduce <a class="header-anchor" href="#实现一个-reduce" aria-label="Permalink to &quot;实现一个 reduce&quot;">​</a></h2><div class="language-js codearea-link" id="ps7luqfgru"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">init</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> _arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> init </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> [].</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(arr, init) </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">arr]</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> prev </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> _arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> _arr.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    curr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> _arr[i]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    prev </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, [prev, curr])</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prev</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> init </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>\n<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">(fn, init) </span><span style="color:#88846F;">// 6</span></span>\n<span class="line"><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">(arr, fn, init)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实现一个-string-prototype-trim-函数" tabindex="-1">实现一个 String.prototype._trim 函数 <a class="header-anchor" href="#实现一个-string-prototype-trim-函数" aria-label="Permalink to &quot;实现一个 String.prototype.\\_trim 函数&quot;">​</a></h2><div class="language-js codearea-link" id="1v3cyjdmsw"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">_trim</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/(</span><span style="color:#F92672;">^</span><span style="color:#AE81FF;">\\s</span><span style="color:#F92672;">*</span><span style="color:#E6DB74;">)</span><span style="color:#F92672;">|</span><span style="color:#E6DB74;">(</span><span style="color:#AE81FF;">\\s</span><span style="color:#F92672;">*$</span><span style="color:#E6DB74;">)/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">String</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">_trim</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> strs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> startIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    endIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> strs.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> strs.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (strs.</span><span style="color:#A6E22E;">charAt</span><span style="color:#F8F8F2;">(i) </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39; &#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      startIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (startIndex </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> endIndex; i </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (strs.charAt[i] </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39; &#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      endIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> strs.</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(startIndex, endIndex)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实现-parsetint" tabindex="-1">实现 parsetInt <a class="header-anchor" href="#实现-parsetint" aria-label="Permalink to &quot;实现 parsetInt&quot;">​</a></h2><div class="language-js codearea-link" id="j8ojco8v0r"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 成功解析为整数</span></span>\n<span class="line"><span style="color:#88846F;">// 十进制解析</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">//123</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;   456&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 456</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;-789&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// -789</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;+100&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 100</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 二进制解析</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;101&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 5</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0b110&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 八进制解析</span></span>\n<span class="line"><span style="color:#88846F;">// 非严格模式下</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;010&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 10</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 8</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 十六进制解析</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0xf&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 15</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;f&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 15</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 其他进制解析（2 - 36 之间）</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;z&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">36</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 35</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 返回 NaN 的情况</span></span>\n<span class="line"><span style="color:#88846F;">// 字符串为空</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 首个非空白字符无法转换</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;  a123&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// radix 不在有效范围</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">37</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 包含无效字符</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;12a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 12</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="自定义-myparseint-函数" tabindex="-1">自定义 <code>myParseInt</code> 函数 <a class="header-anchor" href="#自定义-myparseint-函数" aria-label="Permalink to &quot;自定义 `myParseInt` 函数&quot;">​</a></h2><p>为了实现一个功能一致的 <code>myParseInt</code> 函数，我们需要手动处理以下几点：</p><ul><li>去除字符串前后的空白字符。</li><li>处理正负号。</li><li>处理不同的进制（基数）。</li><li>处理非数字字符。</li><li>返回解析后的整数或 <code>NaN</code>。</li></ul><h3 id="实现步骤" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h3><ol><li><strong>去除空白字符</strong>：使用 <code>trim()</code> 方法去除字符串前后的空白字符。</li><li><strong>处理正负号</strong>：检查字符串的第一个字符是否为 <code>+</code> 或 <code>-</code>，并记录符号。</li><li><strong>处理进制</strong>：检查字符串是否包含进制前缀（如 <code>0x</code> 或 <code>0X</code>），并确定基数。</li><li><strong>解析数字</strong>：从字符串中提取数字字符，直到遇到非数字字符。</li><li><strong>返回结果</strong>：根据符号和基数将提取的数字字符串转换为整数，如果无法解析则返回 <code>NaN</code>。</li></ol><h3 id="代码实现" tabindex="-1">代码实现 <a class="header-anchor" href="#代码实现" aria-label="Permalink to &quot;代码实现&quot;">​</a></h3><div class="language-js codearea-link" id="lbrla3605xq"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">str</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">radix</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 去除字符串前后的空白字符</span></span>\n<span class="line"><span style="color:#F8F8F2;">  str </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> str.</span><span style="color:#A6E22E;">trim</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 处理空字符串</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (str.length </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 处理正负号</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> sign </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> startIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (str[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;+&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    startIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (str[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;-&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    sign </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">    startIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 处理进制</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (radix </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">void</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> radix </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    radix </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (radix </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> radix </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">36</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 处理 0x 或 0X 前缀</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span></span>\n<span class="line"><span style="color:#F8F8F2;">    radix </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    str[startIndex] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;0&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    (str[startIndex </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;x&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> str[startIndex </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;X&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    radix </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">16</span></span>\n<span class="line"><span style="color:#F8F8F2;">    startIndex </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 解析数字</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> validDigit </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> startIndex; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> str.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> str[i]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> digit </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 处理 0-9 数字</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (char </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;0&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;9&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      digit </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> char.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;0&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 处理 a-f 数字</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (char </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;f&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      digit </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> char.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 处理 A-F 数字</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (char </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;F&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      digit </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> char.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;A&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 如果 digit 无效，停止解析</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (digit </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> digit </span><span style="color:#F92672;">&gt;=</span><span style="color:#F8F8F2;"> radix) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">break</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> radix </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> digit</span></span>\n<span class="line"><span style="color:#F8F8F2;">    validDigit </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 如果没有有效的数字字符，返回 NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">validDigit) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> sign </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> result</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 测试用例</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;   123   &#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 123</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;123abc&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 123</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;abc123&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0x1A&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 26</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0X1A&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 26</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 2</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 8</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 16</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">36</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 36</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">37</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// NaN</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 10</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;+123&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 123</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;-123&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// -123</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0x10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">16</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 16</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0x10&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 0</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;0x10&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 16</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;010&#39;</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 8 (默认八进制)</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">myParseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;010&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">)) </span><span style="color:#88846F;">// 10 (指定十进制)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="排除元素的-number-和-parseint-用-js-代码实现-string-转-number" tabindex="-1">排除元素的 Number 和 parseInt，用 JS 代码实现 String 转 Number？ <a class="header-anchor" href="#排除元素的-number-和-parseint-用-js-代码实现-string-转-number" aria-label="Permalink to &quot;排除元素的 Number 和 parseInt，用 JS 代码实现 String 转 Number？&quot;">​</a></h2><div class="language-js codearea-link" id="288couro1ly"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">strToNum</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">string</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> chars </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> string.</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">c</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> c.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;0&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">));</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> char </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> chars) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">*=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> char;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> n;</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6E22E;">strToNum</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;1002&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>方案 1： slice 实现</li></ul><div class="language-js codearea-link" id="5mi5qsn68wq"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">_splice</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">start</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">deleteCount</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">addList</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(start, deleteCount, addList)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (start </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    start </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">abs</span><span style="color:#F8F8F2;">(start) </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.length </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> start </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.length</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> deleteCount </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;undefined&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    deleteCount </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> start</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> removeList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(start, start </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> deleteCount)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//更改原数组</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> right </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(start </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> deleteCount)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> addIndex </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> start</span></span>\n<span class="line"><span style="color:#F8F8F2;">  addList.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(right).</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">[addIndex] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> item</span></span>\n<span class="line"><span style="color:#F8F8F2;">    addIndex</span><span style="color:#F92672;">++</span></span>\n<span class="line"><span style="color:#F8F8F2;">  })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.length </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> addIndex</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> removeList</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>参考[<a href="https://github.com/sisterAn/JavaScript-Algorithms/issues/138" target="_blank" rel="noreferrer">https://github.com/sisterAn/JavaScript-Algorithms/issues/138</a>]</p><h2 id="实现数组扁平化及排序" tabindex="-1">实现数组扁平化及排序 <a class="header-anchor" href="#实现数组扁平化及排序" aria-label="Permalink to &quot;实现数组扁平化及排序&quot;">​</a></h2><div class="language-js codearea-link" id="c22ls9pz17j"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">21</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">93</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]], [</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">53</span><span style="color:#F8F8F2;">]]</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> arr</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(num))</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> b)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(arr)</span></span>\n<span class="line"><span style="color:#88846F;">//去重+扁平化+排序</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">21</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">30</span><span style="color:#F8F8F2;">, [</span><span style="color:#AE81FF;">93</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]], [</span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">53</span><span style="color:#F8F8F2;">]]</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">flat2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> [</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">...new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">(</span></span>\n<span class="line"><span style="color:#F8F8F2;">      arr</span></span>\n<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(num))</span></span>\n<span class="line"><span style="color:#F8F8F2;">        .</span><span style="color:#A6E22E;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> b)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    )</span></span>\n<span class="line"><span style="color:#F8F8F2;">  ]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">flat2</span><span style="color:#F8F8F2;">(arr)</span></span>\n<span class="line"><span style="color:#88846F;">// reduce方式</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">flat3</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">acc</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">cur</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (Array.</span><span style="color:#A6E22E;">isArray</span><span style="color:#F8F8F2;">(cur)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      cur </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">flat</span><span style="color:#F8F8F2;">(cur)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> acc.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(cur)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }, [])</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="参考-https-juejin-cn-post-6844903891591495693" tabindex="-1">参考[<a href="https://juejin.cn/post/6844903891591495693" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903891591495693</a>] <a class="header-anchor" href="#参考-https-juejin-cn-post-6844903891591495693" aria-label="Permalink to &quot;参考[https://juejin.cn/post/6844903891591495693]&quot;">​</a></h3>', 34)
  ]));
}
const ________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  ________ as default
};
