import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"项目需要迭代","description":"","frontmatter":{},"headers":[{"level":2,"title":"版本号规范","slug":"版本号规范","link":"#版本号规范","children":[]},{"level":2,"title":"版本管理","slug":"版本管理","link":"#版本管理","children":[]},{"level":2,"title":"Git 的诞生","slug":"git-的诞生","link":"#git-的诞生","children":[]},{"level":2,"title":"集中式 vs 分布式","slug":"集中式-vs-分布式","link":"#集中式-vs-分布式","children":[]},{"level":2,"title":"Git的三棵树","slug":"git的三棵树","link":"#git的三棵树","children":[]},{"level":2,"title":"add：工作区->暂存区","slug":"add-工作区-暂存区","link":"#add-工作区-暂存区","children":[]},{"level":2,"title":"commit：暂存区->代码库","slug":"commit-暂存区-代码库","link":"#commit-暂存区-代码库","children":[]},{"level":2,"title":"修改内容-查看状态","slug":"修改内容-查看状态","link":"#修改内容-查看状态","children":[{"level":3,"title":"哪些文件被修改了","slug":"哪些文件被修改了","link":"#哪些文件被修改了","children":[]},{"level":3,"title":"文件中哪段内容被修改了","slug":"文件中哪段内容被修改了","link":"#文件中哪段内容被修改了","children":[]}]},{"level":2,"title":"重新提交","slug":"重新提交","link":"#重新提交","children":[]},{"level":2,"title":"log 日志","slug":"log-日志","link":"#log-日志","children":[]},{"level":2,"title":"版本回退(版本库->工作区)","slug":"版本回退-版本库-工作区","link":"#版本回退-版本库-工作区","children":[]},{"level":2,"title":"工作区（Working Directory）","slug":"工作区-working-directory","link":"#工作区-working-directory","children":[]},{"level":2,"title":"版本库（Repository）","slug":"版本库-repository","link":"#版本库-repository","children":[]},{"level":2,"title":"流程","slug":"流程","link":"#流程","children":[]},{"level":2,"title":"工作区->工作区","slug":"工作区-工作区","link":"#工作区-工作区","children":[]},{"level":2,"title":"暂存区->工作区","slug":"暂存区-工作区","link":"#暂存区-工作区","children":[]},{"level":2,"title":"版本库->工作区","slug":"版本库-工作区","link":"#版本库-工作区","children":[]},{"level":2,"title":"GitHub","slug":"github","link":"#github","children":[]},{"level":2,"title":"网络备份","slug":"网络备份","link":"#网络备份","children":[{"level":3,"title":"生成本地密钥","slug":"生成本地密钥","link":"#生成本地密钥","children":[]},{"level":3,"title":"GitHub授权","slug":"github授权","link":"#github授权","children":[]}]},{"level":2,"title":"添加远程代码仓库","slug":"添加远程代码仓库","link":"#添加远程代码仓库","children":[]},{"level":2,"title":"SSH警告","slug":"ssh警告","link":"#ssh警告","children":[]},{"level":2,"title":"把远程代码仓库克隆到本地","slug":"把远程代码仓库克隆到本地","link":"#把远程代码仓库克隆到本地","children":[]},{"level":2,"title":"branch创建和切换","slug":"branch创建和切换","link":"#branch创建和切换","children":[]},{"level":2,"title":"merge分支合并","slug":"merge分支合并","link":"#merge分支合并","children":[]},{"level":2,"title":"删除分支","slug":"删除分支","link":"#删除分支","children":[]},{"level":2,"title":"小结","slug":"小结-1","link":"#小结-1","children":[]},{"level":2,"title":"解决冲突","slug":"解决冲突","link":"#解决冲突","children":[]}],"relativePath":"start-docs/E-md/git.md","filePath":"start-docs/E-md/git.md"}');
const _sfc_main = { name: "start-docs/E-md/git.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="项目需要迭代" tabindex="-1">项目需要迭代 <a class="header-anchor" href="#项目需要迭代" aria-label="Permalink to &quot;项目需要迭代&quot;">​</a></h1><p>我们开发的应用程序是需要不断的迭代的，比如 version 1.0 、version 2.5 、version 3.9.11，这些指的都是版本号。</p><p>不同版本号的应用程序，里面的功能都是不一样的，比如我们做一个名字叫做 project1 的应用，v1.0时可能仅仅只是基础框架，v1.1时增加用户中心模块，然后用了一段时间出现了一个致命的bug，然后我们把 project1 升级到了 v1.1.1 解决了这个bug，所以说应用程序是需要不断的迭代的。</p><h2 id="版本号规范" tabindex="-1">版本号规范 <a class="header-anchor" href="#版本号规范" aria-label="Permalink to &quot;版本号规范&quot;">​</a></h2><blockquote><p>版本号有很多种规范，下面列出的是 Net Framework 风格版本号</p></blockquote><p>主版本号.子版本号.修正版本号</p><ul><li>Major ：主版本号。例如，对产品的大量重写，这些重写使得无法实现向后兼容性。</li><li>Minor ：子版本号。这指示显著增强，但照顾到了向后兼容性。例如，这适用于产品的修正版或完全向后兼容的新版本。</li><li>Revision ：修正版本号。这适用于修复以前发布的程序集中的安全漏洞。</li></ul><h2 id="版本管理" tabindex="-1">版本管理 <a class="header-anchor" href="#版本管理" aria-label="Permalink to &quot;版本管理&quot;">​</a></h2><p>直接把项目复制出来一份，在副本项目中，直接做迭代，但这样做有一个坏处，如果升级的内容比较多，时间间隔又大的话，可能会忘记都做过什么事，这样就不便于管理了，所以应该选择一种更智能的方式管理我们的文件版本。</p><h1 id="git分布式版本控制系统" tabindex="-1">Git分布式版本控制系统 <a class="header-anchor" href="#git分布式版本控制系统" aria-label="Permalink to &quot;Git分布式版本控制系统&quot;">​</a></h1><h2 id="git-的诞生" tabindex="-1">Git 的诞生 <a class="header-anchor" href="#git-的诞生" aria-label="Permalink to &quot;Git 的诞生&quot;">​</a></h2><p>林纳斯·托瓦兹在1991年创建了开源的Linux，Linux系统已经发展了十年了，代码库之大让林纳斯很难继续通过手工方式管理了，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。</p><p>安定团结的大好局面在2005年就被打破了，原因是Linux社区牛人聚集，不免沾染了一些梁山好汉的江湖习气。开发Samba的Andrew试图破解BitKeeper的协议（这么干的其实也不只他一个），被BitMover公司发现了（监控工作做得不错！），于是BitMover公司怒了，要收回Linux社区的免费使用权。</p><p>Linus可以向BitMover公司道个歉，保证以后严格管教弟兄们，嗯，这是不可能的。实际情况是这样的：</p><p>Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git！一个月之内，Linux系统的源码已经由Git管理了！</p><h2 id="集中式-vs-分布式" tabindex="-1">集中式 vs 分布式 <a class="header-anchor" href="#集中式-vs-分布式" aria-label="Permalink to &quot;集中式 vs 分布式&quot;">​</a></h2><p>SVN集中式：版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p><p>GIT分布式：分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。</p><h2 id="git的三棵树" tabindex="-1">Git的三棵树 <a class="header-anchor" href="#git的三棵树" aria-label="Permalink to &quot;Git的三棵树&quot;">​</a></h2><ul><li><p>工作区：我们编写代码的文件环境。</p></li><li><p>暂存区：临时存储区域。</p></li><li><p>版本库：代码仓库，即分支。文件最终保存的区域。</p><p><img src="https://img-blog.csdnimg.cn/20200617000532683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VjaG9fY3hs,size_16,color_FFFFFF,t_70" alt="img"></p></li></ul><h1 id="安装-git" tabindex="-1">安装 Git <a class="header-anchor" href="#安装-git" aria-label="Permalink to &quot;安装 Git&quot;">​</a></h1><p>mac 自带 git，windows 需要安装 git。</p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">config</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--global</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">user.name</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;Your Name&quot;</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">config</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--global</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">user.email</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;email@example.com&quot;</span></span></code></pre></div><blockquote><p>使用git config user.name或git config user.email可以查看用户名和邮箱。</p></blockquote><h1 id="创建版本库" tabindex="-1">创建版本库 <a class="header-anchor" href="#创建版本库" aria-label="Permalink to &quot;创建版本库&quot;">​</a></h1><p>理解成这个目录里面的所有文件都可以被Git管理起来。</p><p>创建一个文件夹repo1，命令行进入到这个文件夹。(可以忽略)</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># mkdir repo1 # 创建repo1目录</span></span>\n<span class="line"><span style="color:#66D9EF;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">repo1</span><span style="color:#F8F8F2;">      </span><span style="color:#88846F;"># 进入到repo1目录</span></span>\n<span class="line"><span style="color:#88846F;"># pwd         # 显示当前目录的路径</span></span>\n<span class="line"><span style="color:#88846F;"># ls          # 显示当前目录的内容</span></span></code></pre></div><p>然后把这个目录变为 Git 可以管理的目录</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">init</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;"># git初始化</span></span></code></pre></div><p>不报错就是创建成功</p><h1 id="把文件添加到代码仓库" tabindex="-1">把文件添加到代码仓库 <a class="header-anchor" href="#把文件添加到代码仓库" aria-label="Permalink to &quot;把文件添加到代码仓库&quot;">​</a></h1><p>在 repo1 这个文件夹里，创建一个名字叫做 a.txt 的文件。里面写点内容，比如写111。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># touch 是linux中创建文件的命令，如果不习惯，也可以右键新建文件创建a.txt</span></span>\n<span class="line"><span style="color:#A6E22E;">touch</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;"># 在当前目录下创建 a.txt 文件，如果装了xcode，可以用 open a.txt -a xcode 来编辑文件</span></span></code></pre></div><h2 id="add-工作区-暂存区" tabindex="-1">add：工作区-&gt;暂存区 <a class="header-anchor" href="#add-工作区-暂存区" aria-label="Permalink to &quot;add：工作区-&gt;暂存区&quot;">​</a></h2><p>第一步，用命令git add告诉Git，把文件添加到仓库</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span></span></code></pre></div><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git add .</td><td>这表示提交所有有变化的文件</td></tr><tr><td>git add abc</td><td>这表示提交abc这个文件夹</td></tr><tr><td>git add *.js</td><td>这表示提交所有js文件</td></tr></tbody></table><h2 id="commit-暂存区-代码库" tabindex="-1">commit：暂存区-&gt;代码库 <a class="header-anchor" href="#commit-暂存区-代码库" aria-label="Permalink to &quot;commit：暂存区-&gt;代码库&quot;">​</a></h2><p>第二步，用命令git commit告诉Git，把文件提交到仓库：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;日志1&quot;</span></span></code></pre></div><h2 id="修改内容-查看状态" tabindex="-1">修改内容-查看状态 <a class="header-anchor" href="#修改内容-查看状态" aria-label="Permalink to &quot;修改内容-查看状态&quot;">​</a></h2><p>把 a.txt 的内容改为222</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">status</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;"># 查看状态</span></span></code></pre></div><h3 id="哪些文件被修改了" tabindex="-1">哪些文件被修改了 <a class="header-anchor" href="#哪些文件被修改了" aria-label="Permalink to &quot;哪些文件被修改了&quot;">​</a></h3><blockquote><p>Changes not staged for commit 指有些文件做了改动，但还没有被提交。</p></blockquote><p>git status 执行完后，提示信息中，告诉我们有些文件做了改动，但还没提交，然后建议我们使用 add 提交，或者使用 checkout 撤销修改。</p><h3 id="文件中哪段内容被修改了" tabindex="-1">文件中哪段内容被修改了 <a class="header-anchor" href="#文件中哪段内容被修改了" aria-label="Permalink to &quot;文件中哪段内容被修改了&quot;">​</a></h3><p>如果我们想看到某个文件具体的改动，可以使用 diff 命令。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">diff</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;"># 查看哪些内容发生了变化</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">diff</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">比较的是工作区和暂存区的差别</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">diff</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--cached</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">比较的是暂存区和版本库的差别</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">diff</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">HEAD</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">可以查看工作区和版本库的差别</span></span></code></pre></div><h2 id="重新提交" tabindex="-1">重新提交 <a class="header-anchor" href="#重新提交" aria-label="Permalink to &quot;重新提交&quot;">​</a></h2><p>我们把刚才修改过的文件添加一下。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span></span></code></pre></div><p>然后再次看看它的状态</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">status</span></span></code></pre></div><p>这回提示修改的文件已经添加，但没提交，那我们提交一下</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;日志2&quot;</span></span></code></pre></div><p>然后再次看看它的状态</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">status</span></span></code></pre></div><p>这回提示的是没有改动的文件了，即仓库里和本地的文件都一致了。</p><blockquote><p>每当对文件做了一些改动，就要重复的执行上面add和commit。就相当于玩游戏时的存盘，如果哪天想回退，就可以用reset命令了。</p></blockquote><h1 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h1><h2 id="log-日志" tabindex="-1">log 日志 <a class="header-anchor" href="#log-日志" aria-label="Permalink to &quot;log 日志&quot;">​</a></h2><p>log 命令显示从最近到最远的提交日志。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">log</span></span></code></pre></div><p>如果嫌弃输出的内容太多，可以加参数，简化输出。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">log</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--pretty=oneline</span></span></code></pre></div><h2 id="版本回退-版本库-工作区" tabindex="-1">版本回退(版本库-&gt;工作区) <a class="header-anchor" href="#版本回退-版本库-工作区" aria-label="Permalink to &quot;版本回退(版本库-&gt;工作区)&quot;">​</a></h2><p>你看到的一大串类似3628164...882e1e0的是commit id（版本号）</p><p>在Git中，用HEAD表示当前版本，上一个版本就是HEAD^ ，上上一个版本就是HEAD^^ ，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">reset</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--hard</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">HEAD^</span></span></code></pre></div><p>然后查看 a.txt 的内容，发现果然回退到上一版本。</p><p>然后继续使用log查看</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">log</span></span></code></pre></div><p>发现撤销前的那个版本竟然看不到了，即想回去回不去了，怎么办？</p><p>只能想办法找到版本号（如果你命令行窗口未关闭的话）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">reset</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--hard</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">63300</span><span style="color:#E6DB74;">dca594</span></span></code></pre></div><blockquote><p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p></blockquote><p>如果已经回退到了某个版本，如果想知道回退前的版本号，可以使用reflog找到版本号。</p><blockquote><p>Git提供了一个命令git reflog用来记录你的每一次命令(所有的操作记录)</p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">reflog</span></span></code></pre></div><h1 id="git的执行流程" tabindex="-1">git的执行流程 <a class="header-anchor" href="#git的执行流程" aria-label="Permalink to &quot;git的执行流程&quot;">​</a></h1><h2 id="工作区-working-directory" tabindex="-1">工作区（Working Directory） <a class="header-anchor" href="#工作区-working-directory" aria-label="Permalink to &quot;工作区（Working Directory）&quot;">​</a></h2><p>就是你在电脑里能看到的目录，比如我的repo1文件夹就是一个工作区。</p><h2 id="版本库-repository" tabindex="-1">版本库（Repository） <a class="header-anchor" href="#版本库-repository" aria-label="Permalink to &quot;版本库（Repository）&quot;">​</a></h2><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p><h2 id="流程" tabindex="-1">流程 <a class="header-anchor" href="#流程" aria-label="Permalink to &quot;流程&quot;">​</a></h2><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><ul><li><p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p></li><li><p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p></li></ul><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h1 id="撤销修改" tabindex="-1">撤销修改 <a class="header-anchor" href="#撤销修改" aria-label="Permalink to &quot;撤销修改&quot;">​</a></h1><h2 id="工作区-工作区" tabindex="-1">工作区-&gt;工作区 <a class="header-anchor" href="#工作区-工作区" aria-label="Permalink to &quot;工作区-&gt;工作区&quot;">​</a></h2><p>继续对 a.txt 的内容进行修改，然后保存文件。不要进行 add 和 commit。</p><p>在命令行中，使用 checkout 可以撤销修改。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span><span style="color:#F8F8F2;">   </span><span style="color:#88846F;"># 注意文件名和--之间有空格</span></span></code></pre></div><p>然后打开文件，就发现内容确实撤销了。</p><h2 id="暂存区-工作区" tabindex="-1">暂存区-&gt;工作区 <a class="header-anchor" href="#暂存区-工作区" aria-label="Permalink to &quot;暂存区-&gt;工作区&quot;">​</a></h2><p>如果是对文件内容修改后，已经执行了add，那么撤销就应该用reset了。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># 先把暂存区的修改，回退到工作区</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">reset</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">HEAD</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;"># 然后撤销工作区的修改</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span></span></code></pre></div><h2 id="版本库-工作区" tabindex="-1">版本库-&gt;工作区 <a class="header-anchor" href="#版本库-工作区" aria-label="Permalink to &quot;版本库-&gt;工作区&quot;">​</a></h2><p>如果是对文件内容修改后，已经执行了add，并且已经执行了commit，那么撤销应该这么做：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">reset</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--hard</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">HEAD^</span><span style="color:#F8F8F2;">      </span><span style="color:#88846F;"># 上文讲过</span></span></code></pre></div><h1 id="删除文件" tabindex="-1">删除文件 <a class="header-anchor" href="#删除文件" aria-label="Permalink to &quot;删除文件&quot;">​</a></h1><p>把刚才的 a.txt 删除掉，然后在命令行中输入 git status 能够看到已经删除文件的提示。</p><p>如果我们想把已经删除的文件还原回来，可以使用 checkout</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span></span></code></pre></div><p>如果我们确定删除这个文件，那么就要保证工作区和版本库一致</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">rm</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">#版本库中删除 a.txt</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">a.txt</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;删除了a.txt&#39;</span></span></code></pre></div><h1 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h1><table><thead><tr><th>命令</th><th>示例</th><th>作用</th></tr></thead><tbody><tr><td>init</td><td>git init</td><td>初始化git</td></tr><tr><td>status</td><td>git status</td><td>查看版本库状态</td></tr><tr><td>add</td><td>git add a.txt</td><td>把a.txt文件由工作区添加到暂存区</td></tr><tr><td>commit</td><td>git commit -m &quot;日期&quot;</td><td>把暂存区文件，提交到代码仓库中</td></tr><tr><td>diff</td><td>git diff a.txt</td><td>查看a.txt发生了哪些变化</td></tr><tr><td>log</td><td>git log --pretty=oneline</td><td>从最近到最远的提交日志</td></tr><tr><td>reflog</td><td>git reflog</td><td>用来记录你的每一次命令</td></tr><tr><td>reset</td><td>git reset --hard HEAD^</td><td>回退到某一个版本（代码仓库-&gt;工作区）</td></tr><tr><td>reset</td><td>git reset HEAD a.txt</td><td>先把暂存区的修改，回退到工作区（暂存区-&gt;工作区）</td></tr><tr><td>checkout</td><td>git checkout -- a.txt</td><td>撤销a.txt文件的操作（工作区-&gt;工作区）</td></tr><tr><td>rm</td><td>git rm a.txt</td><td>版本库中删除 a.txt</td></tr></tbody></table><p>讲到这里，本地的代码仓库全部搞定了。</p><h1 id="远程代码仓库" tabindex="-1">远程代码仓库 <a class="header-anchor" href="#远程代码仓库" aria-label="Permalink to &quot;远程代码仓库&quot;">​</a></h1><p>GitHub比较火，但毕竟是国外的网站，访问速度比较慢，所以也可以选择国内的码云。</p><h2 id="github" tabindex="-1">GitHub <a class="header-anchor" href="#github" aria-label="Permalink to &quot;GitHub&quot;">​</a></h2><p>gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</p><p>2018年6月4日，微软宣布，通过75亿美元的股票交易收购代码托管平台GitHub。</p><h2 id="网络备份" tabindex="-1">网络备份 <a class="header-anchor" href="#网络备份" aria-label="Permalink to &quot;网络备份&quot;">​</a></h2><p>如果我们希望这个项目的版本仓库，本地有一套，网络上也有备份的话，我们需要怎么做？</p><h3 id="生成本地密钥" tabindex="-1">生成本地密钥 <a class="header-anchor" href="#生成本地密钥" aria-label="Permalink to &quot;生成本地密钥&quot;">​</a></h3><p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># mac 终端中输入命令查看用户主目录下是否有.ssh目录</span></span>\n<span class="line"><span style="color:#88846F;"># wangyangdeMacBook-Pro:~ wangyang$ ls -a</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;"># window 下.ssh的位置</span></span>\n<span class="line"><span style="color:#88846F;"># C:\\Users\\wangyang\\.ssh</span></span></code></pre></div><p>如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">ssh-keygen</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-t</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">rsa</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-C</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;youremail@example.com&quot;</span></span></code></pre></div><p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p><p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p><h3 id="github授权" tabindex="-1">GitHub授权 <a class="header-anchor" href="#github授权" aria-label="Permalink to &quot;GitHub授权&quot;">​</a></h3><p>登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴 id_rsa.pub 文件的内容，点“Add Key”，你就应该看到已经添加的Key。</p><h2 id="添加远程代码仓库" tabindex="-1">添加远程代码仓库 <a class="header-anchor" href="#添加远程代码仓库" aria-label="Permalink to &quot;添加远程代码仓库&quot;">​</a></h2><p>首先，登录 GitHub，然后右上角找到 Create a new repo，创建一个新的代码仓库。</p><blockquote><p>注意：创建代码仓库时，不要添加 readme 和 .gitignore 和 Licenses，如果添加了这些，首次就不能上传，需要先下载后上传。</p></blockquote><ul><li>readme.md 这个文件的内容是这个项目的介绍等等相关信息。</li><li>.gitignore 指忽略规则，比如 node_modules 这个文件夹我们根本就不需要 git 去管理。</li><li>licenses 版权许可证，比如说他人修改代码后，是否可以闭源等。</li></ul><blockquote><p>我的账户名是wlc1272071495，邮箱是1272071495@qq.com，密码保密。</p></blockquote><p>创建成功之后，根据 GitHub 的提示，在本地的 repo1 下执行</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;"># 把本地仓库与网络仓库相关联    (origin 给远程分支起的一个名字可以改名)</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">remote</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">origin</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">git@github.com:wlc1272071495/repo_test.git</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">remote</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-v</span><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">查看已有的远程连接</span></span></code></pre></div><p>注意要把 wlc1272071495 换成你自己的 GitHub 账户名</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">push</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-u</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">origin</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">master</span><span style="color:#F8F8F2;">  (第一次提交 </span><span style="color:#E6DB74;">要加-u</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">,以后不用</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">push</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">origin</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">master</span></span></code></pre></div><p>如果推送失败的化，应先检查是不是账户写错了，然后检查是不是远程库里面有文件，如果远程库里面有文件，我们需要先下载，然后上传。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">pull</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">--rebase</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">origin</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">master</span></span></code></pre></div><blockquote><p>push表示推送；pull表示下拉；clone表示克隆</p></blockquote><blockquote><p>传输速度的快慢受限于网络和文件大小</p></blockquote><p>推送完毕后，回到 GitHub 中，就能够看到相应的文件了。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>只要本地作了提交，就可以通过命令：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">git push origin master</span></span></code></pre></div><p>把本地master分支的最新修改推送至GitHub</p><h2 id="ssh警告" tabindex="-1">SSH警告 <a class="header-anchor" href="#ssh警告" aria-label="Permalink to &quot;SSH警告&quot;">​</a></h2><p>当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.</span></span>\n<span class="line"><span style="color:#F8F8F2;">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span>\n<span class="line"><span style="color:#F8F8F2;">Are you sure you want to continue connecting (yes/no)?</span></span></code></pre></div><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</span></span></code></pre></div><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><h2 id="把远程代码仓库克隆到本地" tabindex="-1">把远程代码仓库克隆到本地 <a class="header-anchor" href="#把远程代码仓库克隆到本地" aria-label="Permalink to &quot;把远程代码仓库克隆到本地&quot;">​</a></h2><p>命令行进入到本地的 test 文件夹中。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">clone</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">git@github.com:wlc1272071495/repo_test.git</span></span></code></pre></div><p>就会在 test 目录下，把 github 的 repo_test 拿下来了。</p><p>然后就可以直接使用 git 了。（ 无需 git init ）</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">修改之后提交流程</span></span>\n<span class="line"><span style="color:#F8F8F2;">git add .</span></span>\n<span class="line"><span style="color:#F8F8F2;">git commit -m &#39;xxx&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">git push   (克隆下来的代码可以直接git push)</span></span></code></pre></div><p>拉取远程分支 更新本地代码</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">git pull git@github.com:wlc1272071495/2003.git(远程连接)</span></span></code></pre></div><h1 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h1><p>我们的项目很大，有很多人共同开发这个项目，比如张三负责首页，李四负责购物车，翠花负责整体协调，那么可以把当前git分为3个分支。</p><ul><li>master 主分支，翠花负责</li><li>index 首页分支，张三负责</li><li>buycar 购物车分支，李四负责</li></ul><h2 id="branch创建和切换" tabindex="-1">branch创建和切换 <a class="header-anchor" href="#branch创建和切换" aria-label="Permalink to &quot;branch创建和切换&quot;">​</a></h2><p>假设我是张三，我拿到项目后，需要创建index分支，然后切换到index分支，我的工作都在这里做</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-b</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span></span></code></pre></div><p>创建分支时，会把当前分支下的内容，都带入到新分支下。</p><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">branch</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;"># 创建index分支</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;"># 切换到index分支</span></span></code></pre></div><p>用git branch命令查看当前分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">branch</span></span></code></pre></div><p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p><p>进入到index分支后，张三在根目录创建一个index文件夹，里面创建index.html和index.js文件，里面正常的写些内容。</p><p>然后，张三在命令行上，对刚才的index相关的文件进行提交。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span><span style="color:#F8F8F2;">                               </span><span style="color:#88846F;"># 把index目录添加到暂存区</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&quot;张三的index分支第一次提交日志&quot;</span><span style="color:#F8F8F2;">   </span><span style="color:#88846F;"># 把暂存区中所有文件提交到代码库</span></span></code></pre></div><p>index分支的工作完成，我们就可以切换回master分支。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">master</span></span></code></pre></div><p>命令行切换到不同的分支时，我们的文件也会有对应的变化。</p><h2 id="merge分支合并" tabindex="-1">merge分支合并 <a class="header-anchor" href="#merge分支合并" aria-label="Permalink to &quot;merge分支合并&quot;">​</a></h2><p>现在，翠花把index分支的工作成果合并到master分支上：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">merge</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span></span></code></pre></div><p>git merge命令用于合并指定分支到当前分支。</p><p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向index的当前提交，所以合并速度非常快。</p><p><strong>有时合并时会出现提示</strong></p><p>Please enter a commit message to explain why this merge is necessary.</p><p>请输入提交消息来解释为什么这种合并是必要的</p><p>git 在pull或者合并分支的时候有时会遇到这个界面。可以不管(直接下面3,4步)，如果要输入解释的话就需要:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">1.按键盘字母 i 进入insert模式</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">2.修改最上面那行黄色合并信息,可以不修改</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">3.按键盘左上角&quot;Esc&quot;</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">4.输入&quot;:wq&quot;,注意是冒号+wq,按回车键即可</span></span></code></pre></div><h2 id="删除分支" tabindex="-1">删除分支 <a class="header-anchor" href="#删除分支" aria-label="Permalink to &quot;删除分支&quot;">​</a></h2><p>合并完成后，就可以放心地删除index分支了：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">branch</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-d</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span></span></code></pre></div><p>删除后，查看branch，就只剩下master分支了</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">branch</span></span></code></pre></div><h2 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-label="Permalink to &quot;小结&quot;">​</a></h2><table><thead><tr><th>命令</th><th>示例</th><th>作用</th></tr></thead><tbody><tr><td>branch</td><td>git branch</td><td>查看分支</td></tr><tr><td>branch</td><td>git branch dev</td><td>创建 dev 分支</td></tr><tr><td>checkout</td><td>git checkout dev</td><td>切换到 dev 分支</td></tr><tr><td>checkout</td><td>git checkout -b dev</td><td>创建 dev 分支，并切换到 dev 分支</td></tr><tr><td>merge</td><td>git merge dev</td><td>合并某分支到当前分支</td></tr><tr><td>branch</td><td>git branch -d dev</td><td>删除 dev 分支</td></tr></tbody></table><h2 id="解决冲突" tabindex="-1">解决冲突 <a class="header-anchor" href="#解决冲突" aria-label="Permalink to &quot;解决冲突&quot;">​</a></h2><p>创建 buycar 分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-b</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">buycar</span></span></code></pre></div><p>修改 index/index.html 的内容</p><p>在 buycar 分支中，提交 index/index.html</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index/index.html</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;buycar-index&#39;</span></span></code></pre></div><p>切换到 master 分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">master</span></span></code></pre></div><p>修改 index/index.html 的内容</p><p>在 master 分支中，提交 index/index.html</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index/index.html</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;master-index&#39;</span></span></code></pre></div><p>现在，master 分支和 buycar 分支，分别有新的提交。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">buycar</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;"># 看看index.html的内容</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">checkout</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index</span><span style="color:#F8F8F2;">  </span><span style="color:#88846F;"># 看看index.html的内容</span></span></code></pre></div><p>这种情况下，Git无法执行快速合并。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">merge</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">buycar</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;"># 将 buycar 合并到 master 分支中</span></span></code></pre></div><p>命令行提示冲突了，告诉我们需要手动解决冲突，然后提交。</p><p>也可以使用 status 查看哪些文件有冲突。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">status</span></span></code></pre></div><p>也可以直接查看 index/index.html 的内容</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;">body</span><span style="color:#F92672;">&gt;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">123</span></span></code></pre></div><p>需要我们手动对 index/index.html 文件进行更改后，重新提交</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">add</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">index/index.html</span></span>\n<span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">commit</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-m</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;手动更新&#39;</span></span></code></pre></div><p>最后，删除 buycar 分支</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">git</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">branch</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">-d</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">buycar</span></span></code></pre></div><p>工作完成</p><p>git 当然还有其他一些功能，如果感兴趣可以去官网自行查阅。</p>', 226)
  ]));
}
const git = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  git as default
};
