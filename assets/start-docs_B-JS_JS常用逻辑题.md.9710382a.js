import { _ as _export_sfc, r as r3, i as it, f as ig } from "./chunks/framework.29e23d3c.js";
const __pageData = JSON.parse('{"title":"JS 常用逻辑题","description":"","frontmatter":{},"headers":[{"level":2,"title":"字符串取反","slug":"字符串取反","link":"#字符串取反","children":[]},{"level":2,"title":"实现一个字符串匹配算法","slug":"实现一个字符串匹配算法","link":"#实现一个字符串匹配算法","children":[{"level":3,"title":"实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置","slug":"实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置","link":"#实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置","children":[]}]},{"level":2,"title":"打印出 1 - 10000 之间的所有对称数 例如 121、1331 等","slug":"打印出-1-10000-之间的所有对称数-例如-121、1331-等","link":"#打印出-1-10000-之间的所有对称数-例如-121、1331-等","children":[]},{"level":2,"title":"给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。","slug":"给定一个数组-nums-编写一个函数将所有-0-移动到数组的末尾-同时保持非零元素的相对顺序。","link":"#给定一个数组-nums-编写一个函数将所有-0-移动到数组的末尾-同时保持非零元素的相对顺序。","children":[]},{"level":2,"title":"请实现一个 add 函数，满足以下功能 add(1),add(1)(2),add(1,2)(3)(4)","slug":"请实现一个-add-函数-满足以下功能-add-1-add-1-2-add-1-2-3-4","link":"#请实现一个-add-函数-满足以下功能-add-1-add-1-2-add-1-2-3-4","children":[]},{"level":2,"title":"用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。","slug":"用-javascript-写一个函数-输入-int-型-返回整数逆序后的字符串。如-输入整型-1234-返回字符串-4321-。要求必须使用递归函数调用-不能用全局变量-输入函数必须只有一个参数传入-必须返回字符串。","link":"#用-javascript-写一个函数-输入-int-型-返回整数逆序后的字符串。如-输入整型-1234-返回字符串-4321-。要求必须使用递归函数调用-不能用全局变量-输入函数必须只有一个参数传入-必须返回字符串。","children":[]},{"level":2,"title":"常用正则","slug":"常用正则","link":"#常用正则","children":[]},{"level":2,"title":"找出字符串中连续出现最多的字符和个数","slug":"找出字符串中连续出现最多的字符和个数","link":"#找出字符串中连续出现最多的字符和个数","children":[]},{"level":2,"title":"金额格式化","slug":"金额格式化","link":"#金额格式化","children":[]},{"level":2,"title":"编程题，写个程序把 entry 转换成如下对象","slug":"编程题-写个程序把-entry-转换成如下对象","link":"#编程题-写个程序把-entry-转换成如下对象","children":[]},{"level":2,"title":"编程题，写个程序把 entry 转换成如下对象","slug":"编程题-写个程序把-entry-转换成如下对象-1","link":"#编程题-写个程序把-entry-转换成如下对象-1","children":[]},{"level":2,"title":"统计 1 ~ n 整数中出现 1 的次数？","slug":"统计-1-n-整数中出现-1-的次数","link":"#统计-1-n-整数中出现-1-的次数","children":[]},{"level":2,"title":"实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度","slug":"实现-convert-方法-把原始-list-转换成树形结构-要求尽可能降低时间复杂度","link":"#实现-convert-方法-把原始-list-转换成树形结构-要求尽可能降低时间复杂度","children":[]}],"relativePath":"start-docs/B-JS/JS常用逻辑题.md","filePath":"start-docs/B-JS/JS常用逻辑题.md"}');
const _sfc_main = { name: "start-docs/B-JS/JS常用逻辑题.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="js-常用逻辑题" tabindex="-1">JS 常用逻辑题 <a class="header-anchor" href="#js-常用逻辑题" aria-label="Permalink to &quot;JS 常用逻辑题&quot;">​</a></h1><h2 id="字符串取反" tabindex="-1">字符串取反 <a class="header-anchor" href="#字符串取反" aria-label="Permalink to &quot;字符串取反&quot;">​</a></h2><div class="language-js codearea-link" id="ygsd0wof4zj"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">processString</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">s</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> s</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">char</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      char </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> char.</span><span style="color:#A6E22E;">toUpperCase</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> char.</span><span style="color:#A6E22E;">toLowerCase</span><span style="color:#F8F8F2;">() </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> char.</span><span style="color:#A6E22E;">toUpperCase</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实现一个字符串匹配算法" tabindex="-1">实现一个字符串匹配算法 <a class="header-anchor" href="#实现一个字符串匹配算法" aria-label="Permalink to &quot;实现一个字符串匹配算法&quot;">​</a></h2><h3 id="实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置" tabindex="-1">实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置 <a class="header-anchor" href="#实现一个字符串匹配算法-从长度为-n-的字符串-s-中-查找是否存在字符串-t-t-的长度是-m-若存在返回所在位置" aria-label="Permalink to &quot;实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置&quot;">​</a></h3><div class="language-js codearea-link" id="l3rjpi71ba"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">find</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">S</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">T</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (S.length </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> T.length) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> S.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> T.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (S.</span><span style="color:#A6E22E;">subStr</span><span style="color:#F8F8F2;">(i, T.length) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> T) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> i</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="打印出-1-10000-之间的所有对称数-例如-121、1331-等" tabindex="-1">打印出 1 - 10000 之间的所有对称数 例如 121、1331 等 <a class="header-anchor" href="#打印出-1-10000-之间的所有对称数-例如-121、1331-等" aria-label="Permalink to &quot;打印出 1 - 10000 之间的所有对称数 例如 121、1331 等&quot;">​</a></h2><div class="language-js codearea-link" id="7jidcb90sqy"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">max</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Array</span><span style="color:#F8F8F2;">(max).</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()].</span><span style="color:#A6E22E;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    item </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> item</span><span style="color:#F92672;">++</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (</span></span>\n<span class="line"><span style="color:#F8F8F2;">      item.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">().length </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span></span>\n<span class="line"><span style="color:#F8F8F2;">      item </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Number</span><span style="color:#F8F8F2;">(item.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">reverse</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">))</span></span>\n<span class="line"><span style="color:#F8F8F2;">    )</span></span>\n<span class="line"><span style="color:#F8F8F2;">  })</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">print</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="给定一个数组-nums-编写一个函数将所有-0-移动到数组的末尾-同时保持非零元素的相对顺序。" tabindex="-1">给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 <a class="header-anchor" href="#给定一个数组-nums-编写一个函数将所有-0-移动到数组的末尾-同时保持非零元素的相对顺序。" aria-label="Permalink to &quot;给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。&quot;">​</a></h2><div class="language-js codearea-link" id="4rzz491b5ps"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">move</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nums.length</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> j; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (nums[i] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      nums.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      nums.</span><span style="color:#A6E22E;">splice</span><span style="color:#F8F8F2;">(i, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      i</span><span style="color:#F92672;">--</span></span>\n<span class="line"><span style="color:#F8F8F2;">      j</span><span style="color:#F92672;">++</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> nums</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> nums </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">12</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">move</span><span style="color:#F8F8F2;">(nums))</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="请实现一个-add-函数-满足以下功能-add-1-add-1-2-add-1-2-3-4" tabindex="-1">请实现一个 add 函数，满足以下功能 add(1),add(1)(2),add(1,2)(3)(4) <a class="header-anchor" href="#请实现一个-add-函数-满足以下功能-add-1-add-1-2-add-1-2-3-4" aria-label="Permalink to &quot;请实现一个 add 函数，满足以下功能 add(1),add(1)(2),add(1,2)(3)(4)&quot;">​</a></h2><div class="language-js codearea-link" id="5yquqyi32e8"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> args </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> fn_args </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> add.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, args.</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(fn_args))</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  fn.</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> args.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> b)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> fn</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)(</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">)(</span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="用-javascript-写一个函数-输入-int-型-返回整数逆序后的字符串。如-输入整型-1234-返回字符串-4321-。要求必须使用递归函数调用-不能用全局变量-输入函数必须只有一个参数传入-必须返回字符串。" tabindex="-1">用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。 <a class="header-anchor" href="#用-javascript-写一个函数-输入-int-型-返回整数逆序后的字符串。如-输入整型-1234-返回字符串-4321-。要求必须使用递归函数调用-不能用全局变量-输入函数必须只有一个参数传入-必须返回字符串。" aria-label="Permalink to &quot;用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。&quot;">​</a></h2><div class="language-js codearea-link" id="9lt9chde2ce"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">convert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">num</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> num1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> num2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> num </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (num1 </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> num</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    num1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">floor</span><span style="color:#F8F8F2;">(num1)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">`</span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">num2</span><span style="color:#F92672;">}${</span><span style="color:#A6E22E;">convert</span><span style="color:#F8F8F2;">(num1)</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">`</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">convert</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">198320</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="常用正则" tabindex="-1">常用正则 <a class="header-anchor" href="#常用正则" aria-label="Permalink to &quot;常用正则&quot;">​</a></h2><ul><li>trim: /(^\\s*)|(\\s*$)/g</li><li>数字 /^[0-9]*$/</li><li>n 位数字 /^\\d{n}$/</li><li>手机号 /^1[3-9]\\d{9}$/</li><li>邮箱 /^([a-zA-Z]|[0-9])(\\w|-)+@[a-zA-Z0-9]+.([a-zA-Z]{2,4})$/</li></ul><h2 id="找出字符串中连续出现最多的字符和个数" tabindex="-1">找出字符串中连续出现最多的字符和个数 <a class="header-anchor" href="#找出字符串中连续出现最多的字符和个数" aria-label="Permalink to &quot;找出字符串中连续出现最多的字符和个数&quot;">​</a></h2><div class="language-js codearea-link" id="0jfow91oa58v"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#E6DB74;">&#39;abcaakjbb&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;abbkejsbcccwqaa&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">:</span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> str.</span><span style="color:#A6E22E;">match</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/(</span><span style="color:#AE81FF;">\\w</span><span style="color:#E6DB74;">)</span><span style="color:#F92672;">\\1*</span><span style="color:#E6DB74;">/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// str.match(/(\\w)\\1+/g)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> maxLen </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#A6E22E;">max</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">arr.</span><span style="color:#A6E22E;">map</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">s</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> s.length));</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">pre</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">curr</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (curr.length </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> maxLen) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      pre[curr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> curr.length;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> pre;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }, {});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(result);</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="金额格式化" tabindex="-1">金额格式化 <a class="header-anchor" href="#金额格式化" aria-label="Permalink to &quot;金额格式化&quot;">​</a></h2><ul><li>将 100000000000 格式化为 100,000,000.000 每三位进行分割</li></ul><div class="language-js codearea-link" id="an13andt2rv"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 德国以 . 分割金钱, 转到德国当地格式化方案即可</span></span>\n<span class="line"><span style="color:#F8F8F2;">;(</span><span style="color:#AE81FF;">10000000000</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">toLocaleString</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;de-DE&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 寻找字符空隙加 .</span></span>\n<span class="line"><span style="color:#E6DB74;">&#39;10000000000&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/</span><span style="color:#F92672;">\\B</span><span style="color:#E6DB74;">(?=(</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{3}</span><span style="color:#E6DB74;">)</span><span style="color:#F92672;">+</span><span style="color:#E6DB74;">(?!</span><span style="color:#AE81FF;">\\d</span><span style="color:#E6DB74;">))/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;.&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 寻找数字并在其后面加 .</span></span>\n<span class="line"><span style="color:#E6DB74;">&#39;10000000000&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/(</span><span style="color:#AE81FF;">\\d</span><span style="color:#E6DB74;">)(?=(</span><span style="color:#AE81FF;">\\d</span><span style="color:#F92672;">{3}</span><span style="color:#E6DB74;">)</span><span style="color:#F92672;">+\\b</span><span style="color:#E6DB74;">)/</span><span style="color:#F92672;">g</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;$1.&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="编程题-写个程序把-entry-转换成如下对象" tabindex="-1">编程题，写个程序把 entry 转换成如下对象 <a class="header-anchor" href="#编程题-写个程序把-entry-转换成如下对象" aria-label="Permalink to &quot;编程题，写个程序把 entry 转换成如下对象&quot;">​</a></h2><div class="language-js codearea-link" id="3k6g0y5kvmg"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> entry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;a.b.c.dd&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;abcdd&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;a.d.xx&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;adxx&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;a.e&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;ae&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> output </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  a: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    b: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      c: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        dd: </span><span style="color:#E6DB74;">&#39;abcdd&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    d: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      xx: </span><span style="color:#E6DB74;">&#39;adxx&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    e: </span><span style="color:#E6DB74;">&#39;ae&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">convert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">entry</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> entry) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> keys </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> key.</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;.&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (keys.length </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      res[key] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> entry[key]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      keys.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">prev</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">curr</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (index </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> keys.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> (prev[curr] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> entry[key])</span></span>\n<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          prev[curr] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prev[curr] </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> prev[curr]</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }, res)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> res</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="编程题-写个程序把-entry-转换成如下对象-1" tabindex="-1">编程题，写个程序把 entry 转换成如下对象 <a class="header-anchor" href="#编程题-写个程序把-entry-转换成如下对象-1" aria-label="Permalink to &quot;编程题，写个程序把 entry 转换成如下对象&quot;">​</a></h2><div class="language-js codearea-link" id="p2o4u1itgvm"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> entry </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  a: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    b: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      c: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        dd: </span><span style="color:#E6DB74;">&#39;abcdd&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    d: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      xx: </span><span style="color:#E6DB74;">&#39;adxx&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    },</span></span>\n<span class="line"><span style="color:#F8F8F2;">    e: </span><span style="color:#E6DB74;">&#39;ae&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> output </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;a.b.c.dd&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;abcdd&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;a.d.xx&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;adxx&#39;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E6DB74;">&#39;a.e&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;ae&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><div class="language-js codearea-link" id="q21u6uieu7c"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">convert</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">entry</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">prefix</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">result</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (obj.</span><span style="color:#A6E22E;">hasOwnProperty</span><span style="color:#F8F8F2;">(key)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> keyName </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">`</span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">prefix</span><span style="color:#F92672;">}${</span><span style="color:#F8F8F2;">key</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">`</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> obj[key] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;object&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">(obj[key], keyName </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;.&#39;</span><span style="color:#F8F8F2;">, result)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          result[keyName] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj[key]</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">noop</span><span style="color:#F8F8F2;">(entry, </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">, res)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> res</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="统计-1-n-整数中出现-1-的次数" tabindex="-1">统计 1 ~ n 整数中出现 1 的次数？ <a class="header-anchor" href="#统计-1-n-整数中出现-1-的次数" aria-label="Permalink to &quot;统计 1 ~ n 整数中出现 1 的次数？&quot;">​</a></h2><div class="language-js codearea-link" id="3wf8vgu6xyh"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 统计400w中，1出现的次数</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">countOne</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> factor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> count </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(n </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> factor)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (next </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> lower </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> n </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> next </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> factor</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> curr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> next </span><span style="color:#F92672;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> high </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(n </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">10</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> factor))</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (curr </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      count </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> high </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> factor</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (curr </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      count </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> high </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> factor </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> lower </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      count </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> (high </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> factor</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    factor </span><span style="color:#F92672;">*=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">10</span></span>\n<span class="line"><span style="color:#F8F8F2;">    next </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">parseInt</span><span style="color:#F8F8F2;">(n </span><span style="color:#F92672;">/</span><span style="color:#F8F8F2;"> factor)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> count</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实现-convert-方法-把原始-list-转换成树形结构-要求尽可能降低时间复杂度" tabindex="-1">实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度 <a class="header-anchor" href="#实现-convert-方法-把原始-list-转换成树形结构-要求尽可能降低时间复杂度" aria-label="Permalink to &quot;实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度&quot;">​</a></h2><div class="language-js codearea-link" id="ij6d222t6pk"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门A&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门B&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门C&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门D&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">5</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门E&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">6</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门F&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">7</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门G&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;"> },</span></span>\n<span class="line"><span style="color:#F8F8F2;">  { id: </span><span style="color:#AE81FF;">8</span><span style="color:#F8F8F2;">, name: </span><span style="color:#E6DB74;">&#39;部门H&#39;</span><span style="color:#F8F8F2;">, parentId: </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;"> }</span></span>\n<span class="line"><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">convert2</span><span style="color:#F8F8F2;">(list)</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">convert2</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">array</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> array.</span><span style="color:#A6E22E;">reduce</span><span style="color:#F8F8F2;">(</span></span>\n<span class="line"><span style="color:#F8F8F2;">    (</span><span style="color:#FD971F;font-style:italic;">prev</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">curr</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ((prev[curr.id] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> curr), prev),</span></span>\n<span class="line"><span style="color:#F8F8F2;">    {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">  )</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(map)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> item </span><span style="color:#F92672;">of</span><span style="color:#F8F8F2;"> list) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (item.parentId </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      res.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(item)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">continue</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (item.parentId </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> map) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> parent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> map[item.parentId]</span></span>\n<span class="line"><span style="color:#F8F8F2;">      parent.children </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> parent.children </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F8F8F2;">      parent.children.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(item)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> res</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(result)</span></span></code></pre><button class="link">将此代码在线运行</button></div>', 30)
  ]));
}
const JS_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  JS_____ as default
};
