import { _ as _export_sfc, r as r3, i as it, f as ig } from "./chunks/framework.29e23d3c.js";
const __pageData = JSON.parse('{"title":"Promise/A+","description":"","frontmatter":{},"headers":[{"level":2,"title":"简单实用","slug":"简单实用","link":"#简单实用","children":[]},{"level":2,"title":"手写promise","slug":"手写promise","link":"#手写promise","children":[]},{"level":2,"title":"手写promise.race","slug":"手写promise-race","link":"#手写promise-race","children":[]},{"level":2,"title":"手写promise.all","slug":"手写promise-all","link":"#手写promise-all","children":[{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"relativePath":"start-docs/B-JS/Promise原理及实现.md","filePath":"start-docs/B-JS/Promise原理及实现.md"}');
const _sfc_main = { name: "start-docs/B-JS/Promise原理及实现.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="promise-a" tabindex="-1">Promise/A+ <a class="header-anchor" href="#promise-a" aria-label="Permalink to &quot;Promise/A+&quot;">​</a></h1><ul><li>Promise是一种规范，是一套处理JavaScript异步的机制</li><li>ES6遵循Promise/A+规范</li><li>Promise本质只一个状态机,每个promise有三种状态：pending、fulfilled和rejected。状态改变只能从pending -&gt; fulfilled 或者pending -&gt; rejected。不可逆。fulfilled多以resolve来指代。</li><li>then方法必须返回一个新的Promise。可以多次调用。</li><li>值可以穿透。</li><li>Async/Await就是一个自执行的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式。</li></ul><h2 id="简单实用" tabindex="-1">简单实用 <a class="header-anchor" href="#简单实用" aria-label="Permalink to &quot;简单实用&quot;">​</a></h2><div class="language-js codearea-link" id="njwy3uza01a"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> promise </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;hello promise&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;success&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }, </span><span style="color:#AE81FF;">1000</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  promise.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res)).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err))</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="手写promise" tabindex="-1">手写promise <a class="header-anchor" href="#手写promise" aria-label="Permalink to &quot;手写promise&quot;">​</a></h2><div class="language-js codearea-link" id="d1hidpyjo3"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> PENDING </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;pending&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> FULFILLED </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;fulfilled&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> REJECTED </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;rejected&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myPromise</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">callback</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> self </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//定义初始值 （void 0 返回undefined,防止undefined在老浏览器中被篡改）</span></span>\n<span class="line"><span style="color:#F8F8F2;">    self.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">void</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//定义当前状态机</span></span>\n<span class="line"><span style="color:#F8F8F2;">    self.status </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> PENDING;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//定义成功状态时的回调函数集合</span></span>\n<span class="line"><span style="color:#F8F8F2;">    self.onResolvedCallbacks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//定义失败状态时的回调函数集合</span></span>\n<span class="line"><span style="color:#F8F8F2;">    self.onRejectedCallbacks </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//定义resolve方法和reject方法</span></span>\n<span class="line"><span style="color:#F8F8F2;">    self.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(value </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">myPromise</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(self.resolve, self,reject)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">//将回调任务放在JS引擎的任务队列中</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 可能有多个回调函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(self.status </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> PENDING) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          self.status </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> FULFILLED;</span></span>\n<span class="line"><span style="color:#F8F8F2;">          self.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value;</span></span>\n<span class="line"><span style="color:#F8F8F2;">          self.onResolvedCallbacks.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">cb</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">cb</span><span style="color:#F8F8F2;">(value))</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    self.</span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">error</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(self.status </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> PENDING) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          self.status </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> REJECTED;</span></span>\n<span class="line"><span style="color:#F8F8F2;">          self.value </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> error;</span></span>\n<span class="line"><span style="color:#F8F8F2;">          self.onRejectedCallbacks.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">cb</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">cb</span><span style="color:#F8F8F2;">(error))</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//执行callback函数，并传递resolve和reject方法</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">callback</span><span style="color:#F8F8F2;">(self.resolve, self.reject)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;">(e) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      self.</span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(e)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">myPromise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">onFulfilled</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// this.onResolvedCallbacks.push(onFulfilled);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// this.onRejectedCallbacks.push(onRejected);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> self </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 规范2.2.1 onFulfilled和onRejected 都是可选参数，并且如果不是函数需要忽略，且值穿透</span></span>\n<span class="line"><span style="color:#F8F8F2;">    onFulfilled </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> onFulfilled </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> onFulfilled </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> value;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    onRejected </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> onRejected </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;function&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> onRejected </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;font-style:italic;">error</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> error };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myPromise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handle</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">callback</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">callback</span><span style="color:#F8F8F2;">(self.value)</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(result </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">myPromise</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            result.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(resolve, reject)</span></span>\n<span class="line"><span style="color:#F8F8F2;">          } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(result)</span></span>\n<span class="line"><span style="color:#F8F8F2;">          }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(error)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(self.status </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> PENDING) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        self.onResolvedCallbacks.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handle</span><span style="color:#F8F8F2;">(onFulfilled));</span></span>\n<span class="line"><span style="color:#F8F8F2;">        self.onRejectedCallbacks.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handle</span><span style="color:#F8F8F2;">(onRejected));</span></span>\n<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(self.status </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> FULFILLED) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">handle</span><span style="color:#F8F8F2;">(onFulfilled)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">handle</span><span style="color:#F8F8F2;">(onRejected)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  };</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">myPromise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">onRejected</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, onRejected)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">myPromise</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">finally</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">callback</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> myPromise.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">callback</span><span style="color:#F8F8F2;">()).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> value)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }, </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> myPromise.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">callback</span><span style="color:#F8F8F2;">()).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> { </span><span style="color:#F92672;">throw</span><span style="color:#F8F8F2;"> err })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  myPromise.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myPromise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(value </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">myPromise</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        value.</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(resolve, reject)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(value)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  myPromise.</span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">error</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myPromise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(error)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="手写promise-race" tabindex="-1">手写promise.race <a class="header-anchor" href="#手写promise-race" aria-label="Permalink to &quot;手写promise.race&quot;">​</a></h2><div class="language-js codearea-link" id="3xhb6jiym0k"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">myPromise.</span><span style="color:#A6E22E;">race</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">promises</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myPromise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      promises.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">promise</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        myPromise.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(promise).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(resolve, reject)</span></span>\n<span class="line"><span style="color:#F8F8F2;">      })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="手写promise-all" tabindex="-1">手写promise.all <a class="header-anchor" href="#手写promise-all" aria-label="Permalink to &quot;手写promise.all&quot;">​</a></h2><div class="language-js codearea-link" id="l82sfr2ko2f"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">myPromise.</span><span style="color:#A6E22E;">all</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">promises</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">//成功的数据集合</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> resolveValues </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Array</span><span style="color:#F8F8F2;">(promises.length);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> resolveCount </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">myPromise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      promises.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">promise</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">index</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        myPromise.</span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(promise).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          resolveValues[index] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> value;</span></span>\n<span class="line"><span style="color:#F8F8F2;">          resolveCount</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;">(resolveCount </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> resolveValues.length) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#A6E22E;">resolve</span><span style="color:#F8F8F2;">(resolveValues)</span></span>\n<span class="line"><span style="color:#F8F8F2;">          }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(err)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })</span></span>\n<span class="line"><span style="color:#F8F8F2;">      })</span></span>\n<span class="line"><span style="color:#F8F8F2;">    })</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><ul><li>[<a href="https://www.ituring.com.cn/article/66566" target="_blank" rel="noreferrer">https://www.ituring.com.cn/article/66566</a>]</li><li>[<a href="https://github.com/sisterAn/blog/issues/13" target="_blank" rel="noreferrer">https://github.com/sisterAn/blog/issues/13</a>]</li><li>[<a href="https://blog.csdn.net/cc_together/article/details/105454045" target="_blank" rel="noreferrer">https://blog.csdn.net/cc_together/article/details/105454045</a>] 最优</li></ul>', 12)
  ]));
}
const Promise_____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  Promise_____ as default
};
