import{_ as i,r as l,i as a,a as t}from"./chunks/framework.15d2e201.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"JS与Native通信","slug":"js与native通信","link":"#js与native通信","children":[]},{"level":2,"title":"rn与cordova区别","slug":"rn与cordova区别","link":"#rn与cordova区别","children":[{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"relativePath":"start-docs/all-docs/B-专题/js与native通信.md","filePath":"start-docs/all-docs/B-专题/js与native通信.md"}'),r={name:"start-docs/all-docs/B-专题/js与native通信.md"};function o(n,e,s,u,v,c){return l(),a("div",null,e[0]||(e[0]=[t('<h2 id="js与native通信" tabindex="-1">JS与Native通信 <a class="header-anchor" href="#js与native通信" aria-label="Permalink to &quot;JS与Native通信&quot;">​</a></h2><ul><li>js -&gt; native <ul><li>JS调用Native通信的三种方式 <ul><li>拦截Scheme <ul><li>IOS中通过UIWebView相关的UIWebViewDelegate协议中的方法做拦截，通过url的协议或者特征字符串来触发。</li><li>NSURL *url = [request URL] if([[url scheme]] is EqualToString:@&quot;sendEvent&quot;)</li><li>IOS8之后，用WKWebView取代，内存更少，性能更好</li><li>通过客户端拦截我们的既定规则的请求，通过callback来回调</li><li>缺点：连续调用location.href会出现消息丢失，URL会有长度限制。</li></ul></li><li>弹窗拦截 <ul><li>利用弹窗触发WebView相应事件拦截，比如onJsAlert,onJsConfirm等。缺点UIWebView不支持。</li></ul></li><li>注入JS上下文 <ul><li>利用内置的JSCore框架，通过webview向JS的上下文注入对象和方法，可以让JS直接调用原生。</li></ul></li></ul></li><li>调用是异步</li></ul></li><li>native -&gt; js <ul><li>直接JS代码字符串，类似js的eval去执行。使用loadUrl、evaluateJavaScript等方法。</li><li>[webview stringByEvaluatingJavaScriptFromString:@&quot;alert(&#39;hello world&#39;)&quot;]</li><li>调用是同步的</li></ul></li></ul><h2 id="rn与cordova区别" tabindex="-1">rn与cordova区别 <a class="header-anchor" href="#rn与cordova区别" aria-label="Permalink to &quot;rn与cordova区别&quot;">​</a></h2><ul><li>React Native通过JavaScript编写APP的方式，乍看以为是以webview提供的现成的JS与原生语言之间的互调，但是如果当我们调试一个React Native程序的时候，在debug视图中是不会看到任何webview被调用的痕迹。所以，实际上React Native并没有使用现成的与webview的通信方法，而是使用了更直接的JS运行环境，比如在iOS中为系统自带的JavaScriptCore。这与Phonegap这类以webview为主的界面展现与本地能力调用的模式有本质上的区别，也是确保React Native高性能和高效率的基础。</li></ul><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><ul><li>[<a href="https://mp.weixin.qq.com/s/T78J3dM9i5TvLu0h6joX3A" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/T78J3dM9i5TvLu0h6joX3A</a>] JS Bridge通信原理</li></ul>',6)]))}const S=i(r,[["render",o]]);export{h as __pageData,S as default};
