import { _ as _export_sfc, r as r3, i as it, f as ig } from "./chunks/framework.29e23d3c.js";
const __pageData = JSON.parse('{"title":"检测是不是数组的方式","description":"","frontmatter":{},"headers":[{"level":2,"title":"检测数组的 3 种方式","slug":"检测数组的-3-种方式","link":"#检测数组的-3-种方式","children":[]},{"level":2,"title":"差异","slug":"差异","link":"#差异","children":[]}],"relativePath":"start-docs/B-JS/检测数组类型的几种方式.md","filePath":"start-docs/B-JS/检测数组类型的几种方式.md"}');
const _sfc_main = { name: "start-docs/B-JS/检测数组类型的几种方式.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="检测是不是数组的方式" tabindex="-1">检测是不是数组的方式 <a class="header-anchor" href="#检测是不是数组的方式" aria-label="Permalink to &quot;检测是不是数组的方式&quot;">​</a></h1><h2 id="检测数组的-3-种方式" tabindex="-1">检测数组的 3 种方式 <a class="header-anchor" href="#检测数组的-3-种方式" aria-label="Permalink to &quot;检测数组的 3 种方式&quot;">​</a></h2><ol><li><p><strong>Object.prototype.toString.call(arr) === &#39;[object Array]&#39;</strong></p></li><li><p><strong>[] instanceof Array -&gt; true</strong></p></li><li><p><strong>Array.isArray()</strong></p></li></ol><h2 id="差异" tabindex="-1">差异 <a class="header-anchor" href="#差异" aria-label="Permalink to &quot;差异&quot;">​</a></h2><ul><li><strong>instanceof</strong> 是检测原型链上是否有 <strong>Array</strong> 的 <strong>prototype</strong>。 <ul><li>只能用来判断对象类型，原始类型不可以。</li><li>所有对象类型 <strong>instanceof Object</strong> 都是 true</li></ul></li><li><strong>Object.prototype.toString.call()</strong> 常用于判断浏览器内置对象。</li><li><strong>Array.isArray()</strong> 优于 <strong>instanceof</strong><ul><li>是 es5 新增对象，当不存在时，可以用 Object 实现<div class="language-js codearea-link" id="bfyy21lf59"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">Array.isArray) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  Array.</span><span style="color:#A6E22E;">isArray</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(obj) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;[Object Array]&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul></li></ul>', 5)
  ]));
}
const ___________ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  ___________ as default
};
