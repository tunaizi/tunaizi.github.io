import{_ as n,r as a,i as o,a as t}from"./chunks/framework.bb8f9838.js";const b=JSON.parse('{"title":"盒模型","description":"","frontmatter":{},"headers":[{"level":2,"title":"控制盒模型的属性","slug":"控制盒模型的属性","link":"#控制盒模型的属性","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[{"level":3,"title":"box-sizing: content-box;","slug":"box-sizing-content-box","link":"#box-sizing-content-box","children":[]}]}],"relativePath":"start-docs/F-css/盒模型.md","filePath":"start-docs/F-css/盒模型.md"}'),l={name:"start-docs/F-css/盒模型.md"};function e(p,s,r,i,c,d){return a(),o("div",null,s[0]||(s[0]=[t(`<h1 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h1><h2 id="控制盒模型的属性" tabindex="-1">控制盒模型的属性 <a class="header-anchor" href="#控制盒模型的属性" aria-label="Permalink to &quot;控制盒模型的属性&quot;">​</a></h2><p>CSS盒模型用于定义HTML元素的布局方式。通过控制盒模型的属性，可以精确地控制元素的尺寸和位置。以下是控制盒模型的主要属性：</p><ol><li><p><strong>box-sizing: content-box;</strong></p><ul><li>默认值。元素的宽度和高度仅包括内容区域（content area），不包括内边距（padding）、边框（border）和外边距（margin）。</li><li>计算公式：<code>width = content-width</code>，<code>height = content-height</code></li></ul></li><li><p><strong>box-sizing: border-box;</strong></p><ul><li>元素的宽度和高度包括内容区域（content area）、内边距（padding）和边框（border），但不包括外边距（margin）。</li><li>计算公式：<code>width = content-width + padding-left + padding-right + border-left + border-right</code>，<code>height = content-height + padding-top + padding-bottom + border-top + border-bottom</code></li></ul></li></ol><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="box-sizing-content-box" tabindex="-1">box-sizing: content-box; <a class="header-anchor" href="#box-sizing-content-box" aria-label="Permalink to &quot;box-sizing: content-box;&quot;">​</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">.example-content-box</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">200</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">padding</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">border</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">solid</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">black</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">box-sizing</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">content-box</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,7)]))}const h=n(l,[["render",e]]);export{b as __pageData,h as default};
