import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"class与构造函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"function来做构造函数","slug":"function来做构造函数","link":"#function来做构造函数","children":[]},{"level":2,"title":"es6新增类","slug":"es6新增类","link":"#es6新增类","children":[]},{"level":2,"title":"相同与不同","slug":"相同与不同","link":"#相同与不同","children":[]}],"relativePath":"start-docs/B-JS/class与函数.md","filePath":"start-docs/B-JS/class与函数.md"}');
const _sfc_main = { name: "start-docs/B-JS/class与函数.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="class与构造函数" tabindex="-1">class与构造函数 <a class="header-anchor" href="#class与构造函数" aria-label="Permalink to &quot;class与构造函数&quot;">​</a></h1><h2 id="function来做构造函数" tabindex="-1">function来做构造函数 <a class="header-anchor" href="#function来做构造函数" aria-label="Permalink to &quot;function来做构造函数&quot;">​</a></h2><div class="language-js codearea-link" id="wf21s8umb8j"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">Car</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39; running...&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> redCar </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> blueCar </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;blue&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  redCar.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">//red running</span></span>\n<span class="line"><span style="color:#F8F8F2;">  blueCar.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// blue running</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="es6新增类" tabindex="-1">es6新增类 <a class="header-anchor" href="#es6新增类" aria-label="Permalink to &quot;es6新增类&quot;">​</a></h2><div class="language-js codearea-link" id="pyevrzx6jxg"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Car1</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39; running...&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> greenCar </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car1</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;green&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> blackCar </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car1</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;black&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  greenCar.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// green running</span></span>\n<span class="line"><span style="color:#F8F8F2;">  blackCar.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// black running</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="相同与不同" tabindex="-1">相同与不同 <a class="header-anchor" href="#相同与不同" aria-label="Permalink to &quot;相同与不同&quot;">​</a></h2><ul><li>相同点： <ul><li>类声明仅仅是基于已有自定义类型的语法糖。 typeof Car1 === &#39;function&#39;</li><li>类上的constructor实际就是function里的方法。 run其实就是绑定在自定义类型的prototype上。</li></ul></li><li>不同点： <ul><li>函数声明可以被提升，但是类与let类似，不能被提升。真正执行前，是一直处于临时死区</li><li>类声明中的所有代码自动运行在严格模式，而且无法强行脱离严格模式</li><li>在自定义类型中，通过object.defineProperty()方法可以手工指定某个方法不可枚举。而在类中，所有方法都不可枚举。</li><li>每一个类都有一个[[construct]]的内部方法，通过关键字new调用。那些不含[[construct]]方法会导致程序报错</li><li>使用除关键字new以为的方式调用类的构造函数会导致程序报错</li><li>在类中修改类名会导致程序报错</li></ul></li></ul>', 7)
  ]));
}
const class___ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  class___ as default
};
