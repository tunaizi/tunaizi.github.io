import{_ as n,r as a,i as l,a as p}from"./chunks/framework.bb8f9838.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"event bus","slug":"event-bus","link":"#event-bus","children":[]}],"relativePath":"start-docs/B-JS/EventBus.md","filePath":"start-docs/B-JS/EventBus.md"}'),t={name:"start-docs/B-JS/EventBus.md"};function o(e,s,F,c,r,y){return a(),l("div",null,s[0]||(s[0]=[p(`<h2 id="event-bus" tabindex="-1">event bus <a class="header-anchor" href="#event-bus" aria-label="Permalink to &quot;event bus&quot;">â€‹</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">EventEmitter</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#A6E22E;">addListener</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">			</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(type, fn);</span></span>
<span class="line"><span style="color:#F8F8F2;">		}</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">		</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> handle </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type);</span></span>
<span class="line"><span style="color:#F8F8F2;">		handle.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, [</span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> emitter </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">EventEmitter</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">emitter.</span><span style="color:#A6E22E;">addListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;ages&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">age</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(age);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">emitter.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;ages&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">18</span><span style="color:#F8F8F2;">);</span></span></code></pre><button class="link"></button></div>`,2)]))}const u=n(t,[["render",o]]);export{E as __pageData,u as default};
