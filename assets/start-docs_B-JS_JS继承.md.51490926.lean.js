import { _ as _export_sfc, r as r3, i as it, f as ig } from "./chunks/framework.29e23d3c.js";
const __pageData = JSON.parse('{"title":"继承的几种类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"原型链继承","slug":"原型链继承","link":"#原型链继承","children":[]},{"level":2,"title":"构造函数继承 （经典继承方式）","slug":"构造函数继承-经典继承方式","link":"#构造函数继承-经典继承方式","children":[]},{"level":2,"title":"组合继承 (常用)","slug":"组合继承-常用","link":"#组合继承-常用","children":[]},{"level":2,"title":"原型式继承","slug":"原型式继承","link":"#原型式继承","children":[]},{"level":2,"title":"寄生式继承","slug":"寄生式继承","link":"#寄生式继承","children":[]},{"level":2,"title":"寄生组合式继承 （常用）","slug":"寄生组合式继承-常用","link":"#寄生组合式继承-常用","children":[]}],"relativePath":"start-docs/B-JS/JS继承.md","filePath":"start-docs/B-JS/JS继承.md"}');
const _sfc_main = { name: "start-docs/B-JS/JS继承.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="继承的几种类型" tabindex="-1">继承的几种类型 <a class="header-anchor" href="#继承的几种类型" aria-label="Permalink to &quot;继承的几种类型&quot;">​</a></h1><div class="language-js codearea-link" id="j21cfb59xp"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 父类</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) { </span><span style="color:#88846F;">//提供构造函数，并增加属性和方法</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.colors </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;red&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E6DB74;">&#39;blue&#39;</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;car name: &#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39; and arguments&#39;</span><span style="color:#F8F8F2;">: ,</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">//增加原型属性和方法</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">Car</span><span style="color:#F8F8F2;">.prototype.wheelCount </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">Car</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name, </span><span style="color:#E6DB74;">&quot; running and arguments: &quot;</span><span style="color:#F8F8F2;">,</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AutoCar</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.colors </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;green&#39;</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.type </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;auto&#39;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="原型链继承" tabindex="-1">原型链继承 <a class="header-anchor" href="#原型链继承" aria-label="Permalink to &quot;原型链继承&quot;">​</a></h2><div class="language-js codearea-link" id="5in1safc2hm"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name;</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">Bmw</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;red&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;blue&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car1.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;aa&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car2.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;fast&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car1.colors.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;black&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(car2.colors); </span><span style="color:#88846F;">//[&#39;red&#39;,&#39;blue&#39;,&#39;black&#39;]</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>特点： 通过子类的原型对父类的实例化实现 Bmw.prototype = new Car()</li><li>优点： 可继承父类构造函数的属性、方法，原型的属性和方法</li><li>缺点： <ul><li>子类原型如果更改从父类继承来的引用类型属性(包括构造函数内或者原型链上的属性)时，会影响其他子类属性。</li><li>子类实例无法向父类构造函数传递参数</li><li>继承单一,不能继承多个父类</li></ul></li></ul><h2 id="构造函数继承-经典继承方式" tabindex="-1">构造函数继承 （经典继承方式） <a class="header-anchor" href="#构造函数继承-经典继承方式" aria-label="Permalink to &quot;构造函数继承 （经典继承方式）&quot;">​</a></h2><div class="language-js codearea-link" id="acqetfh3088"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	Car.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">	AutoCar.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;red&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;blue&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car1.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;aa&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car2.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;fast&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">//报错，没有run方法。</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>特点： 利用 call 或者 apply 将父类构造函数引入子类函数并执行</li><li>优点： <ul><li>避免引用类型属性被所有实例共享</li><li>可以向父类传递参数</li><li>可以继承多个构造函数属性</li></ul></li><li>缺点： <ul><li>没有继承父类原型的属性和方法</li><li>没有实现构造函数复用，每个新实例都有父类构造函数的副本。</li></ul></li></ul><h2 id="组合继承-常用" tabindex="-1">组合继承 (常用) <a class="header-anchor" href="#组合继承-常用" aria-label="Permalink to &quot;组合继承 (常用)&quot;">​</a></h2><div class="language-js codearea-link" id="afpz8c6mjtr"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	Car.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">Bmw</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Car</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;red&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;blue&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car1.</span><span style="color:#A6E22E;">getName</span><span style="color:#F8F8F2;">(); </span><span style="color:#88846F;">//car name: red</span></span>\n<span class="line"><span style="color:#F8F8F2;">car2.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;slow&quot;</span><span style="color:#F8F8F2;">); </span><span style="color:#88846F;">// blue running</span></span>\n<span class="line"><span style="color:#F8F8F2;">car1.colors.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;black&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(car2.colors); </span><span style="color:#88846F;">// [&#39;red&#39;, &#39;blue&#39;]</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>特点： 结合原型继承和构造函数继承</li><li>优点： 可以继承父类构造函数和原型链上方法和属性，并且引用类属性都是独立的。可以向父类传参。</li><li>缺点： 两次父类构造函数，耗损内存。</li></ul><h2 id="原型式继承" tabindex="-1">原型式继承 <a class="header-anchor" href="#原型式继承" aria-label="Permalink to &quot;原型式继承&quot;">​</a></h2><div class="language-js codearea-link" id="l415oe3qo4i"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createObj</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">F</span><span style="color:#F8F8F2;">() {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">F</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">F</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>此方法就是 es6 的 Object.create 原理实现</li><li>所有实例都会继承原型上的属性，但是无法实现复用。并且引用类型也会共享相应的值。</li></ul><h2 id="寄生式继承" tabindex="-1">寄生式继承 <a class="header-anchor" href="#寄生式继承" aria-label="Permalink to &quot;寄生式继承&quot;">​</a></h2><div class="language-js codearea-link" id="nqk5fbhqu0q"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createObj</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">o</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> clone </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(o);</span></span>\n<span class="line"><span style="color:#F8F8F2;">	clone.</span><span style="color:#A6E22E;">sayName</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">		console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;aaa&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">	};</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> clone;</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>此方法与构造函数模式一样，每次创建对象都会创建一遍方法。</li></ul><h2 id="寄生组合式继承-常用" tabindex="-1">寄生组合式继承 （常用） <a class="header-anchor" href="#寄生组合式继承-常用" aria-label="Permalink to &quot;寄生组合式继承 （常用）&quot;">​</a></h2><div class="language-js codearea-link" id="dvyc9of5kc"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">F</span><span style="color:#F8F8F2;">() {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#66D9EF;font-style:italic;">F</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> obj;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">F</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">	Car.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">//组合继承中为： &lt; Bmw.prototype = new Car()&gt;</span></span>\n<span class="line"><span style="color:#88846F;">// 在此处为了减少构造函数再次执行，直接将Bmw的原型访问Car的原型即可</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">create</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">Car</span><span style="color:#F8F8F2;">.prototype);</span></span>\n<span class="line"><span style="color:#F8F8F2;">prototype.constructor </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Bmw;</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">Bmw</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> prototype;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> car1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Bmw</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;red&quot;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">car1.</span><span style="color:#A6E22E;">run</span><span style="color:#F8F8F2;">();</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li><p>包含组合继承的优势，修复组合继承的问题。构造函数只执行了一次</p></li><li><p>参考文档：</p></li><li><p>[<a href="https://github.com/mqyqingfeng/Blog/issues/16" target="_blank" rel="noreferrer">https://github.com/mqyqingfeng/Blog/issues/16</a>]</p></li><li><p>[<a href="https://blog.csdn.net/qq_32682137/article/details/82426401" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_32682137/article/details/82426401</a>]</p></li><li><p>[<a href="https://mp.weixin.qq.com/s/6wJMTMl63S2LYZljobWb9w" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/6wJMTMl63S2LYZljobWb9w</a>]</p></li></ul>', 20)
  ]));
}
const JS__ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  JS__ as default
};
