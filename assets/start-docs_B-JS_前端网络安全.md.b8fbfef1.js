import{_ as s,r as o,i as a,a as t}from"./chunks/framework.bb8f9838.js";const y=JSON.parse('{"title":"常见的 Web 攻击","description":"","frontmatter":{},"headers":[{"level":2,"title":"XSS (Cross Site Script 跨站脚本)","slug":"xss-cross-site-script-跨站脚本","link":"#xss-cross-site-script-跨站脚本","children":[]},{"level":2,"title":"CSRF (Cross Site Request Forgery 跨站请求伪造)","slug":"csrf-cross-site-request-forgery-跨站请求伪造","link":"#csrf-cross-site-request-forgery-跨站请求伪造","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]},{"level":2,"title":"其他攻击","slug":"其他攻击","link":"#其他攻击","children":[]}],"relativePath":"start-docs/B-JS/前端网络安全.md","filePath":"start-docs/B-JS/前端网络安全.md"}'),e={name:"start-docs/B-JS/前端网络安全.md"};function n(i,l,p,r,c,F){return o(),a("div",null,l[0]||(l[0]=[t(`<h1 id="常见的-web-攻击" tabindex="-1">常见的 Web 攻击 <a class="header-anchor" href="#常见的-web-攻击" aria-label="Permalink to &quot;常见的 Web 攻击&quot;">​</a></h1><h2 id="xss-cross-site-script-跨站脚本" tabindex="-1">XSS (Cross Site Script 跨站脚本) <a class="header-anchor" href="#xss-cross-site-script-跨站脚本" aria-label="Permalink to &quot;XSS (Cross Site Script 跨站脚本)&quot;">​</a></h2><ul><li><p>指通过存在安全漏洞的 web 网站注册用户的浏览器内运行非法的非本站点的 HTML 标签或 JavaScript 进行的一种攻击</p><ul><li>反射型 -&gt; url 参数直接注入 <ul><li>例如： <code>&quot;http://localhost:3000/?from=&lt;script&gt;alert(3)&lt;/script&gt;&quot;</code></li></ul></li><li>存储型 -&gt; 存储到 DB 后，读取时注⼊ <ul><li>将富文本内含有恶意脚本直接存储在数据库，后端接口返回后直接执行</li></ul></li></ul></li><li><p>xss 攻击的危害</p><ul><li>获取页面数据</li><li>获取 cookies -&gt; document.cookie</li><li>劫持前端逻辑</li><li>发送请求</li><li>偷取网站的任意数据</li><li>偷取用户的资料</li><li>偷取用户的秘密和登录态</li><li>欺骗用户</li></ul></li><li><p>防范手段</p><ul><li>encode 转义 <ul><li>将一些有特殊意义的字符串进行替换，例如$,&lt;,&gt;</li></ul></li><li>针对于富文本，采用白名单过滤</li></ul></li><li><p>HttpOnly Cookie</p><ul><li>有效预防 xss 攻击窃取用户 cookie 最有效的方式。将 cookie 属性设置成 HttpOnly。</li><li>response.addHeader(&#39;Set-Cookie&#39;, &#39;uid=112;Path=/;HttpOnly&#39;)</li></ul></li></ul><h2 id="csrf-cross-site-request-forgery-跨站请求伪造" tabindex="-1">CSRF (Cross Site Request Forgery 跨站请求伪造) <a class="header-anchor" href="#csrf-cross-site-request-forgery-跨站请求伪造" aria-label="Permalink to &quot;CSRF (Cross Site Request Forgery 跨站请求伪造)&quot;">​</a></h2><ul><li>它利用用户已经登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。 <ul><li>用户已经登录了站点 A,并在本地保存了 cookie</li><li>在用户没有登出站点 A 的情况下，访问了攻击者恶意提供的危险站点 B</li><li>B 站点向 A 站点发送了一个请求 a.com/act=xx。浏览器会默认携带 a.com 的 cookie。 <ul><li>伪造 get 请求： <image src="http://www.a.com/withdraw?amount=1000"></image></li><li>伪造 post 请求<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">form</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">action</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;http://www.a.com/withdraw&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">method</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;POST&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;hidden&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">name</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;account&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">value</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;xiaoming&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;hidden&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">name</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;amount&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">value</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">1000</span><span style="color:#F44747;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#F92672;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">type</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;hidden&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">name</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;for&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">value</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;hacker&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">form</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><button class="link"></button></div></li></ul></li><li>而 A 没有做任何 CSRF 防御</li></ul></li><li>危害 <ul><li>利用用户登录态</li><li>冒充用户窃取信息</li></ul></li><li>防御 <ul><li>Cookie 的 SameSite 属性用来限制第三方 Cookie，从而减少安全风险。</li><li>同源检测： 检测 referer</li><li>使用 token 来进行前后端令牌认证</li><li>验证码，在核心操作如账户交易等，加验证码机制</li></ul></li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><ul><li>首先 token 不是防止 XSS 的，而是为了防止 CSRF 的；</li><li>CSRF 攻击的原因是浏览器会自动带上 cookie，而浏览器不会自动带上 token</li></ul><h2 id="其他攻击" tabindex="-1">其他攻击 <a class="header-anchor" href="#其他攻击" aria-label="Permalink to &quot;其他攻击&quot;">​</a></h2><ul><li>点击劫持 通过 iframe 进行点击劫持</li><li>SQL 注入</li><li>OS 注入</li><li>请求劫持</li><li>DDOS</li></ul>`,9)]))}const d=s(e,[["render",n]]);export{y as __pageData,d as default};
