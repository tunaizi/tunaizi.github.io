import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.6235ba6c.js";
const __pageData = JSON.parse('{"title":"TypeScript 背景","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript 的基本组成","slug":"typescript-的基本组成","link":"#typescript-的基本组成","children":[{"level":3,"title":"1. 语言（Language）","slug":"_1-语言-language","link":"#_1-语言-language","children":[]},{"level":3,"title":"2. 编译器（Compiler）","slug":"_2-编译器-compiler","link":"#_2-编译器-compiler","children":[]},{"level":3,"title":"3. 语言服务（Language Service）","slug":"_3-语言服务-language-service","link":"#_3-语言服务-language-service","children":[]},{"level":3,"title":"4. 工具生态","slug":"_4-工具生态","link":"#_4-工具生态","children":[]}]},{"level":2,"title":"TypeScript 与 JavaScript 的关系","slug":"typescript-与-javascript-的关系","link":"#typescript-与-javascript-的关系","children":[{"level":3,"title":"1. 超集关系","slug":"_1-超集关系","link":"#_1-超集关系","children":[]},{"level":3,"title":"2. 编译过程","slug":"_2-编译过程","link":"#_2-编译过程","children":[]}]},{"level":2,"title":"TypeScript 应用场景","slug":"typescript-应用场景","link":"#typescript-应用场景","children":[{"level":3,"title":"1. 企业级应用","slug":"_1-企业级应用","link":"#_1-企业级应用","children":[]},{"level":3,"title":"2. 框架开发","slug":"_2-框架开发","link":"#_2-框架开发","children":[]},{"level":3,"title":"3. 全栈开发","slug":"_3-全栈开发","link":"#_3-全栈开发","children":[]}]},{"level":2,"title":"TypeScript 学习路线建议","slug":"typescript-学习路线建议","link":"#typescript-学习路线建议","children":[{"level":3,"title":"1. 基础阶段","slug":"_1-基础阶段","link":"#_1-基础阶段","children":[]},{"level":3,"title":"2. 进阶阶段","slug":"_2-进阶阶段","link":"#_2-进阶阶段","children":[]},{"level":3,"title":"3. 实践阶段","slug":"_3-实践阶段","link":"#_3-实践阶段","children":[]}]},{"level":2,"title":"常见误区和注意事项","slug":"常见误区和注意事项","link":"#常见误区和注意事项","children":[{"level":3,"title":"1. 类型设计","slug":"_1-类型设计","link":"#_1-类型设计","children":[]},{"level":3,"title":"2. 开发效率","slug":"_2-开发效率","link":"#_2-开发效率","children":[]},{"level":3,"title":"3. 最佳实践","slug":"_3-最佳实践","link":"#_3-最佳实践","children":[]}]},{"level":2,"title":"TypeScript 核心概念","slug":"typescript-核心概念","link":"#typescript-核心概念","children":[{"level":3,"title":"1. 类型注解","slug":"_1-类型注解","link":"#_1-类型注解","children":[]},{"level":3,"title":"2. 接口和类型别名","slug":"_2-接口和类型别名","link":"#_2-接口和类型别名","children":[]},{"level":3,"title":"3. 函数类型","slug":"_3-函数类型","link":"#_3-函数类型","children":[]},{"level":3,"title":"4. 类和继承","slug":"_4-类和继承","link":"#_4-类和继承","children":[]},{"level":3,"title":"5. 泛型","slug":"_5-泛型","link":"#_5-泛型","children":[]},{"level":3,"title":"6. 高级类型","slug":"_6-高级类型","link":"#_6-高级类型","children":[]},{"level":3,"title":"7. 模块系统","slug":"_7-模块系统","link":"#_7-模块系统","children":[]},{"level":3,"title":"8. 装饰器","slug":"_8-装饰器","link":"#_8-装饰器","children":[]},{"level":3,"title":"9. 类型推断和类型兼容性","slug":"_9-类型推断和类型兼容性","link":"#_9-类型推断和类型兼容性","children":[]}]},{"level":2,"title":"TypeScript 高级特性","slug":"typescript-高级特性","link":"#typescript-高级特性","children":[{"level":3,"title":"1. 条件类型","slug":"_1-条件类型","link":"#_1-条件类型","children":[]},{"level":3,"title":"2. 映射类型","slug":"_2-映射类型","link":"#_2-映射类型","children":[]},{"level":3,"title":"3. 工具类型","slug":"_3-工具类型","link":"#_3-工具类型","children":[]},{"level":3,"title":"4. 类型守卫","slug":"_4-类型守卫","link":"#_4-类型守卫","children":[]},{"level":3,"title":"5. 声明合并","slug":"_5-声明合并","link":"#_5-声明合并","children":[]}]},{"level":2,"title":"TypeScript 工程实践","slug":"typescript-工程实践","link":"#typescript-工程实践","children":[{"level":3,"title":"1. 项目配置最佳实践","slug":"_1-项目配置最佳实践","link":"#_1-项目配置最佳实践","children":[]},{"level":3,"title":"2. 类型声明文件组织","slug":"_2-类型声明文件组织","link":"#_2-类型声明文件组织","children":[]},{"level":3,"title":"3. 性能优化技巧","slug":"_3-性能优化技巧","link":"#_3-性能优化技巧","children":[]},{"level":3,"title":"4. 调试技巧","slug":"_4-调试技巧","link":"#_4-调试技巧","children":[]}]}],"relativePath":"start-docs/C-TS/ts背景.md","filePath":"start-docs/C-TS/ts背景.md"}');
const _sfc_main = { name: "start-docs/C-TS/ts背景.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="typescript-背景" tabindex="-1">TypeScript 背景 <a class="header-anchor" href="#typescript-背景" aria-label="Permalink to &quot;TypeScript 背景&quot;">​</a></h1><p>TypeScript 是由微软开发的开源编程语言，它是 JavaScript 的超集，为 JavaScript 添加了可选的静态类型系统和许多其他强大的功能。以下是 TypeScript 的重要发展历程：</p><ul><li><p>2012 年 10 月：微软发布 TypeScript 1.0 版本，引入了基本的类型系统、类、模块等特性。</p></li><li><p>2014 年：TypeScript 1.0 正式发布，Angular 团队宣布 Angular 2.0 将使用 TypeScript 开发。</p></li><li><p>2016 年 9 月：TypeScript 2.0 发布，带来重要更新：</p><ul><li>null 和 undefined 的严格类型检查</li><li>非空断言操作符</li><li>标签联合类型</li><li>只读修饰符</li></ul></li><li><p>2018 年 7 月：TypeScript 3.0 发布，主要特性包括：</p><ul><li>工程引用</li><li>可调用的类型参数约束</li><li>元组类型的改进</li><li>rest 参数的元组类型</li></ul></li><li><p>2020 年 8 月：TypeScript 4.0 发布，引入：</p><ul><li>可变参数元组类型</li><li>标记的元组元素</li><li>构造函数的类属性推断</li><li>短路赋值运算符</li></ul></li><li><p>2022 年：TypeScript 4.8/4.9 发布，新增特性：</p><ul><li>satisfies 操作符</li><li>in 操作符的类型收窄改进</li><li>模板字符串类型改进</li><li>控制流分析的优化</li></ul></li><li><p>2023 年：TypeScript 5.0/5.1/5.2 发布，重要更新：</p><ul><li>装饰器的标准化实现</li><li>const 类型参数</li><li>using 声明</li><li>命名的和匿名的元组元素</li><li>moduleResolution bundler</li><li>类型只导入</li></ul></li></ul><p>TypeScript 的主要优势：</p><ol><li><p><strong>类型安全</strong>：通过静态类型检查，在编译时就能发现潜在错误</p></li><li><p><strong>开发工具支持</strong>：提供更好的代码补全、重构和导航功能</p></li><li><p><strong>ECMAScript 兼容</strong>：支持最新的 JavaScript 特性，并可编译为不同版本的 JavaScript</p></li><li><p><strong>大型项目可维护性</strong>：类型系统让代码更容易理解和维护</p></li><li><p><strong>流行框架的支持</strong>：Angular、Deno 等项目默认使用 TypeScript，Vue、React 等框架也提供了完善的 TypeScript 支持</p></li></ol><p>目前，TypeScript 已成为前端开发的主流语言之一，被越来越多的开发者和企业采用。</p><h2 id="typescript-的基本组成" tabindex="-1">TypeScript 的基本组成 <a class="header-anchor" href="#typescript-的基本组成" aria-label="Permalink to &quot;TypeScript 的基本组成&quot;">​</a></h2><p>TypeScript 由以下三个主要部分组成：</p><h3 id="_1-语言-language" tabindex="-1">1. 语言（Language） <a class="header-anchor" href="#_1-语言-language" aria-label="Permalink to &quot;1. 语言（Language）&quot;">​</a></h3><ul><li><p><strong>类型系统</strong></p><ul><li>基础类型：number, string, boolean, null, undefined, void, any, never</li><li>高级类型：联合类型、交叉类型、字面量类型、模板字面量类型</li><li>对象类型：interface, class, enum</li><li>泛型：用于创建可重用的组件</li><li>类型操作：typeof, keyof, instanceof, is</li></ul></li><li><p><strong>ECMAScript 特性</strong></p><ul><li>完整支持 ES6+ 的所有特性</li><li>装饰器</li><li>可选链操作符 (?.)</li><li>空值合并操作符 (??)</li></ul></li></ul><h3 id="_2-编译器-compiler" tabindex="-1">2. 编译器（Compiler） <a class="header-anchor" href="#_2-编译器-compiler" aria-label="Permalink to &quot;2. 编译器（Compiler）&quot;">​</a></h3><ul><li><p><strong>tsc 编译器</strong></p><ul><li>将 TypeScript 代码转换为 JavaScript</li><li>提供类型检查功能</li><li>支持源码映射（Source Maps）</li><li>配置选项丰富（tsconfig.json）</li></ul></li><li><p><strong>编译选项</strong></p><ul><li>target：指定输出的 JavaScript 版本</li><li>module：指定模块系统</li><li>strict：启用严格类型检查</li><li>outDir：指定输出目录</li><li>rootDir：指定源码目录</li></ul></li></ul><h3 id="_3-语言服务-language-service" tabindex="-1">3. 语言服务（Language Service） <a class="header-anchor" href="#_3-语言服务-language-service" aria-label="Permalink to &quot;3. 语言服务（Language Service）&quot;">​</a></h3><ul><li><p><strong>开发工具支持</strong></p><ul><li>代码补全</li><li>重构功能</li><li>智能提示</li><li>跳转到定义</li><li>查找引用</li></ul></li><li><p><strong>集成能力</strong></p><ul><li>VS Code 原生支持</li><li>支持主流 IDE 和编辑器</li><li>API 提供程序</li><li>错误检测和诊断</li></ul></li></ul><h3 id="_4-工具生态" tabindex="-1">4. 工具生态 <a class="header-anchor" href="#_4-工具生态" aria-label="Permalink to &quot;4. 工具生态&quot;">​</a></h3><ul><li><p><strong>类型定义文件</strong></p><ul><li>DefinitelyTyped 仓库</li><li>@types 包管理</li><li>声明文件（.d.ts）</li></ul></li><li><p><strong>构建工具集成</strong></p><ul><li>webpack, vite, rollup 等打包工具</li><li>babel 集成</li><li>ESLint 支持</li><li>Jest, Vitest 等测试框架</li></ul></li></ul><p>这些组件共同构成了 TypeScript 的完整生态系统，使其成为一个强大的开发平台。每个组件都扮演着重要角色：语言提供了类型系统和语法特性，编译器确保代码的正确性和转换，语言服务则提供了优秀的开发体验。</p><h2 id="typescript-与-javascript-的关系" tabindex="-1">TypeScript 与 JavaScript 的关系 <a class="header-anchor" href="#typescript-与-javascript-的关系" aria-label="Permalink to &quot;TypeScript 与 JavaScript 的关系&quot;">​</a></h2><h3 id="_1-超集关系" tabindex="-1">1. 超集关系 <a class="header-anchor" href="#_1-超集关系" aria-label="Permalink to &quot;1. 超集关系&quot;">​</a></h3><ul><li>TypeScript 是 JavaScript 的超集，这意味着： <ul><li>所有合法的 JavaScript 代码都是合法的 TypeScript 代码</li><li>可以在 TypeScript 中直接使用 JavaScript 库</li><li>.js 文件可以直接重命名为 .ts 文件</li></ul></li></ul><h3 id="_2-编译过程" tabindex="-1">2. 编译过程 <a class="header-anchor" href="#_2-编译过程" aria-label="Permalink to &quot;2. 编译过程&quot;">​</a></h3><ul><li>TypeScript 代码最终会被编译成 JavaScript 运行</li><li>编译过程包含： <ul><li>类型检查</li><li>代码转换</li><li>降级处理（将新特性转换为旧版本 JavaScript）</li><li>移除类型信息</li></ul></li></ul><h2 id="typescript-应用场景" tabindex="-1">TypeScript 应用场景 <a class="header-anchor" href="#typescript-应用场景" aria-label="Permalink to &quot;TypeScript 应用场景&quot;">​</a></h2><h3 id="_1-企业级应用" tabindex="-1">1. 企业级应用 <a class="header-anchor" href="#_1-企业级应用" aria-label="Permalink to &quot;1. 企业级应用&quot;">​</a></h3><ul><li>大型前端项目</li><li>复杂业务逻辑系统</li><li>多人协作项目</li><li>长期维护的应用</li></ul><h3 id="_2-框架开发" tabindex="-1">2. 框架开发 <a class="header-anchor" href="#_2-框架开发" aria-label="Permalink to &quot;2. 框架开发&quot;">​</a></h3><ul><li>前端框架</li><li>Node.js 应用</li><li>工具库开发</li><li>SDK 开发</li></ul><h3 id="_3-全栈开发" tabindex="-1">3. 全栈开发 <a class="header-anchor" href="#_3-全栈开发" aria-label="Permalink to &quot;3. 全栈开发&quot;">​</a></h3><ul><li>Node.js 后端开发</li><li>全栈应用开发</li><li>微服务架构</li><li>Serverless 开发</li></ul><h2 id="typescript-学习路线建议" tabindex="-1">TypeScript 学习路线建议 <a class="header-anchor" href="#typescript-学习路线建议" aria-label="Permalink to &quot;TypeScript 学习路线建议&quot;">​</a></h2><h3 id="_1-基础阶段" tabindex="-1">1. 基础阶段 <a class="header-anchor" href="#_1-基础阶段" aria-label="Permalink to &quot;1. 基础阶段&quot;">​</a></h3><ul><li>JavaScript 基础知识</li><li>TypeScript 基本类型系统</li><li>类型声明和注解</li><li>接口和类</li></ul><h3 id="_2-进阶阶段" tabindex="-1">2. 进阶阶段 <a class="header-anchor" href="#_2-进阶阶段" aria-label="Permalink to &quot;2. 进阶阶段&quot;">​</a></h3><ul><li>泛型编程</li><li>高级类型</li><li>类型推断</li><li>模块系统</li></ul><h3 id="_3-实践阶段" tabindex="-1">3. 实践阶段 <a class="header-anchor" href="#_3-实践阶段" aria-label="Permalink to &quot;3. 实践阶段&quot;">​</a></h3><ul><li>工程配置</li><li>开发工具使用</li><li>框架集成</li><li>性能优化</li></ul><h2 id="常见误区和注意事项" tabindex="-1">常见误区和注意事项 <a class="header-anchor" href="#常见误区和注意事项" aria-label="Permalink to &quot;常见误区和注意事项&quot;">​</a></h2><h3 id="_1-类型设计" tabindex="-1">1. 类型设计 <a class="header-anchor" href="#_1-类型设计" aria-label="Permalink to &quot;1. 类型设计&quot;">​</a></h3><ul><li>避免过度设计类型</li><li>合理使用 any</li><li>注意类型安全边界</li><li>理解类型推断机制</li></ul><h3 id="_2-开发效率" tabindex="-1">2. 开发效率 <a class="header-anchor" href="#_2-开发效率" aria-label="Permalink to &quot;2. 开发效率&quot;">​</a></h3><ul><li>合理配置编译选项</li><li>使用类型声明文件</li><li>掌握调试技巧</li><li>了解性能影响</li></ul><h3 id="_3-最佳实践" tabindex="-1">3. 最佳实践 <a class="header-anchor" href="#_3-最佳实践" aria-label="Permalink to &quot;3. 最佳实践&quot;">​</a></h3><ul><li>遵循类型优先设计</li><li>保持代码简洁性</li><li>注重代码可维护性</li><li>合理使用工具链 // ... 现有内容保持不变 ...</li></ul><h2 id="typescript-核心概念" tabindex="-1">TypeScript 核心概念 <a class="header-anchor" href="#typescript-核心概念" aria-label="Permalink to &quot;TypeScript 核心概念&quot;">​</a></h2><h3 id="_1-类型注解" tabindex="-1">1. 类型注解 <a class="header-anchor" href="#_1-类型注解" aria-label="Permalink to &quot;1. 类型注解&quot;">​</a></h3><ul><li><strong>基本语法</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;张三&#39;</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> age</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">25</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> isStudent</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span></code></pre></div></li><li><strong>数组类型</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> numbers</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">[] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> strings</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;c&#39;</span><span style="color:#F8F8F2;">]</span></span></code></pre></div></li><li><strong>元组类型</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> tuple</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E6DB74;">&#39;张三&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">25</span><span style="color:#F8F8F2;">]</span></span></code></pre></div></li></ul><h3 id="_2-接口和类型别名" tabindex="-1">2. 接口和类型别名 <a class="header-anchor" href="#_2-接口和类型别名" aria-label="Permalink to &quot;2. 接口和类型别名&quot;">​</a></h3><ul><li><strong>接口定义</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">interface</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">sayHello</span><span style="color:#F8F8F2;">()</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">void</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><strong>类型别名</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Point</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  x</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">  y</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_3-函数类型" tabindex="-1">3. 函数类型 <a class="header-anchor" href="#_3-函数类型" aria-label="Permalink to &quot;3. 函数类型&quot;">​</a></h3><ul><li><strong>函数声明</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> y</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><strong>可选参数和默认参数</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">greet</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">greeting</span><span style="color:#F92672;">?:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;Hello&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">`</span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">greeting</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">, </span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">!`</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_4-类和继承" tabindex="-1">4. 类和继承 <a class="header-anchor" href="#_4-类和继承" aria-label="Permalink to &quot;4. 类和继承&quot;">​</a></h3><ul><li><strong>类的定义</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> name</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">move</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">distance</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">`</span><span style="color:#F92672;">${</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> moved </span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">distance</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">m.`</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><strong>继承</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Dog</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">bark</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Woof! Woof!&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_5-泛型" tabindex="-1">5. 泛型 <a class="header-anchor" href="#_5-泛型" aria-label="Permalink to &quot;5. 泛型&quot;">​</a></h3><ul><li><strong>基本用法</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">identity</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FD971F;font-style:italic;">arg</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> arg</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><strong>泛型接口</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">interface</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Container</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  value</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">getValue</span><span style="color:#F8F8F2;">()</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_6-高级类型" tabindex="-1">6. 高级类型 <a class="header-anchor" href="#_6-高级类型" aria-label="Permalink to &quot;6. 高级类型&quot;">​</a></h3><ul><li><strong>联合类型</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">StringOrNumber</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span></code></pre></div></li><li><strong>交叉类型</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Employee</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> { employeeId</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> }</span></span></code></pre></div></li><li><strong>类型断言</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> someValue</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">any</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;this is a string&#39;</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> strLength</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (someValue </span><span style="color:#F92672;">as</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">).length</span></span></code></pre></div></li></ul><h3 id="_7-模块系统" tabindex="-1">7. 模块系统 <a class="header-anchor" href="#_7-模块系统" aria-label="Permalink to &quot;7. 模块系统&quot;">​</a></h3><ul><li><strong>导出</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">interface</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">User</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">createUser</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">age</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">User</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> { name, age }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><strong>导入</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { User, createUser } </span><span style="color:#F92672;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;./user&#39;</span></span></code></pre></div></li></ul><h3 id="_8-装饰器" tabindex="-1">8. 装饰器 <a class="header-anchor" href="#_8-装饰器" aria-label="Permalink to &quot;8. 装饰器&quot;">​</a></h3><ul><li><p><strong>类装饰器</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">logger</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">any</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">`创建了新的实例：</span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">target.name</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">`</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">@logger</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Example</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ...</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><p><strong>属性装饰器</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">readonly</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">any</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">key</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#A6E22E;">defineProperty</span><span style="color:#F8F8F2;">(target, key, {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    writable: </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"><span style="color:#F8F8F2;">  })</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_9-类型推断和类型兼容性" tabindex="-1">9. 类型推断和类型兼容性 <a class="header-anchor" href="#_9-类型推断和类型兼容性" aria-label="Permalink to &quot;9. 类型推断和类型兼容性&quot;">​</a></h3><ul><li><strong>类型推断</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> x </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 自动推断为 number 类型</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#88846F;">// 自动推断为 number[] 类型</span></span></code></pre></div></li><li><strong>类型兼容性</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">interface</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Pet</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Dog</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> pet</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Pet</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Dog</span><span style="color:#F8F8F2;">() </span><span style="color:#88846F;">// OK，结构兼容</span></span></code></pre></div></li></ul><p>这些基础知识点涵盖了：</p><ol><li>基本的类型系统使用</li><li>面向对象编程特性</li><li>函数式编程支持</li><li>模块化开发</li><li>装饰器模式</li><li>类型系统的高级特性</li></ol><p>// ... 现有内容保持不变 ...</p><h2 id="typescript-高级特性" tabindex="-1">TypeScript 高级特性 <a class="header-anchor" href="#typescript-高级特性" aria-label="Permalink to &quot;TypeScript 高级特性&quot;">​</a></h2><h3 id="_1-条件类型" tabindex="-1">1. 条件类型 <a class="header-anchor" href="#_1-条件类型" aria-label="Permalink to &quot;1. 条件类型&quot;">​</a></h3><ul><li><p><strong>基本语法</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">IsString</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">false</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Result</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">IsString</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#88846F;">// true</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Result2</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">IsString</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#AE81FF;">42</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#88846F;">// false</span></span></code></pre></div></li><li><p><strong>分布式条件类型</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ToArray</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">any</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">never</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">StrNumArr</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ToArray</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#88846F;">// string[] | number[]</span></span></code></pre></div></li></ul><h3 id="_2-映射类型" tabindex="-1">2. 映射类型 <a class="header-anchor" href="#_2-映射类型" aria-label="Permalink to &quot;2. 映射类型&quot;">​</a></h3><ul><li><p><strong>只读映射</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Readonly</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">readonly</span><span style="color:#F8F8F2;"> [</span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">keyof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">]</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[</span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><p><strong>可选映射</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Partial</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">in</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">keyof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">]</span><span style="color:#F92672;">?:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">[</span><span style="color:#A6E22E;text-decoration:underline;">P</span><span style="color:#F8F8F2;">]</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_3-工具类型" tabindex="-1">3. 工具类型 <a class="header-anchor" href="#_3-工具类型" aria-label="Permalink to &quot;3. 工具类型&quot;">​</a></h3><ul><li><strong>内置工具类型</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// Pick</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">  address</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">NameAge</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Pick</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;name&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;age&#39;</span><span style="color:#F8F8F2;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// Omit</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">NoAddress</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Omit</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">Person</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;address&#39;</span><span style="color:#F8F8F2;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// Record</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">PageConfig</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#E6DB74;">&#39;home&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;about&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;contact&#39;</span><span style="color:#F8F8F2;">, { title</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> }&gt;</span></span></code></pre></div></li></ul><h3 id="_4-类型守卫" tabindex="-1">4. 类型守卫 <a class="header-anchor" href="#_4-类型守卫" aria-label="Permalink to &quot;4. 类型守卫&quot;">​</a></h3><ul><li><p><strong>typeof 守卫</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">processValue</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> val </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;string&#39;</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> val.</span><span style="color:#A6E22E;">toLowerCase</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> val.</span><span style="color:#A6E22E;">toFixed</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><p><strong>instanceof 守卫</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Bird</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">fly</span><span style="color:#F8F8F2;">() {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Fish</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#A6E22E;">swim</span><span style="color:#F8F8F2;">() {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">move</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">pet</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Bird</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Fish</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (pet </span><span style="color:#F92672;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Bird</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    pet.</span><span style="color:#A6E22E;">fly</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    pet.</span><span style="color:#A6E22E;">swim</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h3 id="_5-声明合并" tabindex="-1">5. 声明合并 <a class="header-anchor" href="#_5-声明合并" aria-label="Permalink to &quot;5. 声明合并&quot;">​</a></h3><ul><li><p><strong>接口合并</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">interface</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  height</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">interface</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Box</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  width</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">number</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#88846F;">// 结果：interface Box { height: number; width: number }</span></span></code></pre></div></li><li><p><strong>命名空间合并</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">namespace</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Animals</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Dog</span><span style="color:#F8F8F2;"> {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">namespace</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Animals</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Cat</span><span style="color:#F8F8F2;"> {}</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li></ul><h2 id="typescript-工程实践" tabindex="-1">TypeScript 工程实践 <a class="header-anchor" href="#typescript-工程实践" aria-label="Permalink to &quot;TypeScript 工程实践&quot;">​</a></h2><h3 id="_1-项目配置最佳实践" tabindex="-1">1. 项目配置最佳实践 <a class="header-anchor" href="#_1-项目配置最佳实践" aria-label="Permalink to &quot;1. 项目配置最佳实践&quot;">​</a></h3><ul><li><strong>tsconfig.json 推荐配置</strong><div class="language-json codearea-link" id="pmolxacigl"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">&quot;compilerOptions&quot;</span><span style="color:#F8F8F2;">: {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;target&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;ES2020&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;module&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;ESNext&quot;</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;strict&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;esModuleInterop&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;skipLibCheck&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">true</span><span style="color:#F8F8F2;">,</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">&quot;forceConsistentCasingInFileNames&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div></li></ul><h3 id="_2-类型声明文件组织" tabindex="-1">2. 类型声明文件组织 <a class="header-anchor" href="#_2-类型声明文件组织" aria-label="Permalink to &quot;2. 类型声明文件组织&quot;">​</a></h3><ul><li><strong>项目结构</strong><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">src/</span></span>\n<span class="line"><span style="color:#F8F8F2;">├── types/</span></span>\n<span class="line"><span style="color:#F8F8F2;">│   ├── global.d.ts     // 全局类型声明</span></span>\n<span class="line"><span style="color:#F8F8F2;">│   └── modules.d.ts    // 模块类型声明</span></span>\n<span class="line"><span style="color:#F8F8F2;">├── components/</span></span>\n<span class="line"><span style="color:#F8F8F2;">└── utils/</span></span></code></pre></div></li></ul><h3 id="_3-性能优化技巧" tabindex="-1">3. 性能优化技巧 <a class="header-anchor" href="#_3-性能优化技巧" aria-label="Permalink to &quot;3. 性能优化技巧&quot;">​</a></h3><ul><li><p><strong>类型缓存</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 使用类型别名缓存复杂类型</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ComplexType</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// ... 复杂的类型定义</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 重复使用缓存的类型</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ExtendedType</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">ComplexType</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  extraProp</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">string</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></li><li><p><strong>条件类型优化</strong></p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 避免深层嵌套的条件类型</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Flatten</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">infer</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">U</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">U</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span></span></code></pre></div></li></ul><h3 id="_4-调试技巧" tabindex="-1">4. 调试技巧 <a class="header-anchor" href="#_4-调试技巧" aria-label="Permalink to &quot;4. 调试技巧&quot;">​</a></h3><ul><li><strong>类型检查</strong><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 使用 type-check 函数</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">typeCheck</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FD971F;font-style:italic;">value</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">T</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> value</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 使用时</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> checked </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">typeCheck</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#66D9EF;font-style:italic;">string</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E6DB74;">&#39;hello&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre></div></li></ul><p>这些补充内容涵盖了：</p><ol><li>高级类型系统特性的实际应用</li><li>工程化实践的具体方案</li><li>性能优化的实用技巧</li><li>开发调试的实用工具</li></ol>', 87)
  ]));
}
const ts__ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  ts__ as default
};
