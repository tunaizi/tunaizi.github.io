import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.9c9a3542.js";
const __pageData = JSON.parse('{"title":"哈希表 map&set","description":"","frontmatter":{},"headers":[{"level":2,"title":"有效的字母异位词","slug":"有效的字母异位词","link":"#有效的字母异位词","children":[]},{"level":2,"title":"两数之和 使用 map o(n)","slug":"两数之和-使用-map-o-n","link":"#两数之和-使用-map-o-n","children":[]},{"level":2,"title":"三数之和 使用 map o(n**2) 空间复杂度是 o(n)","slug":"三数之和-使用-map-o-n-2-空间复杂度是-o-n","link":"#三数之和-使用-map-o-n-2-空间复杂度是-o-n","children":[]}],"relativePath":"start-docs/A-数据结构/_哈希表.md","filePath":"start-docs/A-数据结构/_哈希表.md"}');
const _sfc_main = { name: "start-docs/A-数据结构/_哈希表.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="哈希表-map-set" tabindex="-1">哈希表 map&amp;set <a class="header-anchor" href="#哈希表-map-set" aria-label="Permalink to &quot;哈希表 map&amp;set&quot;">​</a></h1><p><strong>使用哈希表（Map 和 Set）解决的经典算法问题</strong></p><p>有效的字母异位词：介绍了两种方法，一种基于排序，另一种基于哈希表。 两数之和：使用哈希表来实现 O(n) 时间复杂度的解决方案。 三数之和：介绍了两种方法，一种基于哈希表，另一种基于排序和双指针。 这些方法展示了如何利用哈希表来优化算法的时间复杂度，并解决实际问题。</p><h2 id="有效的字母异位词" tabindex="-1">有效的字母异位词 <a class="header-anchor" href="#有效的字母异位词" aria-label="Permalink to &quot;有效的字母异位词&quot;">​</a></h2><p>问题描述： 判断两个字符串是否为字母异位词，即两个字符串包含相同的字符且每个字符的出现次数相同。</p><p>方法一：将两个字符串分别排序，然后比较排序后的字符串是否相等。</p><ul><li><strong>时间复杂度：</strong> O(n log n)，因为排序操作的时间复杂度为 O(n log n)。</li><li><strong>空间复杂度：</strong> O(n)，因为排序操作需要额外的空间。</li></ul><div class="language-js codearea-link" id="gnxniw5253w"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">isAnagram</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">s</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">t</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> s.</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">sort</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> t.</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">sort</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>方法二：使用一个长度为 26 的数组来记录每个字母的出现次数。</p><div class="language-js codearea-link" id="32882655szu"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">isAnagram</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">s</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">t</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (s.length </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> t.length) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> table </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Array</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">26</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> s.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    table[s.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)]</span><span style="color:#F92672;">++</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> t.length; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    table[t.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)]</span><span style="color:#F92672;">--</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (table[t.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i) </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">)] </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">false</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">true</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li><strong>时间复杂度：</strong> O(n)，只需遍历字符串一次。</li><li><strong>空间复杂度：</strong> O(1)，数组大小固定为 26。</li></ul><h2 id="两数之和-使用-map-o-n" tabindex="-1">两数之和 使用 map o(n) <a class="header-anchor" href="#两数之和-使用-map-o-n" aria-label="Permalink to &quot;两数之和 使用 map o(n)&quot;">​</a></h2><ul><li><strong>问题描述：</strong> 给定一个整数数组 nums 和一个目标值 target，找出数组中和为目标值的两个数，并返回它们的索引。</li></ul><div class="language-js codearea-link" id="u3slcrfb8j"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai has-diff"><code><span class="line"><span style="color:#88846F;">/**</span></span>\n<span class="line"><span style="color:#88846F;"> * 给定 nums = [2, 7, 11, 15], target = 9。因为 nums[0] + nums[1] = 2 + 7 = 9。所以返回 [0, 1]。</span></span>\n<span class="line"><span style="color:#88846F;"> */</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">twoSum</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> map </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">()</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, len </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nums.length; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> diff </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> target </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> nums[i]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (map.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(diff)) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> [map.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(diff), i]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    map.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(nums[i], i)</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="三数之和-使用-map-o-n-2-空间复杂度是-o-n" tabindex="-1">三数之和 使用 map o(n**2) 空间复杂度是 o(n) <a class="header-anchor" href="#三数之和-使用-map-o-n-2-空间复杂度是-o-n" aria-label="Permalink to &quot;三数之和 使用 map o(n\\*\\*2) 空间复杂度是 o(n)&quot;">​</a></h2><ul><li><strong>问题描述：</strong> 给定一个整数数组 nums，找出所有不重复的三元组，使得它们的和为 0。</li><li>如果先排序，再使用双指针缩小，则可以省掉空间复杂度，时间复杂度不变 解决方案：</li></ul><p><strong>方法一</strong>：使用一个哈希表来存储可能的两数之和。</p><div class="language-js codearea-link" id="y0tesefcaxg"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> hash </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}</span></span>\n<span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> nums.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#88846F;">// 每个人</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; j </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> nums.length </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">; j</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 依次拉上其他每个人</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (hash[nums[j]] </span><span style="color:#F92672;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">undefined</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 已经有合适自己的两人组</span></span>\n<span class="line"><span style="color:#F8F8F2;">      res.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">([nums[j]].</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(hash[nums[j]]))</span></span>\n<span class="line"><span style="color:#F8F8F2;">      hash[nums[j]] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">undefined</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#88846F;">// 没有合适自己的两人组</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> mark </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> nums[i] </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> nums[j]</span></span>\n<span class="line"><span style="color:#F8F8F2;">      hash[mark] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [nums[i], nums[j]]</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> res</span></span></code></pre><button class="link">将此代码在线运行</button></div><ul><li>**时间复杂度：**O(n^2)，需要两层循环。</li><li>**空间复杂度：**O(n)，哈希表的空间复杂度。</li></ul><p><strong>方法二</strong>：先对数组进行排序，然后使用双指针来查找三元组。</p><div class="language-js codearea-link" id="e0shirevrbi"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">threeSum</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">nums</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> ans </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> []</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> len </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nums.length</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (nums </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> len </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> ans</span></span>\n<span class="line"><span style="color:#F8F8F2;">  nums.</span><span style="color:#A6E22E;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> b) </span><span style="color:#88846F;">// 排序</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (nums[i] </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">break</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 如果当前数字大于0，则三数之和一定大于0，所以结束循环</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> nums[i] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> nums[i </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) </span><span style="color:#F92672;">continue</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 去重</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> L </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> R </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> len </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (L </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> R) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> sum </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> nums[i] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> nums[L] </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> nums[R]</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (sum </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        ans.</span><span style="color:#A6E22E;">push</span><span style="color:#F8F8F2;">([nums[i], nums[L], nums[R]])</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (L </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> R </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> nums[L] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> nums[L </span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) L</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 去重</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">while</span><span style="color:#F8F8F2;"> (L </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> R </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> nums[R] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> nums[R </span><span style="color:#F92672;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]) R</span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;"> </span><span style="color:#88846F;">// 去重</span></span>\n<span class="line"><span style="color:#F8F8F2;">        L</span><span style="color:#F92672;">++</span></span>\n<span class="line"><span style="color:#F8F8F2;">        R</span><span style="color:#F92672;">--</span></span>\n<span class="line"><span style="color:#F8F8F2;">      } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (sum </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) L</span><span style="color:#F92672;">++</span></span>\n<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (sum </span><span style="color:#F92672;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">) R</span><span style="color:#F92672;">--</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#F92672;">return</span><span style="color:#F8F8F2;"> ans</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div>', 21)
  ]));
}
const ____ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  ____ as default
};
