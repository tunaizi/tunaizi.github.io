import { _ as _export_sfc, r as r3, i as it, a as ig } from "./chunks/framework.e6716b1e.js";
const __pageData = JSON.parse('{"title":"EventBus (事件总线)","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是 EventBus","slug":"什么是-eventbus","link":"#什么是-eventbus","children":[]},{"level":2,"title":"基本实现","slug":"基本实现","link":"#基本实现","children":[]},{"level":2,"title":"使用示例","slug":"使用示例","link":"#使用示例","children":[]},{"level":2,"title":"实际应用场景","slug":"实际应用场景","link":"#实际应用场景","children":[{"level":3,"title":"1. 跨组件通信","slug":"_1-跨组件通信","link":"#_1-跨组件通信","children":[]},{"level":3,"title":"2. 模块解耦","slug":"_2-模块解耦","link":"#_2-模块解耦","children":[]},{"level":3,"title":"3. 全局状态管理","slug":"_3-全局状态管理","link":"#_3-全局状态管理","children":[]}]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]},{"level":2,"title":"为什么会发生内存泄漏？","slug":"为什么会发生内存泄漏","link":"#为什么会发生内存泄漏","children":[{"level":3,"title":"1. 事件监听器未及时移除","slug":"_1-事件监听器未及时移除","link":"#_1-事件监听器未及时移除","children":[]}]},{"level":2,"title":"为什么会发生内存泄漏？","slug":"为什么会发生内存泄漏-1","link":"#为什么会发生内存泄漏-1","children":[{"level":3,"title":"1. 事件监听器未及时移除","slug":"_1-事件监听器未及时移除-1","link":"#_1-事件监听器未及时移除-1","children":[]},{"level":3,"title":"2. 闭包引用","slug":"_2-闭包引用","link":"#_2-闭包引用","children":[]}]},{"level":2,"title":"如何避免内存泄漏","slug":"如何避免内存泄漏","link":"#如何避免内存泄漏","children":[{"level":3,"title":"1. 手动移除监听器","slug":"_1-手动移除监听器","link":"#_1-手动移除监听器","children":[]},{"level":3,"title":"2. 使用 WeakMap 存储","slug":"_2-使用-weakmap-存储","link":"#_2-使用-weakmap-存储","children":[]},{"level":3,"title":"3. 使用 once 方法","slug":"_3-使用-once-方法","link":"#_3-使用-once-方法","children":[]},{"level":3,"title":"4. 统一管理事件监听","slug":"_4-统一管理事件监听","link":"#_4-统一管理事件监听","children":[]}]},{"level":2,"title":"检测内存泄漏","slug":"检测内存泄漏","link":"#检测内存泄漏","children":[{"level":3,"title":"1. Chrome DevTools","slug":"_1-chrome-devtools","link":"#_1-chrome-devtools","children":[]},{"level":3,"title":"2. 使用 WeakRef 进行监控","slug":"_2-使用-weakref-进行监控","link":"#_2-使用-weakref-进行监控","children":[]}]},{"level":2,"title":"最佳实践","slug":"最佳实践-1","link":"#最佳实践-1","children":[]}],"relativePath":"start-docs/B-JS/EventBus.md","filePath":"start-docs/B-JS/EventBus.md"}');
const _sfc_main = { name: "start-docs/B-JS/EventBus.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="eventbus-事件总线" tabindex="-1">EventBus (事件总线) <a class="header-anchor" href="#eventbus-事件总线" aria-label="Permalink to &quot;EventBus (事件总线)&quot;">​</a></h1><h2 id="什么是-eventbus" tabindex="-1">什么是 EventBus <a class="header-anchor" href="#什么是-eventbus" aria-label="Permalink to &quot;什么是 EventBus&quot;">​</a></h2><p>EventBus 是一种发布-订阅（Publish/Subscribe）模式的实现，它是一个全局事件管理器，用于处理跨组件/模块的事件通信。</p><h2 id="基本实现" tabindex="-1">基本实现 <a class="header-anchor" href="#基本实现" aria-label="Permalink to &quot;基本实现&quot;">​</a></h2><div class="language-js codearea-link" id="pyh9s485tbk"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">EventBus</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 使用 Map 存储事件和回调函数的对应关系</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 订阅事件</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> handlers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">handlers) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            handlers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(type, handlers);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        handlers.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(fn);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 取消订阅</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> handlers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (handlers) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (fn) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                handlers.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(fn);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(type);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 触发事件</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> handlers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (handlers) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            handlers.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, args);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            });</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 只订阅一次</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">once</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">type</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">wrapper</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">args</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, args);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(type, wrapper);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        };</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(type, wrapper);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><div class="language-js codearea-link" id="g5rnjsbr2jm"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 创建事件总线实例</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> eventBus </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">EventBus</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 订阅事件</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">handler1</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;handler1 收到消息:&#39;</span><span style="color:#F8F8F2;">, data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">};</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;message&#39;</span><span style="color:#F8F8F2;">, handler1);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 订阅一次性事件</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">once</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;oneTimeEvent&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;这个处理器只会执行一次:&#39;</span><span style="color:#F8F8F2;">, data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 发送事件</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;message&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;你好！&#39;</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// 输出: handler1 收到消息: 你好！</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;oneTimeEvent&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;一次性消息&#39;</span><span style="color:#F8F8F2;">);  </span><span style="color:#88846F;">// 输出: 这个处理器只会执行一次: 一次性消息</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 取消订阅</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;message&#39;</span><span style="color:#F8F8F2;">, handler1);</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="实际应用场景" tabindex="-1">实际应用场景 <a class="header-anchor" href="#实际应用场景" aria-label="Permalink to &quot;实际应用场景&quot;">​</a></h2><h3 id="_1-跨组件通信" tabindex="-1">1. 跨组件通信 <a class="header-anchor" href="#_1-跨组件通信" aria-label="Permalink to &quot;1. 跨组件通信&quot;">​</a></h3><div class="language-js codearea-link" id="3y5mk7kte7"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 组件A</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;userUpdated&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">userData</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 更新用户信息显示</span></span>\n<span class="line"><span style="color:#F8F8F2;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 组件B</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">updateUser</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 更新用户数据</span></span>\n<span class="line"><span style="color:#F8F8F2;">    eventBus.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;userUpdated&#39;</span><span style="color:#F8F8F2;">, data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-模块解耦" tabindex="-1">2. 模块解耦 <a class="header-anchor" href="#_2-模块解耦" aria-label="Permalink to &quot;2. 模块解耦&quot;">​</a></h3><div class="language-js codearea-link" id="23zh5a1u95o"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 购物车模块</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;addToCart&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">product</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 处理添加购物车逻辑</span></span>\n<span class="line"><span style="color:#F8F8F2;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 商品模块</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">addProductToCart</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">product</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    eventBus.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;addToCart&#39;</span><span style="color:#F8F8F2;">, product);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-全局状态管理" tabindex="-1">3. 全局状态管理 <a class="header-anchor" href="#_3-全局状态管理" aria-label="Permalink to &quot;3. 全局状态管理&quot;">​</a></h3><div class="language-js codearea-link" id="76e2q0ejl4"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 主题切换</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;themeChange&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FD971F;font-style:italic;">theme</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    document.body.className </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> theme;</span></span>\n<span class="line"><span style="color:#F8F8F2;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 设置按钮</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">toggleTheme</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    eventBus.</span><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;themeChange&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;dark-theme&#39;</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li><strong>内存管理</strong></li></ol><ul><li>及时取消不需要的订阅，避免内存泄漏</li></ul><div class="language-js codearea-link" id="7me3w75vp35"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 组件销毁时</span></span>\n<span class="line"><span style="color:#A6E22E;">componentWillUnmount</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    eventBus.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;eventName&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="2"><li><strong>事件命名</strong></li></ol><ul><li>使用清晰的命名约定，避免冲突</li></ul><div class="language-js codearea-link" id="2c20hf27raf"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 推荐的命名方式</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;user:login&#39;</span><span style="color:#F8F8F2;">, handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;cart:add&#39;</span><span style="color:#F8F8F2;">, handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;theme:change&#39;</span><span style="color:#F8F8F2;">, handler);</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="3"><li><strong>错误处理</strong></li></ol><div class="language-js codearea-link" id="u7cflafw53p"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(type, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">args) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> handlers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (handlers) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        handlers.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, args);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">`Error in event handler for </span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">type</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">:`</span><span style="color:#F8F8F2;">, error);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        });</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="4"><li><strong>调试支持</strong></li></ol><div class="language-js codearea-link" id="5jb3wsf95j"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#A6E22E;">emit</span><span style="color:#F8F8F2;">(type, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">args) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> handlers </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(type);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (handlers) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">`[EventBus] Emitting </span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">type</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;"> with:`</span><span style="color:#F8F8F2;">, args);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        handlers.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> fn.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">, args));</span></span>\n<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">warn</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">`[EventBus] No handlers for event: </span><span style="color:#F92672;">${</span><span style="color:#F8F8F2;">type</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">`</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><ol><li>解耦组件/模块间的依赖</li><li>简化跨组件通信</li><li>实现灵活的事件处理机制</li></ol><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li>可能导致事件追踪困难</li><li>过度使用会使程序流程难以理解</li><li>需要注意内存泄漏问题</li></ol><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li>在小型应用中使用 EventBus</li><li>对于大型应用，考虑使用 Vuex/Redux 等状态管理工具</li><li>及时清理不用的事件监听</li><li>使用统一的事件命名规范</li></ol><h1 id="eventbus-内存泄漏问题" tabindex="-1">EventBus 内存泄漏问题 <a class="header-anchor" href="#eventbus-内存泄漏问题" aria-label="Permalink to &quot;EventBus 内存泄漏问题&quot;">​</a></h1><h2 id="为什么会发生内存泄漏" tabindex="-1">为什么会发生内存泄漏？ <a class="header-anchor" href="#为什么会发生内存泄漏" aria-label="Permalink to &quot;为什么会发生内存泄漏？&quot;">​</a></h2><h3 id="_1-事件监听器未及时移除" tabindex="-1">1. 事件监听器未及时移除 <a class="header-anchor" href="#_1-事件监听器未及时移除" aria-label="Permalink to &quot;1. 事件监听器未及时移除&quot;">​</a></h3><div class="language-js codearea-link" id="kozm1rl491h"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 添加事件监听</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;someEvent&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleEvent);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">handleEvent</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 如果没有在组件销毁时移除监听器</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// this.handleEvent 会一直被 EventBus 持有</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 导致整个组件实例无法被垃圾回收</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h1 id="eventbus-内存泄漏问题-1" tabindex="-1">EventBus 内存泄漏问题 <a class="header-anchor" href="#eventbus-内存泄漏问题-1" aria-label="Permalink to &quot;EventBus 内存泄漏问题&quot;">​</a></h1><h2 id="为什么会发生内存泄漏-1" tabindex="-1">为什么会发生内存泄漏？ <a class="header-anchor" href="#为什么会发生内存泄漏-1" aria-label="Permalink to &quot;为什么会发生内存泄漏？&quot;">​</a></h2><h3 id="_1-事件监听器未及时移除-1" tabindex="-1">1. 事件监听器未及时移除 <a class="header-anchor" href="#_1-事件监听器未及时移除-1" aria-label="Permalink to &quot;1. 事件监听器未及时移除&quot;">​</a></h3><div class="language-js codearea-link" id="44lbxmlk2gp"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 添加事件监听</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;someEvent&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleEvent);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">handleEvent</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 如果没有在组件销毁时移除监听器</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// this.handleEvent 会一直被 EventBus 持有</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 导致整个组件实例无法被垃圾回收</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-闭包引用" tabindex="-1">2. 闭包引用 <a class="header-anchor" href="#_2-闭包引用" aria-label="Permalink to &quot;2. 闭包引用&quot;">​</a></h3><div class="language-js codearea-link" id="z89wd4xdb7"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E6DB74;">&#39;大量数据&#39;</span><span style="color:#F8F8F2;">;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 闭包持有了 this 引用</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;someEvent&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        });</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 即使组件被销毁，由于事件监听器中的闭包</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 仍然引用着 this.data，导致内存无法释放</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="如何避免内存泄漏" tabindex="-1">如何避免内存泄漏 <a class="header-anchor" href="#如何避免内存泄漏" aria-label="Permalink to &quot;如何避免内存泄漏&quot;">​</a></h2><h3 id="_1-手动移除监听器" tabindex="-1">1. 手动移除监听器 <a class="header-anchor" href="#_1-手动移除监听器" aria-label="Permalink to &quot;1. 手动移除监听器&quot;">​</a></h3><div class="language-js codearea-link" id="qk0030auv6"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleEvent </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleEvent.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;someEvent&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleEvent);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">handleEvent</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">data</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(data);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// 在组件销毁时移除监听器</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">destroy</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;someEvent&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handleEvent);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-使用-weakmap-存储" tabindex="-1">2. 使用 WeakMap 存储 <a class="header-anchor" href="#_2-使用-weakmap-存储" aria-label="Permalink to &quot;2. 使用 WeakMap 存储&quot;">​</a></h3><div class="language-js codearea-link" id="3ol39yl5coe"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">EventBus</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 使用 WeakMap 存储事件和处理函数</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.events </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakMap</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#88846F;">// ... 其他实现</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_3-使用-once-方法" tabindex="-1">3. 使用 once 方法 <a class="header-anchor" href="#_3-使用-once-方法" aria-label="Permalink to &quot;3. 使用 once 方法&quot;">​</a></h3><div class="language-js codearea-link" id="j2qquvi7vp"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 对于一次性事件，使用 once 而不是 on</span></span>\n<span class="line"><span style="color:#F8F8F2;">eventBus.</span><span style="color:#A6E22E;">once</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;oneTimeEvent&#39;</span><span style="color:#F8F8F2;">, handler);</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_4-统一管理事件监听" tabindex="-1">4. 统一管理事件监听 <a class="header-anchor" href="#_4-统一管理事件监听" aria-label="Permalink to &quot;4. 统一管理事件监听&quot;">​</a></h3><div class="language-js codearea-link" id="lceot8a46gl"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">Component</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.listeners </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">initEventListeners</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">initEventListeners</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 统一管理所有监听器</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">addListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;event1&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler1);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">addListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;event2&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler2);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">addListener</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">handler</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> boundHandler </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> handler.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.listeners.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(event, boundHandler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(event, boundHandler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">destroy</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 统一移除所有监听器</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.listeners.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">handler</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            eventBus.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(event, handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        });</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.listeners.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="检测内存泄漏" tabindex="-1">检测内存泄漏 <a class="header-anchor" href="#检测内存泄漏" aria-label="Permalink to &quot;检测内存泄漏&quot;">​</a></h2><h3 id="_1-chrome-devtools" tabindex="-1">1. Chrome DevTools <a class="header-anchor" href="#_1-chrome-devtools" aria-label="Permalink to &quot;1. Chrome DevTools&quot;">​</a></h3><div class="language-js codearea-link" id="nwpko4x5uq"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// 在代码中添加标记</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Component created:&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;Component destroyed:&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#88846F;">// 使用 Chrome DevTools 的 Memory 面板</span></span>\n<span class="line"><span style="color:#88846F;">// 1. 拍摄堆快照</span></span>\n<span class="line"><span style="color:#88846F;">// 2. 触发组件销毁</span></span>\n<span class="line"><span style="color:#88846F;">// 3. 再次拍摄快照</span></span>\n<span class="line"><span style="color:#88846F;">// 4. 比较快照，查看是否有意外保留的对象</span></span></code></pre><button class="link">将此代码在线运行</button></div><h3 id="_2-使用-weakref-进行监控" tabindex="-1">2. 使用 WeakRef 进行监控 <a class="header-anchor" href="#_2-使用-weakref-进行监控" aria-label="Permalink to &quot;2. 使用 WeakRef 进行监控&quot;">​</a></h3><div class="language-js codearea-link" id="y9lb4yaxwx"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">MemoryLeakDetector</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.refs </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Set</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">track</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">component</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> ref </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">WeakRef</span><span style="color:#F8F8F2;">(component);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.refs.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(ref);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 定期检查对象是否被回收</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (ref.</span><span style="color:#A6E22E;">deref</span><span style="color:#F8F8F2;">()) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                console.</span><span style="color:#A6E22E;">warn</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;可能存在内存泄漏:&#39;</span><span style="color:#F8F8F2;">, component);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }, </span><span style="color:#AE81FF;">10000</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><h2 id="最佳实践-1" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践-1" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li><strong>始终配对使用 on/off</strong></li></ol><div class="language-js codearea-link" id="q72bhcr4yc"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#88846F;">// ✅ 好的做法</span></span>\n<span class="line"><span style="color:#A6E22E;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler.</span><span style="color:#A6E22E;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;event&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#A6E22E;">destroy</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    eventBus.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;event&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="2"><li><strong>使用事件管理器</strong></li></ol><div class="language-js codearea-link" id="kpdnb9ci2a"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;text-decoration:underline;">EventManager</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">constructor</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscriptions </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">Map</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">subscribe</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">handler</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        eventBus.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(event, handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscriptions.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(event, handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#A6E22E;">unsubscribeAll</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscriptions.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">handler</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">event</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            eventBus.</span><span style="color:#A6E22E;">off</span><span style="color:#F8F8F2;">(event, handler);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        });</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.subscriptions.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">();</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><ol start="3"><li><strong>使用装饰器自动管理</strong></li></ol><div class="language-js codearea-link" id="mm8oi8yge7"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#A6E22E;">AutoUnsubscribe</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">target</span><span style="color:#F8F8F2;">) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> original </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">target</span><span style="color:#F8F8F2;">.prototype.destroy;</span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span></span>\n<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#66D9EF;font-style:italic;">target</span><span style="color:#F8F8F2;">.prototype.</span><span style="color:#A6E22E;">destroy</span><span style="color:#F8F8F2;"> </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;">() {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#88846F;">// 自动清理所有事件监听</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.eventSubscriptions) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.eventSubscriptions.</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">sub</span><span style="color:#F8F8F2;"> </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> sub.</span><span style="color:#A6E22E;">unsubscribe</span><span style="color:#F8F8F2;">());</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span></span>\n<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (original) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            original.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">    };</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><button class="link">将此代码在线运行</button></div><p>通过以上这些方法和实践，可以有效预防和处理 EventBus 中的内存泄漏问题。</p>', 64)
  ]));
}
const EventBus = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  EventBus as default
};
