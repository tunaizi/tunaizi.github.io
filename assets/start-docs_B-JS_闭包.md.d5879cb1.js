import { _ as _export_sfc, b as r3, c as it, S as ig } from "./chunks/framework.6235ba6c.js";
const __pageData = JSON.parse('{"title":"闭包","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是闭包?","slug":"什么是闭包","link":"#什么是闭包","children":[{"level":3,"title":"闭包的特点: 优点同时也是缺点","slug":"闭包的特点-优点同时也是缺点","link":"#闭包的特点-优点同时也是缺点","children":[]},{"level":3,"title":"闭包的应用","slug":"闭包的应用","link":"#闭包的应用","children":[]},{"level":3,"title":"作用域和作用域链(了解)","slug":"作用域和作用域链-了解","link":"#作用域和作用域链-了解","children":[]}]}],"relativePath":"start-docs/B-JS/闭包.md","filePath":"start-docs/B-JS/闭包.md"}');
const _sfc_main = { name: "start-docs/B-JS/闭包.md" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return r3(), it("div", null, _cache[0] || (_cache[0] = [
    ig('<h1 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h1><h2 id="什么是闭包" tabindex="-1">什么是闭包? <a class="header-anchor" href="#什么是闭包" aria-label="Permalink to &quot;什么是闭包?&quot;">​</a></h2><p>闭包是指 有权访问另一个函数作用域中的变量 的函数。</p><p>简单的来说 就是 一个函数在执行过程中 返回另一个函数/对象 (引用类型 一般都是函数)</p><p>如何形成闭包?</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">1. 在函数内容部,返回一个引用类型(数组,对象,函数,以函数为主)</span></span>\n<span class="line"><span style="color:#F8F8F2;">2. 返回的引用类型(数组,对象,函数,以函数为主),调用使用函数中的局部作用域变量</span></span>\n<span class="line"><span style="color:#F8F8F2;">3. 在函数的外部,有变量来引用这个函数</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">function fn(){</span></span>\n<span class="line"><span style="color:#F8F8F2;">	var a=1;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	return function(){</span></span>\n<span class="line"><span style="color:#F8F8F2;">		return a++;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span>\n<span class="line"><span style="color:#F8F8F2;">var f1 = fn();</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.log(f1());</span></span>\n<span class="line"><span style="color:#F8F8F2;">console.log(f1());</span></span></code></pre></div><h3 id="闭包的特点-优点同时也是缺点" tabindex="-1">闭包的特点: 优点同时也是缺点 <a class="header-anchor" href="#闭包的特点-优点同时也是缺点" aria-label="Permalink to &quot;闭包的特点: 优点同时也是缺点&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">1, 函数,执行空间不会被销毁</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   优点: 空间中的内容,永远存在</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   缺点: 会占用大量的内存空间,造成内存泄露</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">2, 可以从函数外部调用,使用函数内部的数据</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   优点: 调用数据更加方便</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   缺点: 容易泄露数据信息,不安全</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">3, 保护私有变量(减少全局变量的使用)</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   优点: 私有变量,不会被销毁</span></span>\n<span class="line"><span style="color:#F8F8F2;"></span></span>\n<span class="line"><span style="color:#F8F8F2;">   缺点: 私有变量存储占用空间</span></span></code></pre></div><h3 id="闭包的应用" tabindex="-1">闭包的应用 <a class="header-anchor" href="#闭包的应用" aria-label="Permalink to &quot;闭包的应用&quot;">​</a></h3><ol><li>多元素绑定事件</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">匿名函数自调用</span></span>\n<span class="line"><span style="color:#F8F8F2;">    for (var i = 0; i &lt; liList.length; i++) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        // fn(0)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        (function (i) { // i 形式参数  局部变量</span></span>\n<span class="line"><span style="color:#F8F8F2;">            var li = liList[i];</span></span>\n<span class="line"><span style="color:#F8F8F2;">            // 页面加载时  此处只做事件绑定</span></span>\n<span class="line"><span style="color:#F8F8F2;">            li.onclick = function () {  // 当我点击li的时候  页面已经加载完毕</span></span>\n<span class="line"><span style="color:#F8F8F2;">                // li  函数本身没有变量 li,i ( 跳到全局作用域找 li(最后一个)  i(4) )</span></span>\n<span class="line"><span style="color:#F8F8F2;">                li.style.background = &quot;red&quot;;</span></span>\n<span class="line"><span style="color:#F8F8F2;">                console.log(li, i);</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">        })(i);</span></span>\n<span class="line"><span style="color:#F8F8F2;">    }</span></span></code></pre></div><ol start="2"><li>函数防抖/函数节流</li></ol><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">// 函数防抖  </span></span>\n<span class="line"><span style="color:#F8F8F2;">    document.onclick = (function () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">        var flag = false;</span></span>\n<span class="line"><span style="color:#F8F8F2;">        return function () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">            if (flag) {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                return false;</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }</span></span>\n<span class="line"><span style="color:#F8F8F2;">            flag = true;</span></span>\n<span class="line"><span style="color:#F8F8F2;">            setTimeout(function () {</span></span>\n<span class="line"><span style="color:#F8F8F2;">                console.log(111111);</span></span>\n<span class="line"><span style="color:#F8F8F2;">                flag = false;</span></span>\n<span class="line"><span style="color:#F8F8F2;">            }, 1000)</span></span>\n<span class="line"><span style="color:#F8F8F2;">        }</span></span>\n<span class="line"><span style="color:#F8F8F2;">   })()</span></span></code></pre></div><h3 id="作用域和作用域链-了解" tabindex="-1">作用域和作用域链(了解) <a class="header-anchor" href="#作用域和作用域链-了解" aria-label="Permalink to &quot;作用域和作用域链(了解)&quot;">​</a></h3><p>(<a href="https://blog.csdn.net/qappleh/article/details/80311443" target="_blank" rel="noreferrer">https://blog.csdn.net/qappleh/article/details/80311443</a>)</p><p>作用域: 函数在执行过程中的有效区域.</p><p>作用域链: 在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问</p><h4 id="执行环境-或者说执行空间-execution-context" tabindex="-1">执行环境(或者说执行空间)（execution context） <a class="header-anchor" href="#执行环境-或者说执行空间-execution-context" aria-label="Permalink to &quot;执行环境(或者说执行空间)（execution context）&quot;">​</a></h4><p>每个函数运行时都会产生一个执行环境，而这个执行环境怎么表示呢？<strong>js为每一个执行环境关联了一个变量对象。环境中定义的所有变量和函数都保存在这个对象中。</strong> (全局GO对象, 函数AO对象);</p><p>全局执行环境是最外围的执行环境，全局执行环境被认为是window对象，因此所有的全局变量和函数都作为window对象的属性和方法创建的。</p><p>js的执行顺序是根据函数的调用来决定的，当一个函数被调用时，该函数环境的变量对象就被压入一个环境栈(开辟一个执行空间)中。而在函数执行之后，栈将该函数的变量对象弹出，把控制权交给之前的执行环境变量对象。</p><p>举例说明</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">var scope = &quot;global&quot;; </span></span>\n<span class="line"><span style="color:#F8F8F2;">      function fn1(){</span></span>\n<span class="line"><span style="color:#F8F8F2;">         var a = 1;</span></span>\n<span class="line"><span style="color:#F8F8F2;">         var b = 2;</span></span>\n<span class="line"><span style="color:#F8F8F2;">         return scope; </span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      function fn2(){</span></span>\n<span class="line"><span style="color:#F8F8F2;">         return scope;</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      fn1();</span></span>\n<span class="line"><span style="color:#F8F8F2;">      fn2();</span></span></code></pre></div><p>执行情况演示：</p><p>了解了环境变量，再详细讲讲作用域链。 当某个函数第一次被调用时，就会创建一个执行环境(execution context)以及相应的作用域链，并把作用域链赋值给一个特殊的内部属性([scope])。然后使用this，arguments(arguments在全局环境中不存在)和其他命名参数的值来初始化函数的活动对象(activation object)。当前执行环境的变量对象始终在作用域链的第0位。 以上面的代码为例，当第一次调用fn1()时的作用域链如下图所示：</p><p>可以看到fn1活动对象里并没有scope变量，于是沿着作用域链(scope chain)向后寻找，结果在全局变量对象里找到了scope，所以就返回全局变量对象里的scope值。</p><p>作用域链升级应用之闭包</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki monokai"><code><span class="line"><span style="color:#F8F8F2;">function outer(){</span></span>\n<span class="line"><span style="color:#F8F8F2;">      var scope = &quot;outer&quot;;</span></span>\n<span class="line"><span style="color:#F8F8F2;">      function inner(){</span></span>\n<span class="line"><span style="color:#F8F8F2;">         return scope;</span></span>\n<span class="line"><span style="color:#F8F8F2;">      }</span></span>\n<span class="line"><span style="color:#F8F8F2;">      return inner;</span></span>\n<span class="line"><span style="color:#F8F8F2;">  }</span></span>\n<span class="line"><span style="color:#F8F8F2;">  var fn = outer();</span></span>\n<span class="line"><span style="color:#F8F8F2;">  fn();</span></span></code></pre></div><p>outer()内部返回了一个inner函数，当调用outer时，inner函数的作用域链就已经被初始化了（复制父函数的作用域链，再在前端插入自己的活动对象），具体如下图：</p><p>一般来说，当某个环境中的所有代码执行完毕后，该环境被销毁（弹出环境栈），保存在其中的所有变量和函数也随之销毁（全局执行环境变量直到应用程序退出，如网页关闭才会被销毁） 但是像上面那种有内部函数的又有所不同，当outer()函数执行结束，执行环境被销毁，但是其关联的活动对象并没有随之销毁，而是一直存在于内存中，因为该活动对象被其内部函数的作用域链所引用。 具体如下图： outer执行结束，内部函数开始被调用 outer执行环境等待被回收，outer的作用域链对全局变量对象和outer的活动对象引用都断了</p><p>像上面这种内部函数的作用域链仍然保持着对父函数活动对象的引用，就是<strong>闭包(closure)</strong></p>', 32)
  ]));
}
const __ = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  __ as default
};
